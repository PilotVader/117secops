1:"$Sreact.fragment"
2:I[9304,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"ThemeProvider"]
3:I[9241,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"CyberHeader"]
4:I[7555,[],""]
5:I[1295,[],""]
6:I[1024,["542","static/chunks/542-9c169102c7286aba.js","838","static/chunks/838-83c262eea6b250cb.js","345","static/chunks/app/not-found-f26a84874965db45.js"],"default"]
7:I[3063,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"Image"]
8:I[6874,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],""]
a:I[9665,[],"OutletBoundary"]
d:I[9665,[],"ViewportBoundary"]
f:I[9665,[],"MetadataBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/78204a441d290532.css","style"]
:HL["/_next/static/css/b5c3a1bf19425f6c.css","style"]
0:{"P":null,"b":"ueOktod6GdedqcxtLheow","p":"","c":["","projects","building-cybersecurity-home-lab-part2",""],"i":false,"f":[[["",{"children":["projects",{"children":[["slug","building-cybersecurity-home-lab-part2","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/78204a441d290532.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b5c3a1bf19425f6c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":["$","script",null,{"defer":true,"src":"https://cloud.umami.is/script.js","data-website-id":"1c0f224c-1fe0-4093-a4e2-c43cb8c84bfa"}]}],["$","body",null,{"className":"__className_f367f3","children":["$","$L2",null,{"attribute":"class","defaultTheme":"light","disableTransitionOnChange":true,"children":["$","div",null,{"className":"flex min-h-screen flex-col","children":[["$","$L3",null,{}],["$","main",null,{"className":"flex-1 pt-16","children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-background py-5 border-t border-border","children":["$","div",null,{"className":"container mx-auto px-4 md:px-6","children":[["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-3 gap-4","children":[["$","div",null,{"className":"space-y-2","children":[["$","div",null,{"className":"flex items-center","children":["$","div",null,{"className":"relative w-[3.6rem] h-[3.6rem]","children":["$","$L7",null,{"src":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png","alt":"117 SECOPS Logo","fill":true,"className":"object-contain"}]}]}],["$","p",null,{"className":"text-sm text-muted-foreground max-w-xs","children":"Cybersecurity professional specializing in protecting digital assets from evolving threats."}],["$","div",null,{"className":"pt-0","children":["$","a",null,{"href":"https://www.linkedin.com/in/otori-samson/","target":"_blank","rel":"noopener noreferrer","children":"Contact Me","className":"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-9 rounded-md px-3 cyber-border bg-transparent text-foreground hover:bg-purple-600 hover:text-white","ref":null}]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Quick Links"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"children":["$","$L8",null,{"href":"/","className":"text-sm text-muted-foreground hover:text-primary","children":"Home"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/blog","className":"text-sm text-muted-foreground hover:text-primary","children":"Blog"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/projects","className":"text-sm text-muted-foreground hover:text-primary","children":"Projects"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/portfolio","className":"text-sm text-muted-foreground hover:text-primary","children":"Portfolio"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/about","className":"text-sm text-muted-foreground hover:text-primary","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Areas of Expertise"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"className":"text-sm text-muted-foreground","children":"Security Assessment"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Penetration Testing"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Secure Development"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Incident Response"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Compliance"}]]}]]}]]}],["$","div",null,{"className":"border-t border-border mt-5 pt-3 flex flex-col md:flex-row justify-between items-center","children":["$","p",null,{"className":"text-sm text-muted-foreground","children":["Â© ",2025," Samson's. Personal cybersecurity portfolio."]}]}]]}]}]]}]}]}]]}]]}],{"children":["projects",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","building-cybersecurity-home-lab-part2","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L9","$undefined",null,["$","$La",null,{"children":["$Lb","$Lc",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","jppWJbnvYqKA30UYrN2uu",{"children":[["$","$Ld",null,{"children":"$Le"}],null]}],["$","$Lf",null,{"children":"$L10"}]]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:I[2238,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","842","static/chunks/842-e0e5a1d477d9d65d.js","150","static/chunks/150-c359029d3b689678.js","419","static/chunks/app/projects/%5Bslug%5D/page-41cd4d27245b4b70.js"],"default"]
13:Tce8,
# Part 2: Generating Telemetry and Analyzing Attacks

My focus has shifted to generating telemetry data for analysis, a critical step in detecting malicious activities.

## Scanning with Nmap

I started the telemetry generation process with Nmap. This enabled me to conduct a comprehensive scan of my Windows VM, identifying open ports and services that could be potential attack vectors. This reconnaissance phase helped me understand the attack surface and assess vulnerabilities within my environment.

The scan revealed several open ports, notably Port 3389, associated with Remote Desktop Protocol (RDP). Identifying such services is crucial as they can serve as entry points for attackers seeking to exploit system weaknesses.

## Crafting Malware with Metasploit

After reconnaissance, I shifted to creating a simulated attack using Metasploit, a widely used framework for penetration testing. I crafted a reverse shell payload, a common technique used by attackers to gain unauthorized access to target systems. This exercise provided insight into the attack lifecycle and how malicious actors exploit systems.

With the malicious executable ready, I set up a listener in Metasploit to capture any incoming connections from the reverse shell. This involved configuring the Metasploit environment for potential exploitation attempts from the crafted payload.

## Executing the Malware

Once the payload and listener were in place, I set up an HTTP server using Python on my attacking OS. I accessed the server from my Windows machine to download the malware. To simulate a real-world scenario, I disabled Windows Defender to allow the payload to execute unhindered.

After running the payload, I monitored my parrot machine for an incoming connection, indicating a successful exploit. I executed basic commands like SHELL, NET USER, and IP CONFIG to generate telemetry data.

## Analyzing Telemetry with Splunk

With the simulated attack executed, I turned to analyzing the telemetry generated by the activities in my lab. I configured Splunk to ingest system logs from Sysmon, setting up an index dedicated to endpoint monitoring.

By correlating telemetry data with events from the attack simulation, I gained insights into the attack lifecycle. I reviewed logs for indicators of compromise, including the creation and execution of the reverse shell. This analysis is essential for developing effective detection strategies in a real-world Security Operations Center (SOC).

## Conclusion

Through these exercises, I've deepened my understanding of the attack lifecycle and the importance of telemetry in incident response. Generating and analyzing telemetry data is fundamental for any aspiring SOC analyst. In the coming days, I plan to refine my detection capabilities further and explore additional avenues for generating and analyzing telemetry.

Here's the link to follow along: [Building A Basic Home Lab](https://www.youtube.com/watch?v=-8X7Ay4YCoA&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=3)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

_#CyberSecurity #SOCAnalyst #MYDFIR #HandsOnExperience_ 14:Td3c,
# Part 1: Setting Up My Virtual Home Lab Environment

## Home Lab Setup

I embarked on an exciting journey to establish a cybersecurity home lab aimed at creating a controlled environment for hands-on experimentation and skill development.

### Setting Up Virtual Machines

To begin, I chose VirtualBox as my virtualization platform, which allows me to run multiple virtual machines (VMs) for specific tasks. I set up two VMs: one running Parrot Security OS, favored for penetration testing, and another with Windows for defensive security tasks and telemetry generation.

Creating the virtual machines was straightforward. I allocated sufficient resources, including CPU and RAM, to ensure optimal performance. For Parrot Security OS, I configured the network settings to facilitate communication with the Windows machine. By selecting an Internal Network type, I established a private network between the VMs, isolating my lab from the internet and reducing the risk of exposure during testing.

### Setting Up Sysmon for Telemetry Generation

To enhance telemetry on the Windows machine, I installed Sysmon (System Monitor), a tool that logs detailed system activity. After downloading Sysmon from the Microsoft Sysinternals website, I executed it with a configuration to capture key events, including process creation and network connections. This setup allows effective monitoring and analysis of activities, providing rich telemetry data for examination.

### Integrating Splunk for Analysis

Next, I installed Splunk on the Windows VM to analyze the telemetry data generated by Sysmon. Splunk is a powerful platform for searching and analyzing machine-generated data, essential for incident response. After installation, I configured Splunk to ingest the Sysmon logs by setting up a new data input and specifying the log directory. Initial searches confirmed that Splunk was capturing the data correctly.

With Sysmon and Splunk operational, my telemetry generation setup was complete, enabling analysis of security events and improving my skills in detecting and responding to potential threats.

### Testing Connectivity

After the VMs were running, I conducted connectivity tests using basic network commands like PING to ensure effective communication between them. This step confirmed that my network configuration was functioning as intended, allowing seamless data sharing. Establishing this successful connection provided a sense of accomplishment, laying the groundwork for exploring various cybersecurity tools and techniques in a controlled environment.

## Conclusion

With the initial setup complete, I now have a solid foundation for my cybersecurity home lab. This environment will provide hands-on experience and help develop the skills necessary for my future as a SOC analyst. In the next part of this blog, I will explore generating telemetry data and analyzing it to uncover valuable security insights.

Stay Tuned!

Here's the link to follow along: [Building A Basic Home Lab](https://www.youtube.com/watch?v=5iafC6vj7kM&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=2)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

_#CyberSecurity #SOCAnalyst #MYDFIR #HandsOnExperience_
15:T1c86,
## Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab

### Building the SIEM Foundation: Wazuh Server Deployment

Continuing from the previous episodes of my cybersecurity home lab journey, I entered the next to introduce Wazuh as the SIEM and XDR solution for telemetry collection, log correlation, and detection engineering. I provisioned a new Ubuntu server virtual machine on Proxmox with 4 vCPUs, 8GB of RAM, and 160GB of disk space, ensuring it resided within VLAN 5 (my security tools network) using the IP 10.10.5.51/24. The Wazuh installation process was straightforward. After setting a static IP and configuring DNS and gateway entries, I initiated a basic update and upgrade cycle, then ran the official Wazuh installation script from their GitHub repository.

Once the installation was completed, I accessed the Wazuh dashboard via HTTPS at https://10.10.5.51, authenticated using the auto-generated credentials, and confirmed a successful deployment. With the Wazuh manager operational, the next step was deploying agents across key systems in the lab.

<InlineGallery images={wazuh-server-deployment} title="Wazuh Server Deployment" />

### Deploying Agents: Parrot OS and Docker Server Integration

The first endpoint I configured was my Parrot OS. I elevated to root and ran the prescribed commands to add the Wazuh repository, perform an update, and install the agent. I edited the agent configuration to point it at the Wazuh manager IP and verified connectivity. Upon launching the agent, it registered on the Wazuh dashboard and began transmitting logs shortly after.

I replicated the same process on my Ubuntu Docker server (10.10.30.100), again ensuring root privileges, repository addition, and agent configuration. I initiated the agent and confirmed its visibility on the Wazuh interface. To extend observability into containerised environments, I proceeded to install the Wazuh Docker Listener and configured the Docker API for telemetry ingestion. I appended the required JSON configuration into the agent's config file, restarted the service, and enabled the module on the Wazuh dashboard under Settings > Modules > Docker Listener. Container-level logs began appearing as I restarted a few test containers to validate.

<InlineGallery images={agent-installation} title="Agent Installation Process" />

### OPNsense Firewall Agent Issues: Encountering the PID File Roadblock

With both endpoint systems operational in Wazuh, I turned my attention to integrating my OPNsense firewall (192.168.1.1) running on dedicated hardware. This step diverged significantly from the Linux-based agents, as it required enabling FreeBSD repositories and handling configuration in a constrained BSD environment. I SSHed into OPNsense, enabled SSH under System > Advanced, and modified the FreeBSD.conf file to set enabled=YES. Unlike the tutorial, I found only the freebsd.conf file available, not pfsense.conf, due to architectural differences between OPNsense and pfSense.

Following the installation instructions, I attempted to run the agent-auth binary to register the agent with the manager. However, I encountered a persistent error: agent-auth: CRITICAL (1212): Unable to create PID file. This indicated a permission or filesystem-level issue preventing the Wazuh agent from properly initialising. Further troubleshooting revealed that the ossec user and group did not exist by default. Attempts to assign ownership using chown -R ossec:ossec /var/ossec returned "illegal group name" errors.

I manually verified write permissions by creating and removing test files under /var/ossec, which confirmed basic functionality. Despite that, the Wazuh agent daemon (wazuh-agentd) consistently failed to start. Configuration and log file reviews pointed to missing or incompatible startup routines specific to FreeBSD. I eventually confirmed that even after enabling FreeBSD package support and properly configuring ossec.conf to include the manager IP, the agent appeared on the Wazuh dashboard but failed to show "Active" status.

At this point, I decided to temporarily pause work on the OPNsense agent integration. The issue remained unresolved, likely due to deeper compatibility mismatches or required kernel parameters not present on the OPNsense BSD environment. I plan to revisit this with a custom-built FreeBSD agent installation script or by manually creating missing users and startup routines. But if anyone has encountered this issue, please reach out to me with suggestions, I'll really appreciate.

<InlineGallery images={opnsense-setup} title="OPNsense Firewall Configuration" />

### Deploying Nessus: Introducing Vulnerability Scanning to the Lab

With the SIEM side in partial production, I progressed to deploying Nessus for vulnerability scanning. I created a new Ubuntu VM on Proxmox with 4 vCPUs, 4 GB RAM, and 40 GB disk, assigning it the IP address 10.10.5.52/24 within VLAN 5. After configuring static networking and enabling SSH, I logged in and ran the commands to download the latest Nessus Debian package. I installed it using dpkg and started the nessusd service.

Accessing Nessus via the browser at https://10.10.5.52:8834 allowed me to register for the Essentials version and input the activation key. The platform then began downloading its full set of plugins and signature files. Once installation was completed, I created a quick scan targeting the Metasploitable2 VM. Even with the basic scan template, the results after the scan show that it was successful even with limited information, confirming its functionality.

<InlineGallery images={nessus-deployment} title="Nessus Vulnerability Scanner Setup" />

### Conclusion

At this point, I had a partially complete security monitoring stack within my home lab. Wazuh was successfully collecting logs from my Parrot OS and Docker machines and even parsing Docker container activity. Nessus was active and ready to scan targets across VLAN 5. However, OPNsense integration remained incomplete due to agent startup issues tied to BSD permission handling. I plan to circle back to this issue later with a deeper understanding of BSD service management or possibly using Syslog forwarding as a temporary workaround.

This project showcases the real-world challenges of building a hybrid monitoring environment, integrating both Linux and BSD-based systems into a centralised SIEM. It's a valuable case study for anyone deploying Wazuh in a segmented network and dealing with heterogeneous operating systems. My next step will be to document the resolution of the OPNsense agent issue and expand Wazuh's use to include alert rule tuning and dashboard customisation.

Stay tuned for the next stage of this project as we integrate more detection and response tools.

**Credits:** This walkthrough is based on Episode 3 of the Ultimate Cybersecurity Lab YouTube series by Gerard O'Brien. While the steps closely followed his guidance, the project was independently implemented by Samson Otori, with custom network configurations and host assignments tailored to fit a pre-existing VLAN-segmented lab environment.

Here's a link to his YouTube channels:

[Gerard O'Brien's Channel](https://www.youtube.com/watch?v=ytWZ6OrFEQE&list=PL3ljjyal211AbTqlxSo6CGBiVqsXw8wrp&index=9) 16:T1583,
# Part 3: Generating and Ingesting Telemetry

## Introduction

In this third part of the MYDFIR SOC Automation Project home lab series, I dive into the critical process of generating telemetry from a Windows 10 machine and ensuring it is correctly ingested into Wazuh. By the end of this session, I would have successfully configured my system to log events, including activity from Mimikatz, and triggered a custom alert. This hands-on process not only enhances my understanding of SIEM operations but also strengthens my ability to detect and analyze security incidents effectively.

## Configuring Wazuh to Ingest Sysmon Logs

To begin, I access the Wazuh configuration settings on my Windows 10 machine. When Wazuh is installed, its configuration files are located under Program Files (x86), specifically within the ek-agent folder. The key file I need to modify is ossec.conf. This file governs how logs are processed and which events are included or excluded from analysis. By default, certain event IDs are excluded using the != operator. However, for my purpose, I need to monitor processes related to Mimikatz, which requires Sysmon to be installed or Windows Security Event ID 4688 to be enabled. Since Sysmon was installed in part two of this series, I opt for that method.

Before making changes, I first create a backup of ossec.conf to safeguard against errors. This allows me to revert back if needed. I then modify the configuration to ingest Sysmon logs by adding a new entry under the localfile section. To locate the correct Sysmon channel name, I open the Windows Event Viewer, navigate to Applications and Services > Microsoft > Windows > Sysmon, and retrieve the operational log name from the properties section. This name is then inserted into my ossec.conf file in place of the existing application log configuration.

## Adjusting Log Categories and Restarting Services

Next, I remove other log categories such as Application, Security, and System, ensuring that only Sysmon logs are forwarded to the Wazuh manager. Once the changes are saved, administrative privileges are required to replace the existing configuration file. After this, I restart the Wazuh service, as any configuration changes must be followed by a service restart to take effect.

## Testing Telemetry with Mimikatz

With the updated configuration in place, I verify the ingestion of Sysmon logs in the Wazuh dashboard. Searching for "Sysmon" in the Alerts index may take some time before logs appear. To test this setup, I download and execute Mimikatz. Since Windows Defender would block this file, I must first exclude the Downloads folder from virus scanning. This is done through Windows Security settings by adding an exclusion for the Downloads directory. Also, Google Chrome may prevent the download, so I disable Safe Browsing under Privacy and Security settings in Chrome before proceeding.

Once Mimikatz is downloaded and extracted, I run it via an administrative PowerShell session and monitor Wazuh for related alerts. If no alerts appear, it is likely because Wazuh only logs events when a predefined rule is triggered. To address this, I modify the ossec.conf file on the Wazuh manager to log all events by default. This is done by enabling the logall and logall_json options in the configuration file. After saving these changes, I restart the Wazuh manager service.

## Enhancing Log Archiving and Indexing

To ensure that all logs are archived and ingested into Wazuh, I also update Filebeat's configuration. This involves navigating to the Filebeat YAML configuration file and changing the archives_enabled setting from false to true. As always, after modifying configurations, I restart the Filebeat service to apply the changes.

Once the configurations are updated, I proceed to create a new index in the Wazuh dashboard for archived logs. This is done through the Stack Management section, where I define a new index pattern named wazuh-archives-*. After setting the timestamp field, I finalize the index creation. Now, when navigating to the Discover section of Wazuh, I can select my newly created index and search for logs related to Mimikatz.

## Troubleshooting Log Ingestion Issues

If events are still not visible, I perform troubleshooting by inspecting the archived log files in the Wazuh manager's CLI. By navigating to /var/ossec/logs/archives/, I list the available log files and use cat and grep commands to search for Mimikatz activity. If the logs are present in the archive but not appearing in the dashboard, it indicates a delay in ingestion, which resolves over time.

## Conclusion

This session underscores the importance of proper log configuration and SIEM tuning. By ensuring that all relevant events are captured and making necessary adjustments, I enhance my detection capabilities. With my telemetry now successfully feeding into Wazuh, I am well-prepared for the final part of the series, where I will further refine my detection rules and automation workflows.

Stay Tuned.

Here's the link to follow along: [SOC Automation Project](https://www.youtube.com/watch?v=amTtlN3uvFU&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=9)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#CyberSecurity #SOCAnalyst #MYDFIR #HandsOnExperience #SecurityMonitoring #IncidentResponse 9:["$","$L12",null,{"projectData":{"slug":"building-cybersecurity-home-lab-part2","title":"Part 2: Generating Telemetry and Analyzing Attacks","description":"Generating telemetry and analyzing attacks in our cybersecurity home lab.","date":"2024-11-23","author":"Samson Otori","client":"Personal Project","challenge":"Generate and analyze telemetry data to detect malicious activities.","solution":"Used Nmap for reconnaissance, Metasploit for attack simulation, and Splunk for log analysis.","results":["Successfully generated attack telemetry","Implemented attack detection capabilities","Gained hands-on experience with security tools"],"category":"blue","tags":["Blue Team","Home Lab","SIEM"],"content":"$13","image":"/images/projects/Project 1.png","technologies":["Nmap","Metasploit","Python","Splunk"],"images":[{"src":"/images/projects/homelab-part2/1 RDP Port Opened on windows 10 NMAP SCAN.png","alt":"RDP Port Opened on Windows 10 - NMAP Scan"},{"src":"/images/projects/homelab-part2/2 MSFVEnoM.png","alt":"MSFVenom Configuration"},{"src":"/images/projects/homelab-part2/3 msfvenom payload i will use.png","alt":"MSFVenom Payload Selection"},{"src":"/images/projects/homelab-part2/4 Malware Creation RESUME.png","alt":"Malware Creation Process"},{"src":"/images/projects/homelab-part2/5 msfconsole.png","alt":"MSFConsole Interface"},{"src":"/images/projects/homelab-part2/6 payload options .png","alt":"Payload Options Configuration"},{"src":"/images/projects/homelab-part2/7 Changing the payload options.png","alt":"Modifying Payload Options"},{"src":"/images/projects/homelab-part2/8 Settings LHOST to Attacker IP.png","alt":"Setting LHOST to Attacker IP"},{"src":"/images/projects/homelab-part2/9 Listening and waiting for test machine to execute malware.png","alt":"Listener Waiting for Test Machine"},{"src":"/images/projects/homelab-part2/10 Http server setup for test machine to download malware.png","alt":"HTTP Server Setup for Malware Download"},{"src":"/images/projects/homelab-part2/11 Disabling windows defender.png","alt":"Disabling Windows Defender"},{"src":"/images/projects/homelab-part2/12 Accessing attacker server to download malware.png","alt":"Accessing Attacker Server"},{"src":"/images/projects/homelab-part2/13 downloaded malware without file extension.png","alt":"Downloaded Malware Without Extension"},{"src":"/images/projects/homelab-part2/14 Established connection between attacker and test machine after executing malware.png","alt":"Established Connection After Malware Execution"},{"src":"/images/projects/homelab-part2/15 Confirmation of process running on task manager.png","alt":"Process Confirmation in Task Manager"},{"src":"/images/projects/homelab-part2/16 Connection created at my handler.png","alt":"Connection Created at Handler"},{"src":"/images/projects/homelab-part2/17 Commands ran on the test machine from the attacker machine SHELL then NET USER.png","alt":"Commands Execution - SHELL and NET USER"},{"src":"/images/projects/homelab-part2/18 COMMAND NET LOCAL GROUP on shell .png","alt":"NET LOCAL GROUP Command Execution"},{"src":"/images/projects/homelab-part2/19 COMMAND ipconfig on SHELL.png","alt":"IPCONFIG Command Execution"},{"src":"/images/projects/homelab-part2/20 quering my attackig ip address on splunk.png","alt":"Querying Attacker IP in Splunk"},{"src":"/images/projects/homelab-part2/21 Quering RESUMEdotPDFdotEXE.png","alt":"Querying Malware Execution in Splunk"},{"src":"/images/projects/homelab-part2/22 Sticking with event code 1.png","alt":"Event Code 1 Analysis"},{"src":"/images/projects/homelab-part2/23 Parentprocess SPLUNK.png","alt":"Parent Process Analysis in Splunk"},{"src":"/images/projects/homelab-part2/24 what the parent process spawned cmd.exe.png","alt":"Parent Process Spawning CMD.exe"},{"src":"/images/projects/homelab-part2/25 with process id.png","alt":"Process ID Information"},{"src":"/images/projects/homelab-part2/26 Searching through processguid and structuring query.png","alt":"Process GUID Search and Query Structure"},{"src":"/images/projects/homelab-part2/27 Searching through processguid and structuring query to know what exactly happened.png","alt":"Detailed Query Structure Analysis"},{"src":"/images/projects/homelab-part2/28 Python http server to deply malware online for download.png","alt":"Python HTTP Server for Malware Deployment"}],"series":{"name":"Project 1: Building a Cybersecurity Home Lab","part":2,"totalParts":2}},"relatedProjects":[{"slug":"building-cybersecurity-home-lab","title":"Part 1: Setting Up My Virtual Home Lab Environment","description":"Establishing a home lab to gain hands-on experience in cybersecurity.","date":"2024-11-08","author":"Samson Otori","client":"Personal Project","challenge":"Create a safe, controlled environment to explore cybersecurity tools and techniques.","solution":"Set up virtual machines, implemented telemetry with Sysmon, and integrated Splunk for log analysis.","results":["Established an isolated cybersecurity lab","Enabled telemetry generation and analysis","Built foundational skills in monitoring and detection"],"category":"blue","tags":["Blue Team","Home Lab","SIEM"],"content":"$14","image":"/images/projects/Project 1.png","technologies":["VirtualBox","Parrot Security OS","Sysmon","Splunk"],"images":[],"series":{"name":"Project 1: Building a Cybersecurity Home Lab","part":1,"totalParts":2}},{"slug":"project-4-4-wazuh-nessus-integration","title":"Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab","description":"A comprehensive walkthrough of deploying Wazuh SIEM/XDR for log correlation and Nessus for vulnerability scanning in a segmented cybersecurity homelab environment.","date":"2025-08-03","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Wazuh","SIEM","XDR","Nessus","Vulnerability Scanning","Security Monitoring","OPNsense","Docker","Parrot OS","Ubuntu","Proxmox","VLAN","Homelab","Blue Team"],"content":"$15","image":"/images/projects/hardware-lab/Image-header-for-project-4.4.jpeg","technologies":[],"images":[],"series":{"name":"Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab","part":1,"totalParts":1}},{"slug":"soc-automation-project-part2","title":"Part 3: Generating and Ingesting Telemetry","description":"Setting up telemetry generation and ingestion in our SOC environment using Mimikatz and configuring Wazuh for detection","date":"2025-03-21","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Blue Team","SOC","Automation","SIEM","Telemetry"],"content":"$16","image":"/images/projects/project 2.png","technologies":[],"images":[{"src":"/images/projects/soc-automation/part3/1 Editing ossec config file to ingest sysmon logs.png","alt":"Editing Wazuh ossec.conf File to Ingest Sysmon Logs"},{"src":"/images/projects/soc-automation/part3/2 Sysmon service running on windows for telemetary generation.png","alt":"Sysmon Service Running on Windows for Telemetry Generation"},{"src":"/images/projects/soc-automation/part3/3 Mimikatz downloaded and running on client pc.png","alt":"Mimikatz Downloaded and Running on Client PC"},{"src":"/images/projects/soc-automation/part3/4 Creating index for archives to enable us search all ingested logs.png","alt":"Creating Index for Archives to Search All Ingested Logs"},{"src":"/images/projects/soc-automation/part3/5 Configuring the wazuh ossec.conf file to take all logs of everything happening.png","alt":"Configuring Wazuh to Log All Events"},{"src":"/images/projects/soc-automation/part3/6 changing filebeat config in order for wazuh to ingest logs into archives.png","alt":"Modifying Filebeat Configuration for Log Archiving"},{"src":"/images/projects/soc-automation/part3/7 Mimikatz events logs now ingested into archives and visible on wazuh dashboard.png","alt":"Mimikatz Event Logs Visible in Wazuh Dashboard"},{"src":"/images/projects/soc-automation/part3/8 Rule creation through sysmon targeting event id 1.png","alt":"Creating Sysmon Rule for Event ID 1"},{"src":"/images/projects/soc-automation/part3/9 Crafting rule to detect mimikatz (RULE CRAFTED).png","alt":"Crafting Detection Rule for Mimikatz"},{"src":"/images/projects/soc-automation/part3/10 Alert generated on wazuh on mimikatz usage.png","alt":"Wazuh Alert Generated for Mimikatz Usage"}],"series":{"name":"Project 2: SOC Automation Project","part":3,"totalParts":3}}],"categoryCounts":{"blue":45,"Infrastructure":3,"red":1}}]
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
c:null
10:[["$","title","0",{"children":"Samson's | Cybersecurity Portfolio"}],["$","meta","1",{"name":"description","content":"Professional cybersecurity portfolio showcasing expertise in digital security"}],["$","meta","2",{"name":"generator","content":"v0.dev"}],["$","link","3",{"rel":"icon","href":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png"}]]
