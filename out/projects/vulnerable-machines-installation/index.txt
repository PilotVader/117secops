1:"$Sreact.fragment"
2:I[9304,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"ThemeProvider"]
3:I[9241,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"CyberHeader"]
4:I[7555,[],""]
5:I[1295,[],""]
6:I[1024,["542","static/chunks/542-9c169102c7286aba.js","838","static/chunks/838-83c262eea6b250cb.js","345","static/chunks/app/not-found-f26a84874965db45.js"],"default"]
7:I[3063,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"Image"]
8:I[6874,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],""]
a:I[9665,[],"OutletBoundary"]
d:I[9665,[],"ViewportBoundary"]
f:I[9665,[],"MetadataBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/78204a441d290532.css","style"]
:HL["/_next/static/css/b5c3a1bf19425f6c.css","style"]
0:{"P":null,"b":"ueOktod6GdedqcxtLheow","p":"","c":["","projects","vulnerable-machines-installation",""],"i":false,"f":[[["",{"children":["projects",{"children":[["slug","vulnerable-machines-installation","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/78204a441d290532.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b5c3a1bf19425f6c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":["$","script",null,{"defer":true,"src":"https://cloud.umami.is/script.js","data-website-id":"1c0f224c-1fe0-4093-a4e2-c43cb8c84bfa"}]}],["$","body",null,{"className":"__className_f367f3","children":["$","$L2",null,{"attribute":"class","defaultTheme":"light","disableTransitionOnChange":true,"children":["$","div",null,{"className":"flex min-h-screen flex-col","children":[["$","$L3",null,{}],["$","main",null,{"className":"flex-1 pt-16","children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-background py-5 border-t border-border","children":["$","div",null,{"className":"container mx-auto px-4 md:px-6","children":[["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-3 gap-4","children":[["$","div",null,{"className":"space-y-2","children":[["$","div",null,{"className":"flex items-center","children":["$","div",null,{"className":"relative w-[3.6rem] h-[3.6rem]","children":["$","$L7",null,{"src":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png","alt":"117 SECOPS Logo","fill":true,"className":"object-contain"}]}]}],["$","p",null,{"className":"text-sm text-muted-foreground max-w-xs","children":"Cybersecurity professional specializing in protecting digital assets from evolving threats."}],["$","div",null,{"className":"pt-0","children":["$","a",null,{"href":"https://www.linkedin.com/in/otori-samson/","target":"_blank","rel":"noopener noreferrer","children":"Contact Me","className":"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-9 rounded-md px-3 cyber-border bg-transparent text-foreground hover:bg-purple-600 hover:text-white","ref":null}]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Quick Links"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"children":["$","$L8",null,{"href":"/","className":"text-sm text-muted-foreground hover:text-primary","children":"Home"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/blog","className":"text-sm text-muted-foreground hover:text-primary","children":"Blog"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/projects","className":"text-sm text-muted-foreground hover:text-primary","children":"Projects"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/portfolio","className":"text-sm text-muted-foreground hover:text-primary","children":"Portfolio"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/about","className":"text-sm text-muted-foreground hover:text-primary","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Areas of Expertise"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"className":"text-sm text-muted-foreground","children":"Security Assessment"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Penetration Testing"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Secure Development"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Incident Response"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Compliance"}]]}]]}]]}],["$","div",null,{"className":"border-t border-border mt-5 pt-3 flex flex-col md:flex-row justify-between items-center","children":["$","p",null,{"className":"text-sm text-muted-foreground","children":["Â© ",2025," Samson's. Personal cybersecurity portfolio."]}]}]]}]}]]}]}]}]]}]]}],{"children":["projects",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","vulnerable-machines-installation","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L9","$undefined",null,["$","$La",null,{"children":["$Lb","$Lc",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","X_6TfI-R_Hf0w5RpnOnXY",{"children":[["$","$Ld",null,{"children":"$Le"}],null]}],["$","$Lf",null,{"children":"$L10"}]]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:I[2238,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","842","static/chunks/842-e0e5a1d477d9d65d.js","150","static/chunks/150-c359029d3b689678.js","419","static/chunks/app/projects/%5Bslug%5D/page-41cd4d27245b4b70.js"],"default"]
13:T1b54,
## Project 4.3: Vulnerable Machines Installation (Metasploitable2, DVWA, bWAPP, WebGoat)

Following the successful deployment of Docker and Portainer within VLAN 5 of my home lab, the next step in my cybersecurity lab project was to populate the environment with intentionally vulnerable systems. These systems will serve as practical targets for future testing, detection, and simulation scenarios. In this post, I document the installation and configuration of four key vulnerable systems: Metasploitable2, Damn Vulnerable Web Application (DVWA), bWAPP (Buggy Web Application), and WebGoat.

## Installing Metasploitable2 (MSF2)

Metasploitable2, a vulnerable Linux VM maintained by Rapid7, is designed for penetration testing training and exploits development. It's a go-to machine for beginners looking to understand service-level vulnerabilities.

To begin, I created a new VM in Proxmox with the following details:
- VM ID: 105
- VM Name: Meta-Sploit-Able2
- Media Type: No media
- Disk Interface: IDE
- Network VLAN: VLAN 10 (Vulnerable Machines)

After provisioning the VM shell, I SSHed into the Proxmox server from my Parrot OS laptop and navigated to `/var/lib/vz/images/`. Inside this directory, I created a folder named `105`, matching the VM ID. The reason for SSH access instead of using Proxmox's UI was to maintain an isolated and secure management workflow.

Using wget, I attempted to download the Metasploitable2 image. After resolving a few download errors, I extracted the ZIP file and located the necessary VMDK disk image. This image had to be converted to the QCOW2 format, which is preferred in Proxmox for virtual disk usage. The conversion was done using the qemu-img convert command:

```bash
qemu-img convert -f vmdk -O qcow2 Metasploitable2-Linux.vmdk Metasploitable2-Linux.qcow2
```

Next, I edited the configuration file of VM 105 (`/etc/pve/qemu-server/105.conf`) and pointed the VM to the newly converted QCOW2 disk image. I saved and verified the change from the Proxmox UI under "Hardware."

After powering on the VM, I logged in using the default Metasploitable credentials (`msfadmin` / `msfadmin`). I confirmed the system had joined VLAN 10 correctly by checking its IP address: `10.10.10.100`. I also validated DHCP functionality, DNS resolution, and connectivity to my firewall.

To finish this section, I browsed to the Metasploitable2 IP from my parrot OS and confirmed that its web interface, including DVWA (which comes preinstalled), was accessible.

## Setting Up Docker Networking with MacVLAN

Before continuing to deploy the rest of the vulnerable apps as containers, I had to address Docker's default behavior of assigning container IPs behind a bridge. This would prevent each container from having its own IP on the subnet, which was necessary for scanning them individually with tools like Nessus later on.

To solve this, I logged into Portainer and configured custom Docker networks using MacVLAN. I created two networks:

1. `vlan30-config` (on `10.10.30.0/24`): Provided the container IP range using MACVLAN driver.
2. `vlan30`: Attached directly to VLAN 30 (Docker-Containers).

I retrieved the correct network adapter name using `ip a` command on the Ubuntu Docker host and configured gateway and subnet ranges carefully. This configuration allowed containers to pull individual IPs within VLAN 30, just like physical devices.

To test the new network configuration, I deployed a test Nginx container and confirmed it received a proper IP within the range (e.g., `10.10.30.128`) and was accessible via browser.

## Deploying bWAPP (Buggy Web Application)

bWAPP, which stands for Buggy Web Application, is a PHP/MySQL-based deliberately insecure web app developed for educational purposes. It contains over 100 web vulnerabilities.

Inside Portainer, I added a new container:
- Name: `prod-bwapp`
- Image: Pulled from Docker Hub
- Network: Attached to `vlan30` (configured earlier with MacVLAN)

After deployment, I copied its assigned IP and accessed it via browser. The bWAPP interface loaded successfully. I followed the on-screen prompt to complete the installation, setting up the database via the `/install.php` page. Once installed, the login screen confirmed successful setup.

## Deploying Damn Vulnerable Web Application (DVWA)

DVWA, or Damn Vulnerable Web Application, is another PHP/MySQL web app with known vulnerabilities. It's widely used to practice web-based attacks such as SQL injection, XSS, CSRF, etc.

Just like with bWAPP, I deployed DVWA through Portainer:
- Name: `prod-dvwa`
- Image: Pulled from Docker Hub
- Network: Connected to `vlan30`

Upon deployment, I accessed the IP in the browser. DVWA was reachable, and the default login screen appeared. All services were running correctly within the expected Docker environment.

## Deploying WebGoat

WebGoat is a deliberately insecure Java-based web application maintained by OWASP to teach application security lessons.

Following the same container deployment process:
- Name: `prod-webgoat`
- Image: Pulled from Docker Hub
- Network: Connected to `vlan30`

After the container started, I accessed it via the browser using the assigned IP and port 8080 (e.g., `http://10.10.30.135:8080`). WebGoat loaded successfully, providing access to a series of vulnerable coding labs that simulate real-world scenarios.

## Conclusion

At this point, my Vulnerable Machines segment is fully functional. The following systems are now live and operating on VLAN 10 and VLAN 30:

- Metasploitable2 (IP: `10.10.10.51`) on VLAN 10
- bWAPP, DVWA, and WebGoat as Docker containers with unique IPs on VLAN 30

These machines will now serve as valuable assets for upcoming simulations, scanning, alerting, and response workflows in the lab. Their intentional vulnerabilities are essential for testing detection tools like Wazuh and Nessus, which will be covered in future posts.

If you're following along with this project, make sure your VLAN segmentation, DHCP assignment, and Docker networking are properly configured. Having each container accessible via its own IP is key to realistic and scalable security testing.

Stay tuned for the next stage of this project as we integrate more detection and response tools.

Credits: This walkthrough is based on Episode 2 of the Ultimate Cybersecurity Lab YouTube series by Gerard O'Brien. While the steps closely followed his guidance, the project was independently implemented by Samson Otori, with custom network configurations and host assignments tailored to fit a pre-existing VLAN-segmented lab environment.

Here's a link to his YouTube channels:
- [Gerard O'Brien's Channel](https://www.youtube.com/@techwithgerard)

---

**Tags:** #Metasploitable2 #DVWA #bWAPP #WebGoat #VulnerableMachines #PenetrationTesting #Docker #MacVLAN #VLAN #Homelab #Proxmox #Cybersecurity #SecurityTraining #WebVulnerabilities #Containerization 14:T1417,
## Ubuntu Server, Docker and Portainer Installation in My Homelab

After successfully segmenting my home lab using VLANs, the next major step was to deploy an Ubuntu Server dedicated to containerized tools using Docker and Portainer. Instead of using the Proxmox console directly throughout the process, I took a more modular and realistic approach: I SSHed into the Ubuntu server remotely from another laptop running Parrot OS. This Parrot OS laptop was physically connected to my Cisco switch using an RJ45 cable and had already been assigned to VLAN 5, the dedicated Security Tools segment in my lab.

The entire flow unfolded like this:

First, I logged into Proxmox and created a new virtual machine. I named it something like UbuntuServer-docker and assigned it to VLAN 30, which is where all my Docker/container workloads reside. I used the Ubuntu Server live image, selected ZFS as the storage type, and allocated 16GB RAM to ensure smooth performance.

During the Ubuntu installation, I carefully observed the DHCP setup, a critical step. I confirmed that the system automatically received an IP address, which meant my OPNsense DHCP service was working flawlessly across VLAN 30. This gave me confidence that VLAN isolation and interconnectivity were functioning as intended.

As I proceeded through the installer, I enabled OpenSSH so I could manage the server from my Parrot OS machine instead of using the Proxmox console. Once the installation was complete and the VM rebooted, I tested connectivity from Parrot OS by running a simple ping to the new server. It responded successfully.

I then established an SSH session using:

```bash
ssh <pilotvader>@<10.10.30.100>
```

Inside the SSH session, I manually installed Docker. This included:

1. Removing conflicting packages (if any)
2. Setting up the Docker repository
3. Installing Docker Engine
4. Verifying with `sudo docker run hello-world`

The confirmation message "Hello from Docker!" appeared, a satisfying sign that the installation was successful. Running `sudo docker ps` showed no running containers, just as expected.

Next, I proceeded to install Portainer (Community Edition) by:

1. Creating a Docker volume:

```bash
sudo docker volume create portainer_data
```

2. Running the Portainer container:

```bash
sudo docker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest
```

Once the container was running, I opened a browser on my Parrot OS laptop and navigated to:

```
https://<10.10.30.100>:9443
```

There, I set my Portainer admin password and accessed the local environment, where I could already see two containers:

1. The Portainer container itself
2. The hello-world container Docker had used for verification

To clean up, I deleted the hello-world container via the Portainer interface.

At this point, my Ubuntu Server in VLAN 30 was now a fully functional Docker host, securely managed over VLAN 5 from my Parrot OS laptop. The whole setup reflected a real-world SOC design, segmentation, remote management, container orchestration, and will serve as the backbone for deploying security tools like Wazuh, TheHive, and Arkime in future phases.

## Conclusion

The installation of Ubuntu Server, Docker, and Portainer has laid a solid foundation for the Security Tools section of my home lab. A notable part of this setup was accessing the Ubuntu Server via SSH from a Parrot OS laptop that was physically connected, via RJ45 cable, to a specifically configured port on my Cisco switch assigned to VLAN 5 (Security Tools). This deliberate port configuration allowed the laptop to join the segmented network, and the successful DHCP assignment from my OPNsense firewall confirmed that the VLAN setup and network services were functioning properly. This mirrored the physical isolation strategy used by Gerard O'Brien and demonstrated secure out-of-band management in a segmented environment.

With Portainer deployed on top of Docker, I now have a streamlined interface to manage containers across different network zones. This sets the stage for the next phase, where I'll deploy vulnerable applications like Metasploitable2, DVWA, and WebGoat for simulation and detection exercises. Before moving forward, it's crucial to ensure all infrastructure components, network segmentation, firewall configurations, and remote management, are fully operational. This step-by-step approach highlights the value of building a secure and modular lab environment from the ground up.

Credits: This project was independently implemented by Samson Otori, drawing conceptual inspiration from Gerard O'Brien's Ultimate Cybersecurity Lab series.

Here's a link to his YouTube channels:
- [Gerard O'Brien's Channel](https://www.youtube.com/@techwithgerard)

---

**Tags:** #UbuntuServer #Docker #Portainer #SSH #VLAN #Containerization #Homelab #Proxmox #Cybersecurity #Infrastructure #Virtualization #NetworkSegmentation #SecurityTools #RemoteManagement #ContainerOrchestration 15:T1c86,
## Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab

### Building the SIEM Foundation: Wazuh Server Deployment

Continuing from the previous episodes of my cybersecurity home lab journey, I entered the next to introduce Wazuh as the SIEM and XDR solution for telemetry collection, log correlation, and detection engineering. I provisioned a new Ubuntu server virtual machine on Proxmox with 4 vCPUs, 8GB of RAM, and 160GB of disk space, ensuring it resided within VLAN 5 (my security tools network) using the IP 10.10.5.51/24. The Wazuh installation process was straightforward. After setting a static IP and configuring DNS and gateway entries, I initiated a basic update and upgrade cycle, then ran the official Wazuh installation script from their GitHub repository.

Once the installation was completed, I accessed the Wazuh dashboard via HTTPS at https://10.10.5.51, authenticated using the auto-generated credentials, and confirmed a successful deployment. With the Wazuh manager operational, the next step was deploying agents across key systems in the lab.

<InlineGallery images={wazuh-server-deployment} title="Wazuh Server Deployment" />

### Deploying Agents: Parrot OS and Docker Server Integration

The first endpoint I configured was my Parrot OS. I elevated to root and ran the prescribed commands to add the Wazuh repository, perform an update, and install the agent. I edited the agent configuration to point it at the Wazuh manager IP and verified connectivity. Upon launching the agent, it registered on the Wazuh dashboard and began transmitting logs shortly after.

I replicated the same process on my Ubuntu Docker server (10.10.30.100), again ensuring root privileges, repository addition, and agent configuration. I initiated the agent and confirmed its visibility on the Wazuh interface. To extend observability into containerised environments, I proceeded to install the Wazuh Docker Listener and configured the Docker API for telemetry ingestion. I appended the required JSON configuration into the agent's config file, restarted the service, and enabled the module on the Wazuh dashboard under Settings > Modules > Docker Listener. Container-level logs began appearing as I restarted a few test containers to validate.

<InlineGallery images={agent-installation} title="Agent Installation Process" />

### OPNsense Firewall Agent Issues: Encountering the PID File Roadblock

With both endpoint systems operational in Wazuh, I turned my attention to integrating my OPNsense firewall (192.168.1.1) running on dedicated hardware. This step diverged significantly from the Linux-based agents, as it required enabling FreeBSD repositories and handling configuration in a constrained BSD environment. I SSHed into OPNsense, enabled SSH under System > Advanced, and modified the FreeBSD.conf file to set enabled=YES. Unlike the tutorial, I found only the freebsd.conf file available, not pfsense.conf, due to architectural differences between OPNsense and pfSense.

Following the installation instructions, I attempted to run the agent-auth binary to register the agent with the manager. However, I encountered a persistent error: agent-auth: CRITICAL (1212): Unable to create PID file. This indicated a permission or filesystem-level issue preventing the Wazuh agent from properly initialising. Further troubleshooting revealed that the ossec user and group did not exist by default. Attempts to assign ownership using chown -R ossec:ossec /var/ossec returned "illegal group name" errors.

I manually verified write permissions by creating and removing test files under /var/ossec, which confirmed basic functionality. Despite that, the Wazuh agent daemon (wazuh-agentd) consistently failed to start. Configuration and log file reviews pointed to missing or incompatible startup routines specific to FreeBSD. I eventually confirmed that even after enabling FreeBSD package support and properly configuring ossec.conf to include the manager IP, the agent appeared on the Wazuh dashboard but failed to show "Active" status.

At this point, I decided to temporarily pause work on the OPNsense agent integration. The issue remained unresolved, likely due to deeper compatibility mismatches or required kernel parameters not present on the OPNsense BSD environment. I plan to revisit this with a custom-built FreeBSD agent installation script or by manually creating missing users and startup routines. But if anyone has encountered this issue, please reach out to me with suggestions, I'll really appreciate.

<InlineGallery images={opnsense-setup} title="OPNsense Firewall Configuration" />

### Deploying Nessus: Introducing Vulnerability Scanning to the Lab

With the SIEM side in partial production, I progressed to deploying Nessus for vulnerability scanning. I created a new Ubuntu VM on Proxmox with 4 vCPUs, 4 GB RAM, and 40 GB disk, assigning it the IP address 10.10.5.52/24 within VLAN 5. After configuring static networking and enabling SSH, I logged in and ran the commands to download the latest Nessus Debian package. I installed it using dpkg and started the nessusd service.

Accessing Nessus via the browser at https://10.10.5.52:8834 allowed me to register for the Essentials version and input the activation key. The platform then began downloading its full set of plugins and signature files. Once installation was completed, I created a quick scan targeting the Metasploitable2 VM. Even with the basic scan template, the results after the scan show that it was successful even with limited information, confirming its functionality.

<InlineGallery images={nessus-deployment} title="Nessus Vulnerability Scanner Setup" />

### Conclusion

At this point, I had a partially complete security monitoring stack within my home lab. Wazuh was successfully collecting logs from my Parrot OS and Docker machines and even parsing Docker container activity. Nessus was active and ready to scan targets across VLAN 5. However, OPNsense integration remained incomplete due to agent startup issues tied to BSD permission handling. I plan to circle back to this issue later with a deeper understanding of BSD service management or possibly using Syslog forwarding as a temporary workaround.

This project showcases the real-world challenges of building a hybrid monitoring environment, integrating both Linux and BSD-based systems into a centralised SIEM. It's a valuable case study for anyone deploying Wazuh in a segmented network and dealing with heterogeneous operating systems. My next step will be to document the resolution of the OPNsense agent issue and expand Wazuh's use to include alert rule tuning and dashboard customisation.

Stay tuned for the next stage of this project as we integrate more detection and response tools.

**Credits:** This walkthrough is based on Episode 3 of the Ultimate Cybersecurity Lab YouTube series by Gerard O'Brien. While the steps closely followed his guidance, the project was independently implemented by Samson Otori, with custom network configurations and host assignments tailored to fit a pre-existing VLAN-segmented lab environment.

Here's a link to his YouTube channels:

[Gerard O'Brien's Channel](https://www.youtube.com/watch?v=ytWZ6OrFEQE&list=PL3ljjyal211AbTqlxSo6CGBiVqsXw8wrp&index=9) 16:T1f83,
## Segmenting My Cybersecurity Homelab Using VLANs

After completing the initial build of my cybersecurity homelab, I knew the next big milestone was network segmentation. I wanted to separate my environment into distinct VLANs for better traffic control, improved security, and a more organized deployment of my tools and virtual machines. The concept was simple in theory, separate traffic logically while maintaining complete control from a single pane.

My initial spark for this came from Gerard O'Brien, whose breakdown of homelab network segmentation introduced me to the idea of creating isolated VLANs for each category of devices or services. It made perfect sense: isolate your security tools, isolate vulnerable machines, isolate test environments, all while routing through a central firewall. Along the way, I hit several roadblocks. That's where Koroma Tech came in. His YouTube series covered VLAN segmentation using OPNsense, Cisco switches, and Proxmox, the exact gear I had. His breakdown helped untangle many of the issues I ran into and became an invaluable guide during troubleshooting.

## Initial Vision

I began with a vision of building an enterprise-style segmented lab. The goal was to use OPNsense as my central router and firewall, Proxmox to host all VMs, and a Cisco switch to trunk the VLANs across the environment. I planned four main VLANs:

A VLAN for security tools, which would house platforms like Wazuh and TheHive. A separate VLAN for vulnerable machines, which I could target with Kali Linux and test detection pipelines. Another VLAN would be reserved for a Windows environment, where I could simulate real endpoints and domain controllers. Finally, I wanted a VLAN for Docker containers, to explore containerized security tools and microservices.

All of this was connected by a Cisco SG500X-24 switch, a Proxmox server with multiple bonded NICs, and an OPNsense firewall running on a dedicated thin client. Internet was shared into the lab via Ethernet from a laptop using a Wi-Fi uplink, serving as a temporary ISP connection.

## Configuring the Cisco Switch

The first step was to configure VLANs on the Cisco switch. Inside the VLAN Management interface, I created VLANs 1 (default), 5, 10, 20, and 30. I used port GE1 as the trunk port connected to the Proxmox server and port GE2 as the uplink to the OPNsense firewall.

Trunking configuration was critical. GE1 needed to be tagged for VLANs 5, 10, 20, and 30. This would allow Proxmox to forward VLAN-tagged traffic into the switch and out toward the firewall. Cisco switches, however, require each port to have one untagged VLAN. I initially attempted to remove all untagged VLANs but was met with an error. It turns out VLAN 1 must remain as the untagged VLAN by default. I left it in place and tagged the rest.

Ports assigned to VM-specific devices were configured as access ports, tagged only for their respective VLANs. For example, GE5 might be an access port for VLAN 20 (Windows), and GE6 for VLAN 10 (Kali Linux).

## VLAN Interface Setup in OPNsense

On the OPNsense firewall, the VLAN interfaces were built on top of the physical NIC (RE2) connected to the Cisco switch. For each VLAN, I created a corresponding virtual interface, such as RE2_vlan20 for VLAN 20, and then assigned it inside the OPNsense GUI.

Each VLAN interface was given a static IP address, for example, 10.10.20.1/24 for VLAN 20, and a DHCP server was configured to assign IPs within that range. I added basic allow-all rules in the firewall for each VLAN subnet to ensure traffic could flow during testing. One misstep I encountered was related to firewall rules: DHCP leases weren't being issued at first, and I later discovered that a deny rule was taking precedence above my allow rule. Once I reordered them, DHCP worked flawlessly.

## Bridging and Bonding in Proxmox

This was one of the trickiest parts of the build. My Proxmox server had three network interfaces, enp10s0, enp9s0, and enp6s0, which were originally bonded into a single interface, bond0. This bond0 wasn't attached to vmbr0, my default Linux bridge, which wasn't VLAN-aware.

Inspired by Koroma Tech's video, I thought I needed to separate one NIC and create a new Linux bridge, vmbr1, for the VLANs. I detached enp6s0 from the bond and attached it to vmbr1. This led to chaos: Proxmox VMs could no longer reach the internet, static IPs weren't being assigned, DHCP requests failed, and the web interface became intermittently unreachable. I had to access the server via shell and manually fix /etc/network/interfaces. A simple ifreload -a command even took the network down temporarily.

The realization hit after consulting Koroma Tech and rewatching his video (Thanks for his response): I never needed a second bridge. The original vmbr0, was to be made to point to bond0, and that would have been perfectly capable of handling VLAN-tagged traffic, provided the VLAN-aware checkbox was enabled, which I eventually did. So I reverted everything. I re-added enp6s0 to the bond, reset the bridge to vmbr0, and things began to work.

## Assigning VLANs to VMs in Proxmox

With vmbr0 correctly configured, the next step was assigning VLAN tags to the VMs. In each VM configuration, I went to Hardware â Network Device, edited the NIC, and added the VLAN tag that matched the desired segment. For instance, the Windows VM was given VLAN 20, Kali got VLAN 10, and my Docker VM received VLAN 30.

Once this was done, I rebooted the VMs and ran ipconfig or ifconfig to verify the network settings. To my satisfaction, each VM pulled the correct IP address from its respective VLAN subnet, configured on OPNsense and trunked through the Cisco switch.

## The Debugging Journey

I ran into every possible issue: Proxmox network down, static IP not picked, DHCP not working, OPNsense not receiving traffic, and even Cisco switch ports refusing certain configs. I spent hours running packet captures on OPNsense to see if DHCP DISCOVER packets were even hitting the firewall, in many cases, they weren't, due to tagging or misassigned switch ports.

It wasn't until I fully understood how each layer, Proxmox, the switch, and OPNsense, handled tagged traffic that things started to align. The concept of trunk ports, access ports, tagging at the VM level, VLAN-aware bridges, and proper interface assignment all had to be in perfect harmony.

## Conclusion

This project pushed me. I'm proud of how it turned out, not just because everything is now working, but because I truly understand the system I built. VLANs are no longer just theory to me. I've lived the chaos, the packet loss, the empty DHCP leases, and the recovery.

Massive thanks to Gerard O'Brien for the foundational inspiration and to Koroma Tech for the actionable guidance and video breakdowns that helped me debug when things went south. He even took time to respond to my messages, and that helped keep me grounded.

If you're reading this and planning to segment your own lab: take it slow, understand each component, and know that breaking things is part of the journey. My next steps will be building services like Wazuh, TheHive, and Arkime inside their respective VLANs, and expanding the lab even further, now with a proper backbone in place.

Credits: This project was independently implemented by Samson Otori, with conceptual inspiration from Gerard O'Brien and valuable technical guidance from Koroma Tech, whose content and support were instrumental in shaping and troubleshooting the VLAN segmentation setup.

Here's a link to their YouTube channels:
- [Gerard O'Brien's Channel](https://www.youtube.com/@techwithgerard)
- [Koroma Tech Channel](https://www.youtube.com/@KoromaTech)

---

**Tags:** #VLAN #NetworkSegmentation #OPNsense #CiscoSwitch #Proxmox #Infrastructure #Homelab #Cybersecurity #NetworkSecurity #Virtualization #Firewall #DHCP #Trunking #AccessPorts #VLANAware #NetworkConfiguration #SecurityTools #WindowsEnvironment #KaliLinux #DockerContainers 9:["$","$L12",null,{"projectData":{"slug":"vulnerable-machines-installation","title":"Vulnerable Machines Installation (Metasploitable2, DVWA, bWAPP, WebGoat)","description":"A comprehensive guide to installing and configuring vulnerable machines and applications in a segmented cybersecurity homelab for penetration testing and security training.","date":"2025-07-05","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"red","tags":["Metasploitable2","DVWA","bWAPP","WebGoat","Vulnerable Machines","Penetration Testing","Docker","MacVLAN","VLAN","Homelab","Proxmox","Cybersecurity","Security Training","Web Vulnerabilities","Containerization"],"content":"$13","image":"/images/projects/hardware-lab/Vulnerable machines installation.jpeg","technologies":[],"images":[{"src":"/images/projects/hardware-lab/1 Metasploitable Installation started.png","alt":"1 Metasploitable Installation started"},{"src":"/images/projects/hardware-lab/2 Not using any installation media.png","alt":"2 Not using any installation media"},{"src":"/images/projects/hardware-lab/3 leave all as is.png","alt":"3 leave all as is"},{"src":"/images/projects/hardware-lab/4 CPU.png","alt":"4 CPU"},{"src":"/images/projects/hardware-lab/5 RAM.png","alt":"5 RAM"},{"src":"/images/projects/hardware-lab/6 Placing it in the right segment of my network vlan10.png","alt":"6 Placing it in the right segment of my network vlan10"},{"src":"/images/projects/hardware-lab/7 Summary of the configuration.png","alt":"7 Summary of the configuration"},{"src":"/images/projects/hardware-lab/8 SSHed into my proxmox server  from parrot OS.png","alt":"8 SSHed into my proxmox server from parrot OS"},{"src":"/images/projects/hardware-lab/9 downloading metasploitable 2.png","alt":"9 downloading metasploitable 2"},{"src":"/images/projects/hardware-lab/10 downloading of the metasploitable 2 in progress.png","alt":"10 downloading of the metasploitable 2 in progress"},{"src":"/images/projects/hardware-lab/11 Metasploitable downloaded successfully.png","alt":"11 Metasploitable downloaded successfully"},{"src":"/images/projects/hardware-lab/12 renaming metasploitable and trying to extract.png","alt":"12 renaming metasploitable and trying to extract"},{"src":"/images/projects/hardware-lab/13 installing unzip for extraction of metasploitable.png","alt":"13 installing unzip for extraction of metasploitable"},{"src":"/images/projects/hardware-lab/14 extracted matasploitable.png","alt":"14 extracted matasploitable"},{"src":"/images/projects/hardware-lab/15 converted metasploitable to another type.png","alt":"15 converted metasploitable to another type"},{"src":"/images/projects/hardware-lab/16 changing the highlighted to point to metasploitable.png","alt":"16 changing the highlighted to point to metasploitable"},{"src":"/images/projects/hardware-lab/17 changing the file to point to metasploitable.png","alt":"17 changing the file to point to metasploitable"},{"src":"/images/projects/hardware-lab/18 AFTER PARROT back to proxmox to confirm insertation of metasploitable vm on created vm MAIN.png","alt":"18 AFTER PARROT back to proxmox to confirm insertation of metasploitable vm on created vm MAIN"},{"src":"/images/projects/hardware-lab/19 AFTER PARROT Error when trying to start the VM.png","alt":"19 AFTER PARROT Error when trying to start the VM"},{"src":"/images/projects/hardware-lab/20 AFTER WINDOWS Editing the storageCFG file to fix the VM not starting issue.png","alt":"20 AFTER WINDOWS Editing the storageCFG file to fix the VM not starting issue"},{"src":"/images/projects/hardware-lab/21 AFTER PARROT metasploitable now started properly.png","alt":"21 AFTER PARROT metasploitable now started properly"},{"src":"/images/projects/hardware-lab/22 AFTER PARROT Confirming the IP address of the metasploitable machine.png","alt":"22 AFTER PARROT Confirming the IP address of the metasploitable machine"},{"src":"/images/projects/hardware-lab/23 AFTER PARROT Pinged my firewall and google and all worked properly.png","alt":"23 AFTER PARROT Pinged my firewall and google and all worked properly"},{"src":"/images/projects/hardware-lab/24 AFTER WINDOWS Accessing Metasploitable dashboard via ip address on parrot os.png","alt":"24 AFTER WINDOWS Accessing Metasploitable dashboard via ip address on parrot os"},{"src":"/images/projects/hardware-lab/25 Creating a test container in docker nginx.png","alt":"25 Creating a test container in docker nginx"},{"src":"/images/projects/hardware-lab/26 nginx deployed.png","alt":"26 nginx deployed"},{"src":"/images/projects/hardware-lab/27 nginx accessed and working.png","alt":"27 nginx accessed and working"},{"src":"/images/projects/hardware-lab/28 confirming my network adapter.png","alt":"28 confirming my network adapter"},{"src":"/images/projects/hardware-lab/29 Network Configuration Complet for vlan30 on portainer.png","alt":"29 Network Configuration Complet for vlan30 on portainer"},{"src":"/images/projects/hardware-lab/30 Vlan30 Config has been created.png","alt":"30 Vlan30 Config has been created"},{"src":"/images/projects/hardware-lab/31 Creating another network and selecting the initially created vlan30 config.png","alt":"31 Creating another network and selecting the initially created vlan30 config"},{"src":"/images/projects/hardware-lab/32 Creating another containder to be under vlan30.png","alt":"32 Creating another containder to be under vlan30"},{"src":"/images/projects/hardware-lab/33 nginx now deplored and having its own dedicated ip address.png","alt":"33 nginx now deplored and having its own dedicated ip address"},{"src":"/images/projects/hardware-lab/34 creating contianer for bwapp.png","alt":"34 creating contianer for bwapp"},{"src":"/images/projects/hardware-lab/35 bwapp login page after installation.png","alt":"35 bwapp login page after installation"},{"src":"/images/projects/hardware-lab/36 dvwa installation.png","alt":"36 dvwa installation"},{"src":"/images/projects/hardware-lab/37 dvwa installed login page accessed.png","alt":"37 dvwa installed login page accessed"},{"src":"/images/projects/hardware-lab/38 webgoat intsallation process.png","alt":"38 webgoat intsallation process"},{"src":"/images/projects/hardware-lab/39 webgoat loging page accessed.png","alt":"39 webgoat loging page accessed"}],"series":{"name":"Project 4.3: Vulnerable Machines Installation (Metasploitable2, DVWA, bWAPP, WebGoat)","part":1,"totalParts":1}},"relatedProjects":[{"slug":"ubuntu-server-docker-portainer","title":"Ubuntu Server, Docker and Portainer Installation in My Homelab","description":"A detailed walkthrough of deploying Ubuntu Server with Docker and Portainer in my segmented cybersecurity homelab, including remote SSH management and VLAN integration.","date":"2025-07-03","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Ubuntu Server","Docker","Portainer","SSH","VLAN","Containerization","Homelab","Proxmox","Remote Management"],"content":"$14","image":"/images/projects/hardware-lab/ubuntu-docker-portainer.jpeg","technologies":[],"images":[{"src":"/images/projects/hardware-lab/Assigning cpu cores for processor.png","alt":"Assigning cpu cores for processor"},{"src":"/images/projects/hardware-lab/assigning internal network vlan30.png","alt":"Assigning internal network vlan30"},{"src":"/images/projects/hardware-lab/assigning ram.png","alt":"Assigning ram"},{"src":"/images/projects/hardware-lab/assigning storage.png","alt":"Assigning storage"},{"src":"/images/projects/hardware-lab/During server installation this shows our dhcp is active with right ip address.png","alt":"During server installation this shows our dhcp is active with right ip address"},{"src":"/images/projects/hardware-lab/Installing ubuntu server to create docker.png","alt":"Installing ubuntu server to create docker"},{"src":"/images/projects/hardware-lab/Logged into ubuntu server on proxmox.png","alt":"Logged into ubuntu server on proxmox"},{"src":"/images/projects/hardware-lab/Selecting ubuntu server image.png","alt":"Selecting ubuntu server image"},{"src":"/images/projects/hardware-lab/Starting ubuntu server installation.png","alt":"Starting ubuntu server installation"},{"src":"/images/projects/hardware-lab/summary of setup.png","alt":"Summary of setup"},{"src":"/images/projects/hardware-lab/Ubuntu server installation process running .png","alt":"Ubuntu server installation process running"},{"src":"/images/projects/hardware-lab/Pinging ubuntu server from my parrot OS.png","alt":"Pinging ubuntu server from my parrot OS"},{"src":"/images/projects/hardware-lab/SSHed into my ubuntu server from parrot OS.png","alt":"SSHed into my ubuntu server from parrot OS"},{"src":"/images/projects/hardware-lab/Docker installation from parrot OS on ubuntu server .png","alt":"Docker installation from parrot OS on ubuntu server"},{"src":"/images/projects/hardware-lab/Sudo docker run hello world test which shows docker installed.png","alt":"Sudo docker run hello world test which shows docker installed"},{"src":"/images/projects/hardware-lab/Portainer volume creation and installation.png","alt":"Portainer volume creation and installation"},{"src":"/images/projects/hardware-lab/sudo docker ps to see the port its running on.png","alt":"Sudo docker ps to see the port its running on"},{"src":"/images/projects/hardware-lab/accessing portainer dashboard in browser.png","alt":"Accessing portainer dashboard in browser"},{"src":"/images/projects/hardware-lab/Portainer dashboard.png","alt":"Portainer dashboard"},{"src":"/images/projects/hardware-lab/portainer dashboard 2.png","alt":"Portainer dashboard 2"}],"series":{"name":"Project 4.2: Ubuntu Server, Docker and Portainer Installation","part":1,"totalParts":1}},{"slug":"project-4-4-wazuh-nessus-integration","title":"Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab","description":"A comprehensive walkthrough of deploying Wazuh SIEM/XDR for log correlation and Nessus for vulnerability scanning in a segmented cybersecurity homelab environment.","date":"2025-08-03","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Wazuh","SIEM","XDR","Nessus","Vulnerability Scanning","Security Monitoring","OPNsense","Docker","Parrot OS","Ubuntu","Proxmox","VLAN","Homelab","Blue Team"],"content":"$15","image":"/images/projects/hardware-lab/Image-header-for-project-4.4.jpeg","technologies":[],"images":[],"series":{"name":"Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab","part":1,"totalParts":1}},{"slug":"vlans-segmentation-homelab","title":"Segmenting My Cybersecurity Homelab Using VLANs","description":"A detailed walkthrough of implementing VLAN segmentation in my cybersecurity homelab using OPNsense, Cisco switches, and Proxmox for better traffic control and security isolation.","date":"2025-06-29","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"Infrastructure","tags":["VLAN","Network Segmentation","OPNsense","Cisco Switch","Proxmox","Infrastructure","Homelab"],"content":"$16","image":"/images/projects/hardware-lab/home-lab-image.jpeg","technologies":[],"images":[{"src":"/images/projects/hardware-lab/Homelab Project V117.png","alt":"Homelab Project V117 Overview"},{"src":"/images/projects/hardware-lab/Navigating to VLAN Management and VLAN Setting in Cisco Switch.png","alt":"Navigating to VLAN Management and VLAN Setting in Cisco Switch"},{"src":"/images/projects/hardware-lab/Adding new VLAN rule in cisco switch.png","alt":"Adding new VLAN rule in cisco switch"},{"src":"/images/projects/hardware-lab/Trying to set up Port VLAN Membership.png","alt":"Trying to set up Port VLAN Membership"},{"src":"/images/projects/hardware-lab/Assigning Trunk and access VLANs to Infrastructure and physical ports or system.png","alt":"Assigning Trunk and access VLANs to Infrastructure and physical ports or system"},{"src":"/images/projects/hardware-lab/Setting PVID Primary VLAN ID of Physical Parrot OS and Windows OS to ensure Untagged traffic is treated as part of that VLAN.png","alt":"Setting PVID Primary VLAN ID of Physical Parrot OS and Windows OS to ensure Untagged traffic is treated as part of that VLAN"},{"src":"/images/projects/hardware-lab/Navigating to create VLAN Interface on OPNSense.png","alt":"Navigating to create VLAN Interface on OPNSense"},{"src":"/images/projects/hardware-lab/Creating VLAN Interface on OPNSense.png","alt":"Creating VLAN Interface on OPNSense"},{"src":"/images/projects/hardware-lab/Assigning Interface on OPNSense.png","alt":"Assigning Interface on OPNSense"},{"src":"/images/projects/hardware-lab/Interface Assigned on OPNSense firewall.png","alt":"Interface Assigned on OPNSense firewall"},{"src":"/images/projects/hardware-lab/chatgpt.png","alt":"ChatGPT assistance"},{"src":"/images/projects/hardware-lab/Setting up Static IPs and DHCP For all Interface.png","alt":"Setting up Static IPs and DHCP For all Interface"},{"src":"/images/projects/hardware-lab/Enabling DHCP Server for static IP.png","alt":"Enabling DHCP Server for static IP"},{"src":"/images/projects/hardware-lab/DHCP Set for all Static IPs.png","alt":"DHCP Set for all Static IPs"},{"src":"/images/projects/hardware-lab/Creating Firewall rules for Each Interface.png","alt":"Creating Firewall rules for Each Interface"},{"src":"/images/projects/hardware-lab/Adding Firewall rules for first Interface.png","alt":"Adding Firewall rules for first Interface"},{"src":"/images/projects/hardware-lab/Firewall rules Added for all Interface.png","alt":"Firewall rules Added for all Interface"},{"src":"/images/projects/hardware-lab/Creating new linux bridge.png","alt":"Creating new linux bridge"},{"src":"/images/projects/hardware-lab/Configuring VLAN In Proxmox to Make it VLAN Aware.png","alt":"Configuring VLAN In Proxmox to Make it VLAN Aware"},{"src":"/images/projects/hardware-lab/Configuring VM interface with VLAN Tags on Proxmox.png","alt":"Configuring VM interface with VLAN Tags on Proxmox"},{"src":"/images/projects/hardware-lab/Kali on proxmox now having internet.png","alt":"Kali on proxmox now having internet"},{"src":"/images/projects/hardware-lab/Windows 10 on proxmox having internet access.png","alt":"Windows 10 on proxmox having internet access"},{"src":"/images/projects/hardware-lab/running ip show link on proxmox to know how to go about creating linux bridge.png","alt":"Running ip show link on proxmox to know how to go about creating linux bridge"},{"src":"/images/projects/hardware-lab/CHATGPTSHELL.png","alt":"ChatGPT shell assistance"}],"series":{"name":"Project 4.1: VLANs Segmentation In My Homelab","part":1,"totalParts":1}}],"categoryCounts":{"blue":45,"Infrastructure":3,"red":1}}]
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
c:null
10:[["$","title","0",{"children":"Samson's | Cybersecurity Portfolio"}],["$","meta","1",{"name":"description","content":"Professional cybersecurity portfolio showcasing expertise in digital security"}],["$","meta","2",{"name":"generator","content":"v0.dev"}],["$","link","3",{"rel":"icon","href":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png"}]]
