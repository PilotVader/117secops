1:"$Sreact.fragment"
2:I[9304,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"ThemeProvider"]
3:I[9241,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"CyberHeader"]
4:I[7555,[],""]
5:I[1295,[],""]
6:I[1024,["542","static/chunks/542-9c169102c7286aba.js","838","static/chunks/838-83c262eea6b250cb.js","345","static/chunks/app/not-found-f26a84874965db45.js"],"default"]
7:I[3063,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],"Image"]
8:I[6874,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","52","static/chunks/52-dc2ebebf60073ec5.js","309","static/chunks/309-3e43f9b66d438df9.js","945","static/chunks/945-2a14fe9ed70b235a.js","916","static/chunks/916-d000ae8515890a43.js","794","static/chunks/794-40a14984f3a6b1a7.js","177","static/chunks/app/layout-020809086aa700bb.js"],""]
a:I[9665,[],"OutletBoundary"]
d:I[9665,[],"ViewportBoundary"]
f:I[9665,[],"MetadataBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/78204a441d290532.css","style"]
:HL["/_next/static/css/b5c3a1bf19425f6c.css","style"]
0:{"P":null,"b":"ueOktod6GdedqcxtLheow","p":"","c":["","projects","soc-automation-project",""],"i":false,"f":[[["",{"children":["projects",{"children":[["slug","soc-automation-project","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/78204a441d290532.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b5c3a1bf19425f6c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":["$","script",null,{"defer":true,"src":"https://cloud.umami.is/script.js","data-website-id":"1c0f224c-1fe0-4093-a4e2-c43cb8c84bfa"}]}],["$","body",null,{"className":"__className_f367f3","children":["$","$L2",null,{"attribute":"class","defaultTheme":"light","disableTransitionOnChange":true,"children":["$","div",null,{"className":"flex min-h-screen flex-col","children":[["$","$L3",null,{}],["$","main",null,{"className":"flex-1 pt-16","children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-background py-5 border-t border-border","children":["$","div",null,{"className":"container mx-auto px-4 md:px-6","children":[["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-3 gap-4","children":[["$","div",null,{"className":"space-y-2","children":[["$","div",null,{"className":"flex items-center","children":["$","div",null,{"className":"relative w-[3.6rem] h-[3.6rem]","children":["$","$L7",null,{"src":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png","alt":"117 SECOPS Logo","fill":true,"className":"object-contain"}]}]}],["$","p",null,{"className":"text-sm text-muted-foreground max-w-xs","children":"Cybersecurity professional specializing in protecting digital assets from evolving threats."}],["$","div",null,{"className":"pt-0","children":["$","a",null,{"href":"https://www.linkedin.com/in/otori-samson/","target":"_blank","rel":"noopener noreferrer","children":"Contact Me","className":"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-9 rounded-md px-3 cyber-border bg-transparent text-foreground hover:bg-purple-600 hover:text-white","ref":null}]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Quick Links"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"children":["$","$L8",null,{"href":"/","className":"text-sm text-muted-foreground hover:text-primary","children":"Home"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/blog","className":"text-sm text-muted-foreground hover:text-primary","children":"Blog"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/projects","className":"text-sm text-muted-foreground hover:text-primary","children":"Projects"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/portfolio","className":"text-sm text-muted-foreground hover:text-primary","children":"Portfolio"}]}],["$","li",null,{"children":["$","$L8",null,{"href":"/about","className":"text-sm text-muted-foreground hover:text-primary","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium text-sm mb-2 text-foreground","children":"Areas of Expertise"}],["$","ul",null,{"className":"space-y-0.5","children":[["$","li",null,{"className":"text-sm text-muted-foreground","children":"Security Assessment"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Penetration Testing"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Secure Development"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Incident Response"}],["$","li",null,{"className":"text-sm text-muted-foreground","children":"Compliance"}]]}]]}]]}],["$","div",null,{"className":"border-t border-border mt-5 pt-3 flex flex-col md:flex-row justify-between items-center","children":["$","p",null,{"className":"text-sm text-muted-foreground","children":["© ",2025," Samson's. Personal cybersecurity portfolio."]}]}]]}]}]]}]}]}]]}]]}],{"children":["projects",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","soc-automation-project","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L9","$undefined",null,["$","$La",null,{"children":["$Lb","$Lc",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","dLNnTAEo6Y2ZrNW3JpMtZ",{"children":[["$","$Ld",null,{"children":"$Le"}],null]}],["$","$Lf",null,{"children":"$L10"}]]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:I[2238,["542","static/chunks/542-9c169102c7286aba.js","651","static/chunks/651-e2b53cfd6ab14c6d.js","838","static/chunks/838-83c262eea6b250cb.js","842","static/chunks/842-e0e5a1d477d9d65d.js","150","static/chunks/150-c359029d3b689678.js","419","static/chunks/app/projects/%5Bslug%5D/page-41cd4d27245b4b70.js"],"default"]
13:Tbce,
# Part 1: Planning the Infrastructure

As I continue my journey into cybersecurity, I've embarked on a SOC Automation Project aimed at building a home lab environment from scratch. The ultimate goal is to create a fully functional Security Orchestration, Automation, and Response (SOAR) setup, with tools like Wazuh, The Hive, and Shuffle for case management and automation. This project will enable hands-on experience critical for Security Operations Center (SOC) tasks, providing a foundation for alert management, response actions, and data enrichment.

## Diagramming the Lab Environment

This week, I began by visualizing the lab's architecture, which will guide deploying various SOC components. Using Draw.io, I created a logical flow diagram, depicting the interaction of key elements like a Windows 10 client with Wazuh and SOAR tools (The Hive and Shuffle) across different network layers. This visual roadmap is crucial, as many cybersecurity interviews require candidates to whiteboard a secure lab setup—a skill that this project will reinforce.

## The main workflow consists of:

1. **Event Generation**: The Windows 10 client will send event logs to Wazuh, acting as the lab's SIEM system. This data flow simulates the information-sharing pipeline from the endpoint to SIEM.
2. **Alert Triggering and Enrichment**: Wazuh will analyze these events and generate alerts, which are then forwarded to Shuffle for enrichment with open-source intelligence (OSINT).
3. **Case Management**: Finally, the enriched data and actionable alerts will be logged in The Hive, streamlining incident tracking and case management.

## Connecting the Dots

To logically map how alerts will flow, color-coded connections will be implemented in the diagram to track data from generation, through analysis, to final case management. For example, alerts from Wazuh to Shuffle are labeled in blue, indicating a "send alert" action, while OSINT data flows in green to enrich the incident context. These connections provide a cohesive view of how data travels within the SOC environment, aligning the diagram to real-world incident workflows.

## Future Plans

In my upcoming posts, I'll move into deploying these tools on virtual machines, configuring Wazuh and The Hive, and connecting them with my local workstation. This setup will allow me to simulate common security alerts, test case management processes, and refine my incident response workflows.

Stay tuned as I document each stage, including implementation challenges, configurations, and SOC analysis techniques.

Here's the link to follow along: [SOC Automation Project](https://www.youtube.com/watch?v=XR3eamn8ydQ&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=6)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#MYDFIR #CyberSecurity #SOCAnalyst #HomeLab #Automation #HandsOnExperience
\`14:T1583,
# Part 3: Generating and Ingesting Telemetry

## Introduction

In this third part of the MYDFIR SOC Automation Project home lab series, I dive into the critical process of generating telemetry from a Windows 10 machine and ensuring it is correctly ingested into Wazuh. By the end of this session, I would have successfully configured my system to log events, including activity from Mimikatz, and triggered a custom alert. This hands-on process not only enhances my understanding of SIEM operations but also strengthens my ability to detect and analyze security incidents effectively.

## Configuring Wazuh to Ingest Sysmon Logs

To begin, I access the Wazuh configuration settings on my Windows 10 machine. When Wazuh is installed, its configuration files are located under Program Files (x86), specifically within the ek-agent folder. The key file I need to modify is ossec.conf. This file governs how logs are processed and which events are included or excluded from analysis. By default, certain event IDs are excluded using the != operator. However, for my purpose, I need to monitor processes related to Mimikatz, which requires Sysmon to be installed or Windows Security Event ID 4688 to be enabled. Since Sysmon was installed in part two of this series, I opt for that method.

Before making changes, I first create a backup of ossec.conf to safeguard against errors. This allows me to revert back if needed. I then modify the configuration to ingest Sysmon logs by adding a new entry under the localfile section. To locate the correct Sysmon channel name, I open the Windows Event Viewer, navigate to Applications and Services > Microsoft > Windows > Sysmon, and retrieve the operational log name from the properties section. This name is then inserted into my ossec.conf file in place of the existing application log configuration.

## Adjusting Log Categories and Restarting Services

Next, I remove other log categories such as Application, Security, and System, ensuring that only Sysmon logs are forwarded to the Wazuh manager. Once the changes are saved, administrative privileges are required to replace the existing configuration file. After this, I restart the Wazuh service, as any configuration changes must be followed by a service restart to take effect.

## Testing Telemetry with Mimikatz

With the updated configuration in place, I verify the ingestion of Sysmon logs in the Wazuh dashboard. Searching for "Sysmon" in the Alerts index may take some time before logs appear. To test this setup, I download and execute Mimikatz. Since Windows Defender would block this file, I must first exclude the Downloads folder from virus scanning. This is done through Windows Security settings by adding an exclusion for the Downloads directory. Also, Google Chrome may prevent the download, so I disable Safe Browsing under Privacy and Security settings in Chrome before proceeding.

Once Mimikatz is downloaded and extracted, I run it via an administrative PowerShell session and monitor Wazuh for related alerts. If no alerts appear, it is likely because Wazuh only logs events when a predefined rule is triggered. To address this, I modify the ossec.conf file on the Wazuh manager to log all events by default. This is done by enabling the logall and logall_json options in the configuration file. After saving these changes, I restart the Wazuh manager service.

## Enhancing Log Archiving and Indexing

To ensure that all logs are archived and ingested into Wazuh, I also update Filebeat's configuration. This involves navigating to the Filebeat YAML configuration file and changing the archives_enabled setting from false to true. As always, after modifying configurations, I restart the Filebeat service to apply the changes.

Once the configurations are updated, I proceed to create a new index in the Wazuh dashboard for archived logs. This is done through the Stack Management section, where I define a new index pattern named wazuh-archives-*. After setting the timestamp field, I finalize the index creation. Now, when navigating to the Discover section of Wazuh, I can select my newly created index and search for logs related to Mimikatz.

## Troubleshooting Log Ingestion Issues

If events are still not visible, I perform troubleshooting by inspecting the archived log files in the Wazuh manager's CLI. By navigating to /var/ossec/logs/archives/, I list the available log files and use cat and grep commands to search for Mimikatz activity. If the logs are present in the archive but not appearing in the dashboard, it indicates a delay in ingestion, which resolves over time.

## Conclusion

This session underscores the importance of proper log configuration and SIEM tuning. By ensuring that all relevant events are captured and making necessary adjustments, I enhance my detection capabilities. With my telemetry now successfully feeding into Wazuh, I am well-prepared for the final part of the series, where I will further refine my detection rules and automation workflows.

Stay Tuned.

Here's the link to follow along: [SOC Automation Project](https://www.youtube.com/watch?v=amTtlN3uvFU&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=9)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#CyberSecurity #SOCAnalyst #MYDFIR #HandsOnExperience #SecurityMonitoring #IncidentResponse 15:T1566,
# Part 2: Infrastructure Setup

My focus has shifted to establishing the core infrastructure and generating telemetry data for analysis, a critical foundation for any Security Operations Center (SOC). This phase involves setting up essential components including a Windows client, Wazuh server, and TheHive for comprehensive security monitoring and incident response.

## Setting Up the Windows Environment

I began the infrastructure deployment with a Windows 10 virtual machine, ensuring I had a proper endpoint for monitoring. Using VirtualBox to create the VM, I allocated appropriate resources and installed Windows 10 with the necessary configurations to support my security tools.

Sysmon, a critical component for endpoint monitoring, was installed using PowerShell with administrative privileges. This installation required careful attention to the placement of the configuration file and proper execution of the installation commands on Windows PowerShell. After installation, I verified Sysmon's presence through the Services console and Event Viewer, confirming it was actively monitoring system events.

## Deploying Wazuh Server

With the endpoint ready, I moved to setting up the Wazuh server, my primary security monitoring platform. On the same VirtualBox, I deployed the Ubuntu 22.04 virtual machine. I also configured VirtualBox's network settings and set it to a bridged adapter to allow communication with my endpoint (Windows 10 OS).

The Wazuh installation process involved running their official installation script, which automatically configured the basic components. These included the indexer, server, and dashboard components, which form the core of Wazuh's security monitoring capabilities. The installation provided secure credentials for accessing the dashboard, which I carefully documented for future use.

Wazuh serves as the log manager and intrusion detection system. The setup begins by accessing the Wazuh dashboard and retrieving the necessary credentials for configuration. To integrate a Windows client, the agent configuration command is generated from the Wazuh dashboard, tailored to the server's IP. This command is then executed on the Windows machine, establishing a connection with the Wazuh server. Although this method didn't work for me after so many trials, I eventually had to use another method where I had to generate a key through the Wazuh agent manager on my Ubuntu terminal by running `/var/ossec/bin/manage_agents`. I then used the agent manager desktop interface on my Windows 10 to register the windows as an endpoint using the key generated. The client's status was then monitored and was active, and I could confirm telemetry was being successfully transmitted.

## Configuring TheHive with Cassandra

TheHive's efficiency depends heavily on its backend database, Cassandra. The configuration starts with modifying the Cassandra settings to align with the lab setup. This includes navigating to the configuration file and updating parameters like the cluster name and listen address to ensure proper connectivity. Restarting the Cassandra service and confirming its active status are crucial steps to ensure everything runs smoothly.

To integrate theHive with Cassandra, adjustments to the application settings file are required. This involves specifying the cluster name and database connection details. To avoid operational issues, it is vital to ensure that TheHive has the correct permissions to access necessary directories. Once configured, TheHive services are started, and the application becomes accessible through its designated URL.

For this section, I used a separate machine running Parrot operating system.

## Establishing Connectivity

After configuring all components, and confirming my endpoint status on my Wazuh dashboard as "Active", I focused on establishing proper connectivity between systems. The Windows agent was deployed to my Wazuh server, creating a secure communication channel for transmitting security events. Wazuh's role in the lab setup revolves around monitoring and alert generation. By installing Wazuh and connecting it to TheHive, alerts become actionable incidents for investigation. This is what I'll explore in further episodes of this post.

I decided to test telemetry ingestion on my Wazuh server by creating a file document on my endpoint to see if I could see any alert related to the action, and it was a success.

## Conclusion

Through these exercises, I've established a robust foundation for security monitoring and incident response. In the next chapter of this series, I will be going more in-depth with telemetry generation using Mimikatz, which is a powerful tool used for extracting credentials from Windows systems, I will learn how to send telemetry containing mimikatz, configure Wazuh to log all telemetry and craft custom rule to detect mimikatz usage. In further chapter, I will also explore the use of TheHive which I've just set up in the chapter.

Stay tuned.

Here's the link to follow along: [SOC Automation Project](https://www.youtube.com/watch?v=VuSKMPRXN1M&list=PLG6KGSNK4PuBWmX9NykU0wnWamjxdKhDJ&index=8)

*Credit: This project was originally created by the MYDFIR YouTube channel. All structure and content was inspired by MYDFIR. Check his channel out: [@MyDFIR](https://www.youtube.com/@MyDFIR)*

#CyberSecurity #SOCAnalyst #MYDFIR #HandsOnExperience #SecurityMonitoring #IncidentResponse 16:T1c86,
## Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab

### Building the SIEM Foundation: Wazuh Server Deployment

Continuing from the previous episodes of my cybersecurity home lab journey, I entered the next to introduce Wazuh as the SIEM and XDR solution for telemetry collection, log correlation, and detection engineering. I provisioned a new Ubuntu server virtual machine on Proxmox with 4 vCPUs, 8GB of RAM, and 160GB of disk space, ensuring it resided within VLAN 5 (my security tools network) using the IP 10.10.5.51/24. The Wazuh installation process was straightforward. After setting a static IP and configuring DNS and gateway entries, I initiated a basic update and upgrade cycle, then ran the official Wazuh installation script from their GitHub repository.

Once the installation was completed, I accessed the Wazuh dashboard via HTTPS at https://10.10.5.51, authenticated using the auto-generated credentials, and confirmed a successful deployment. With the Wazuh manager operational, the next step was deploying agents across key systems in the lab.

<InlineGallery images={wazuh-server-deployment} title="Wazuh Server Deployment" />

### Deploying Agents: Parrot OS and Docker Server Integration

The first endpoint I configured was my Parrot OS. I elevated to root and ran the prescribed commands to add the Wazuh repository, perform an update, and install the agent. I edited the agent configuration to point it at the Wazuh manager IP and verified connectivity. Upon launching the agent, it registered on the Wazuh dashboard and began transmitting logs shortly after.

I replicated the same process on my Ubuntu Docker server (10.10.30.100), again ensuring root privileges, repository addition, and agent configuration. I initiated the agent and confirmed its visibility on the Wazuh interface. To extend observability into containerised environments, I proceeded to install the Wazuh Docker Listener and configured the Docker API for telemetry ingestion. I appended the required JSON configuration into the agent's config file, restarted the service, and enabled the module on the Wazuh dashboard under Settings > Modules > Docker Listener. Container-level logs began appearing as I restarted a few test containers to validate.

<InlineGallery images={agent-installation} title="Agent Installation Process" />

### OPNsense Firewall Agent Issues: Encountering the PID File Roadblock

With both endpoint systems operational in Wazuh, I turned my attention to integrating my OPNsense firewall (192.168.1.1) running on dedicated hardware. This step diverged significantly from the Linux-based agents, as it required enabling FreeBSD repositories and handling configuration in a constrained BSD environment. I SSHed into OPNsense, enabled SSH under System > Advanced, and modified the FreeBSD.conf file to set enabled=YES. Unlike the tutorial, I found only the freebsd.conf file available, not pfsense.conf, due to architectural differences between OPNsense and pfSense.

Following the installation instructions, I attempted to run the agent-auth binary to register the agent with the manager. However, I encountered a persistent error: agent-auth: CRITICAL (1212): Unable to create PID file. This indicated a permission or filesystem-level issue preventing the Wazuh agent from properly initialising. Further troubleshooting revealed that the ossec user and group did not exist by default. Attempts to assign ownership using chown -R ossec:ossec /var/ossec returned "illegal group name" errors.

I manually verified write permissions by creating and removing test files under /var/ossec, which confirmed basic functionality. Despite that, the Wazuh agent daemon (wazuh-agentd) consistently failed to start. Configuration and log file reviews pointed to missing or incompatible startup routines specific to FreeBSD. I eventually confirmed that even after enabling FreeBSD package support and properly configuring ossec.conf to include the manager IP, the agent appeared on the Wazuh dashboard but failed to show "Active" status.

At this point, I decided to temporarily pause work on the OPNsense agent integration. The issue remained unresolved, likely due to deeper compatibility mismatches or required kernel parameters not present on the OPNsense BSD environment. I plan to revisit this with a custom-built FreeBSD agent installation script or by manually creating missing users and startup routines. But if anyone has encountered this issue, please reach out to me with suggestions, I'll really appreciate.

<InlineGallery images={opnsense-setup} title="OPNsense Firewall Configuration" />

### Deploying Nessus: Introducing Vulnerability Scanning to the Lab

With the SIEM side in partial production, I progressed to deploying Nessus for vulnerability scanning. I created a new Ubuntu VM on Proxmox with 4 vCPUs, 4 GB RAM, and 40 GB disk, assigning it the IP address 10.10.5.52/24 within VLAN 5. After configuring static networking and enabling SSH, I logged in and ran the commands to download the latest Nessus Debian package. I installed it using dpkg and started the nessusd service.

Accessing Nessus via the browser at https://10.10.5.52:8834 allowed me to register for the Essentials version and input the activation key. The platform then began downloading its full set of plugins and signature files. Once installation was completed, I created a quick scan targeting the Metasploitable2 VM. Even with the basic scan template, the results after the scan show that it was successful even with limited information, confirming its functionality.

<InlineGallery images={nessus-deployment} title="Nessus Vulnerability Scanner Setup" />

### Conclusion

At this point, I had a partially complete security monitoring stack within my home lab. Wazuh was successfully collecting logs from my Parrot OS and Docker machines and even parsing Docker container activity. Nessus was active and ready to scan targets across VLAN 5. However, OPNsense integration remained incomplete due to agent startup issues tied to BSD permission handling. I plan to circle back to this issue later with a deeper understanding of BSD service management or possibly using Syslog forwarding as a temporary workaround.

This project showcases the real-world challenges of building a hybrid monitoring environment, integrating both Linux and BSD-based systems into a centralised SIEM. It's a valuable case study for anyone deploying Wazuh in a segmented network and dealing with heterogeneous operating systems. My next step will be to document the resolution of the OPNsense agent issue and expand Wazuh's use to include alert rule tuning and dashboard customisation.

Stay tuned for the next stage of this project as we integrate more detection and response tools.

**Credits:** This walkthrough is based on Episode 3 of the Ultimate Cybersecurity Lab YouTube series by Gerard O'Brien. While the steps closely followed his guidance, the project was independently implemented by Samson Otori, with custom network configurations and host assignments tailored to fit a pre-existing VLAN-segmented lab environment.

Here's a link to his YouTube channels:

[Gerard O'Brien's Channel](https://www.youtube.com/watch?v=ytWZ6OrFEQE&list=PL3ljjyal211AbTqlxSo6CGBiVqsXw8wrp&index=9) 9:["$","$L12",null,{"projectData":{"slug":"soc-automation-project","title":"Part 1: Planning the Infrastructure","description":"Building a home lab SOC environment for hands-on experience with SOAR tools like Wazuh, The Hive, and Shuffle.","date":"2024-11-30","author":"Samson Otori","client":"Personal Project","challenge":"Gaining practical experience in SOC tasks like alert management, response actions, and data enrichment using a functional SOAR setup.","solution":"Building a home lab environment from scratch, diagramming the architecture, and planning the deployment of Wazuh, The Hive, and Shuffle for event logging, alert triggering/enrichment, and case management.","results":["Planned the SOC lab infrastructure","Created a logical flow diagram using Draw.io","Outlined the main workflow from event generation to case management","Mapped alert flow using color-coded connections"],"category":"blue","tags":["Blue Team","SIEM","SOAR"],"content":"$13","image":"/images/projects/project 2.png","technologies":["Wazuh","The Hive","Shuffle","Windows 10","Draw.io"],"images":[{"src":"/images/projects/soc-automation/detailed-workflow.png","alt":"Detailed SOC Automation Workflow showing connections between Wazuh, Shuffle, TheHive and other components"},{"src":"/images/projects/soc-automation/simple-workflow.png","alt":"Simplified SOC Automation Workflow diagram showing the basic data flow between components"}],"series":{"name":"Project 2: SOC Automation Project","part":1,"totalParts":3}},"relatedProjects":[{"slug":"soc-automation-project-part2","title":"Part 3: Generating and Ingesting Telemetry","description":"Setting up telemetry generation and ingestion in our SOC environment using Mimikatz and configuring Wazuh for detection","date":"2025-03-21","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Blue Team","SOC","Automation","SIEM","Telemetry"],"content":"$14","image":"/images/projects/project 2.png","technologies":[],"images":[{"src":"/images/projects/soc-automation/part3/1 Editing ossec config file to ingest sysmon logs.png","alt":"Editing Wazuh ossec.conf File to Ingest Sysmon Logs"},{"src":"/images/projects/soc-automation/part3/2 Sysmon service running on windows for telemetary generation.png","alt":"Sysmon Service Running on Windows for Telemetry Generation"},{"src":"/images/projects/soc-automation/part3/3 Mimikatz downloaded and running on client pc.png","alt":"Mimikatz Downloaded and Running on Client PC"},{"src":"/images/projects/soc-automation/part3/4 Creating index for archives to enable us search all ingested logs.png","alt":"Creating Index for Archives to Search All Ingested Logs"},{"src":"/images/projects/soc-automation/part3/5 Configuring the wazuh ossec.conf file to take all logs of everything happening.png","alt":"Configuring Wazuh to Log All Events"},{"src":"/images/projects/soc-automation/part3/6 changing filebeat config in order for wazuh to ingest logs into archives.png","alt":"Modifying Filebeat Configuration for Log Archiving"},{"src":"/images/projects/soc-automation/part3/7 Mimikatz events logs now ingested into archives and visible on wazuh dashboard.png","alt":"Mimikatz Event Logs Visible in Wazuh Dashboard"},{"src":"/images/projects/soc-automation/part3/8 Rule creation through sysmon targeting event id 1.png","alt":"Creating Sysmon Rule for Event ID 1"},{"src":"/images/projects/soc-automation/part3/9 Crafting rule to detect mimikatz (RULE CRAFTED).png","alt":"Crafting Detection Rule for Mimikatz"},{"src":"/images/projects/soc-automation/part3/10 Alert generated on wazuh on mimikatz usage.png","alt":"Wazuh Alert Generated for Mimikatz Usage"}],"series":{"name":"Project 2: SOC Automation Project","part":3,"totalParts":3}},{"slug":"soc-automation-project-part1","title":"Part 2: Infrastructure Setup","description":"Setting up the core infrastructure components for our SOC automation environment including Wazuh, Windows client, and TheHive","date":"2025-03-05","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Blue Team","SOC","Automation","SIEM"],"content":"$15","image":"/images/projects/project 2.png","technologies":[],"images":[{"src":"/images/projects/soc-automation/part2/1 Windows 10 virtual machine properties.png","alt":"Windows 10 Virtual Machine Setup Properties"},{"src":"/images/projects/soc-automation/part2/2 Ubuntu OS Virtual Machine properties.png","alt":"Ubuntu OS Virtual Machine Properties"},{"src":"/images/projects/soc-automation/part2/3 Wazuh Installation.png","alt":"Wazuh Installation Process"},{"src":"/images/projects/soc-automation/part2/4 Deploying New Agent To Wazuh MAIN.png","alt":"Deploying New Agent to Wazuh"},{"src":"/images/projects/soc-automation/part2/5 Generating Key For Newly Created Agent.png","alt":"Generating Key for New Wazuh Agent"},{"src":"/images/projects/soc-automation/part2/6 Adding Agent Key to my wazuh manager on windows machine MAIN.png","alt":"Adding Agent Key to Wazuh Manager on Windows"},{"src":"/images/projects/soc-automation/part2/7 Wazuh Login Page.png","alt":"Wazuh Dashboard Login Page"},{"src":"/images/projects/soc-automation/part2/8 The Hive Installation in Parrot.png","alt":"TheHive Installation in Parrot OS"},{"src":"/images/projects/soc-automation/part2/9 Cassandra Installation in Parrot.png","alt":"Cassandra Installation in Parrot OS"},{"src":"/images/projects/soc-automation/part2/10 TheHive Configuration.png","alt":"TheHive Configuration Setup"},{"src":"/images/projects/soc-automation/part2/11 Changing RPC Address in Cassandra.png","alt":"Configuring RPC Address in Cassandra"},{"src":"/images/projects/soc-automation/part2/12 Changing Listening address in Cassandra.png","alt":"Setting Cassandra Listening Address"},{"src":"/images/projects/soc-automation/part2/13 Thehive service started.png","alt":"TheHive Service Successfully Started"},{"src":"/images/projects/soc-automation/part2/14 TheHive Loginpage.png","alt":"TheHive Login Page"},{"src":"/images/projects/soc-automation/part2/15 Wazuh agent dashboard with Active agent MAIN.png","alt":"Wazuh Agent Dashboard Showing Active Agent"},{"src":"/images/projects/soc-automation/part2/16 Sample file creation for FILE MONITORING.png","alt":"Testing File Monitoring with Sample File Creation"},{"src":"/images/projects/soc-automation/part2/17 Alert for file added to endpoint on wazuh.png","alt":"Wazuh Alert for File Addition on Endpoint"}],"series":{"name":"Project 2: SOC Automation Project","part":2,"totalParts":3}},{"slug":"project-4-4-wazuh-nessus-integration","title":"Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab","description":"A comprehensive walkthrough of deploying Wazuh SIEM/XDR for log correlation and Nessus for vulnerability scanning in a segmented cybersecurity homelab environment.","date":"2025-08-03","author":"Samson Otori","client":"Personal Project","challenge":"","solution":"","results":[],"category":"blue","tags":["Wazuh","SIEM","XDR","Nessus","Vulnerability Scanning","Security Monitoring","OPNsense","Docker","Parrot OS","Ubuntu","Proxmox","VLAN","Homelab","Blue Team"],"content":"$16","image":"/images/projects/hardware-lab/Image-header-for-project-4.4.jpeg","technologies":[],"images":[],"series":{"name":"Project 4.4: Integrating Wazuh SIEM/XDR and Nessus in a Cybersecurity Home Lab","part":1,"totalParts":1}}],"categoryCounts":{"blue":45,"Infrastructure":3,"red":1}}]
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
c:null
10:[["$","title","0",{"children":"Samson's | Cybersecurity Portfolio"}],["$","meta","1",{"name":"description","content":"Professional cybersecurity portfolio showcasing expertise in digital security"}],["$","meta","2",{"name":"generator","content":"v0.dev"}],["$","link","3",{"rel":"icon","href":"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/117%20Corporation%20no%20bg-5VVBXF0igK8jcCo43su7cpA2isco7t.png"}]]
